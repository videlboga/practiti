"""
üé´ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets.
"""

from typing import List, Optional, Dict
from datetime import date, datetime, timedelta

from ..models.subscription import (
    Subscription, SubscriptionCreateData, SubscriptionUpdateData, 
    SubscriptionStatus, SubscriptionType
)
from ..repositories.protocols.subscription_repository import SubscriptionRepositoryProtocol
from ..utils.logger import get_logger

logger = get_logger(__name__)


class InMemorySubscriptionRepository(SubscriptionRepositoryProtocol):
    """
    –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –≤ –ø–∞–º—è—Ç–∏.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets.
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è."""
        self._subscriptions: Dict[str, Subscription] = {}
        self._client_index: Dict[str, List[str]] = {}  # client_id -> [subscription_ids]
        
        logger.info("InMemorySubscriptionRepository –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def save_subscription(self, data: SubscriptionCreateData) -> Subscription:
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç.
        
        Args:
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
            
        Returns:
            –°–æ–∑–¥–∞–Ω–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç
        """
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∏ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –ø–æ —Ç–∏–ø—É
        price = self._get_subscription_price(data.type)
        total_classes = self._get_subscription_classes(data.type)
        end_date = self._calculate_end_date(data.type, data.start_date)
        
        subscription = Subscription(
            client_id=data.client_id,
            type=data.type,
            total_classes=total_classes,
            start_date=data.start_date,
            end_date=end_date,
            price=price,
            status=SubscriptionStatus.PENDING,
            created_at=datetime.now()
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç
        self._subscriptions[subscription.id] = subscription
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –∫–ª–∏–µ–Ω—Ç–æ–≤
        if data.client_id not in self._client_index:
            self._client_index[data.client_id] = []
        self._client_index[data.client_id].append(subscription.id)
        
        logger.info(f"–ê–±–æ–Ω–µ–º–µ–Ω—Ç {subscription.type.value} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–∞–º—è—Ç–∏ —Å ID: {subscription.id}")
        return subscription
    
    async def get_subscription_by_id(self, subscription_id: str) -> Optional[Subscription]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç –ø–æ ID.
        
        Args:
            subscription_id: ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
            
        Returns:
            –ê–±–æ–Ω–µ–º–µ–Ω—Ç –∏–ª–∏ None
        """
        return self._subscriptions.get(subscription_id)
    
    async def get_subscriptions_by_client_id(self, client_id: str) -> List[Subscription]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞.
        
        Args:
            client_id: ID –∫–ª–∏–µ–Ω—Ç–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞
        """
        subscription_ids = self._client_index.get(client_id, [])
        return [self._subscriptions[sid] for sid in subscription_ids if sid in self._subscriptions]
    
    async def get_active_subscriptions_by_client_id(self, client_id: str) -> List[Subscription]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞.
        
        Args:
            client_id: ID –∫–ª–∏–µ–Ω—Ç–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
        """
        all_subscriptions = await self.get_subscriptions_by_client_id(client_id)
        return [sub for sub in all_subscriptions if sub.is_active]
    
    async def update_subscription(self, subscription_id: str, data: SubscriptionUpdateData) -> Optional[Subscription]:
        """
        –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞.
        
        Args:
            subscription_id: ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            
        Returns:
            –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç –∏–ª–∏ None
        """
        subscription = self._subscriptions.get(subscription_id)
        if not subscription:
            return None
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
        if data.status is not None:
            subscription.status = data.status
        if data.used_classes is not None:
            subscription.used_classes = data.used_classes
        if data.payment_confirmed is not None:
            subscription.payment_confirmed = data.payment_confirmed
            if data.payment_confirmed:
                subscription.payment_confirmed_at = datetime.now()
        if data.end_date is not None:
            subscription.end_date = data.end_date
        if data.remaining_classes is not None:
            # –ò–∑–º–µ–Ω—è–µ–º used_classes –∏—Å—Ö–æ–¥—è –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–Ω—è—Ç–∏–π
            subscription.used_classes = subscription.total_classes - data.remaining_classes
        if getattr(data, 'total_classes', None) is not None:  # type: ignore[attr-defined]
            subscription.total_classes = data.total_classes  # type: ignore[attr-defined]
        if getattr(data, 'type', None) is not None:  # type: ignore[attr-defined]
            subscription.type = data.type  # type: ignore[attr-defined]
            # total_classes –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —è–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω –∏–ª–∏ –æ—Å—Ç–∞—ë—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º
        
        logger.info(f"–ê–±–æ–Ω–µ–º–µ–Ω—Ç {subscription_id} –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ø–∞–º—è—Ç–∏")
        return subscription
    
    async def delete_subscription(self, subscription_id: str) -> bool:
        """
        –£–¥–∞–ª–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç.
        
        Args:
            subscription_id: ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç —É–¥–∞–ª—ë–Ω, False –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        subscription = self._subscriptions.get(subscription_id)
        if not subscription:
            return False
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        del self._subscriptions[subscription_id]
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∏–Ω–¥–µ–∫—Å–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
        if subscription.client_id in self._client_index:
            if subscription_id in self._client_index[subscription.client_id]:
                self._client_index[subscription.client_id].remove(subscription_id)
        
        logger.info(f"–ê–±–æ–Ω–µ–º–µ–Ω—Ç {subscription_id} —É–¥–∞–ª–µ–Ω –∏–∑ –ø–∞–º—è—Ç–∏")
        return True
    
    async def list_subscriptions(
        self, 
        limit: Optional[int] = None, 
        offset: Optional[int] = None
    ) -> List[Subscription]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤.
        
        Args:
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
            offset: –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
        """
        subscriptions = list(self._subscriptions.values())
        
        if offset:
            subscriptions = subscriptions[offset:]
        if limit:
            subscriptions = subscriptions[:limit]
            
        return subscriptions
    
    async def get_subscriptions_by_status(self, status: SubscriptionStatus) -> List[Subscription]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É.
        
        Args:
            status: –°—Ç–∞—Ç—É—Å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
        """
        return [sub for sub in self._subscriptions.values() if sub.status == status]
    
    async def get_expiring_subscriptions(self, days_before: int = 3) -> List[Subscription]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫—É—Ç.
        
        Args:
            days_before: –ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –∏—Å–∫–∞—Ç—å
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
        """
        target_date = date.today() + timedelta(days=days_before)
        
        return [
            sub for sub in self._subscriptions.values()
            if sub.status == SubscriptionStatus.ACTIVE and sub.end_date <= target_date
        ]
    
    async def count_subscriptions(self) -> int:
        """
        –ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤.
        
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
        """
        return len(self._subscriptions)
    
    async def count_subscriptions_by_client(self, client_id: str) -> int:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞.
        
        Args:
            client_id: ID –∫–ª–∏–µ–Ω—Ç–∞
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞
        """
        return len(self._client_index.get(client_id, []))
    
    def clear_all(self) -> int:
        """
        –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è).
        
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        """
        count = len(self._subscriptions)
        self._subscriptions.clear()
        self._client_index.clear()
        
        logger.info(f"–û—á–∏—â–µ–Ω–æ {count} –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –ø–∞–º—è—Ç–∏")
        return count
    
    def _get_subscription_price(self, subscription_type: SubscriptionType) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –ø–æ —Ç–∏–ø—É."""
        prices = {
            SubscriptionType.TRIAL: 500,
            SubscriptionType.SINGLE: 1100,
            SubscriptionType.PACKAGE_4: 3200,
            SubscriptionType.PACKAGE_8: 7000,
            SubscriptionType.PACKAGE_12: 9000,
            SubscriptionType.UNLIMITED: 10800,
        }
        return prices[subscription_type]
    
    def _get_subscription_classes(self, subscription_type: SubscriptionType) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç–∏–π –ø–æ —Ç–∏–ø—É –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞."""
        classes = {
            SubscriptionType.TRIAL: 1,
            SubscriptionType.SINGLE: 1,
            SubscriptionType.PACKAGE_4: 4,
            SubscriptionType.PACKAGE_8: 8,
            SubscriptionType.PACKAGE_12: 12,
            SubscriptionType.UNLIMITED: 999,  # –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π
        }
        return classes[subscription_type]
    
    def _calculate_end_date(self, subscription_type: SubscriptionType, start_date: date) -> date:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞."""
        if subscription_type == SubscriptionType.TRIAL:
            return start_date + timedelta(days=14)
        elif subscription_type == SubscriptionType.SINGLE:
            return start_date + timedelta(days=1)  # –†–∞–∑–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç –æ–¥–∏–Ω –¥–µ–Ω—å
        else:
            return start_date + timedelta(days=30)  # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ - 30 –¥–Ω–µ–π 