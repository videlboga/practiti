"""
üë§ Google Sheets —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∫–ª–∏–µ–Ω—Ç–æ–≤ CyberKitty Practiti

–†–µ–∞–ª–∏–∑–∞—Ü–∏—è ClientRepositoryProtocol –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets.
"""

from datetime import datetime
from typing import List, Optional, Dict, Any

from ..integrations.google_sheets import GoogleSheetsClient
from ..models.client import Client, ClientCreateData, ClientUpdateData, ClientStatus
from ..utils.logger import get_logger, log_client_action
from ..utils.exceptions import GoogleSheetsError, ClientNotFoundError
from .protocols.client_repository import ClientRepositoryProtocol

logger = get_logger(__name__)


class GoogleSheetsClientRepository(ClientRepositoryProtocol):
    """
    –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è Google Sheets.
    
    –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ª–∏—Å—Ç–∞ "Clients":
    A: ID | B: Name | C: Phone | D: Telegram_ID | E: Yoga_Experience | 
    F: Intensity_Preference | G: Time_Preference | H: Created_At | I: Status |
    J: Age | K: Injuries | L: Goals | M: How_Found_Us
    """
    
    SHEET_NAME = "Clients"
    HEADER_ROW = [
        "ID", "Name", "Phone", "Telegram_ID", "Yoga_Experience",
        "Intensity_Preference", "Time_Preference", "Created_At", "Status",
        "Age", "Injuries", "Goals", "How_Found_Us"
    ]
    
    def __init__(self, sheets_client: GoogleSheetsClient):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.
        
        Args:
            sheets_client: –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets
        """
        self.sheets_client = sheets_client
        logger.info("Initialized Google Sheets Client Repository")
    
    async def _ensure_headers(self) -> None:
        """–£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."""
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ª–∏—Å—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        await self.sheets_client.ensure_sheet_exists(self.SHEET_NAME)

        try:
            # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
            first_row = await self.sheets_client.read_range("A1:M1", self.SHEET_NAME)
            
            # –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Ö
            if not first_row or first_row[0] != self.HEADER_ROW:
                await self.sheets_client.write_range(
                    "A1:M1", 
                    [self.HEADER_ROW], 
                    self.SHEET_NAME
                )
                logger.info("Headers set for Clients sheet")
                
        except GoogleSheetsError:
            # –ï—Å–ª–∏ –ª–∏—Å—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ ‚Äì –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–ø–∏—Å–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏
            await self.sheets_client.write_range("A1:M1", [self.HEADER_ROW], self.SHEET_NAME)
            logger.info("Created Clients sheet with headers")
    
    def _client_to_row(self, client: Client) -> List[str]:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è Google Sheets.
        
        Args:
            client: –ú–æ–¥–µ–ª—å –∫–ª–∏–µ–Ω—Ç–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        """
        return [
            client.id,
            client.name,
            client.phone,
            str(client.telegram_id) if client.telegram_id is not None else "",
            "–î–∞" if client.yoga_experience else "–ù–µ—Ç",
            client.intensity_preference,
            client.time_preference,
            client.created_at.isoformat(),
            client.status.value,
            str(client.age) if client.age else "",
            client.injuries or "",
            client.goals or "",
            client.how_found_us or ""
        ]
    
    def _row_to_client(self, row: List[str]) -> Optional[Client]:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –∏–∑ Google Sheets –≤ –º–æ–¥–µ–ª—å –∫–ª–∏–µ–Ω—Ç–∞.
        
        Args:
            row: –°—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            
        Returns:
            –ú–æ–¥–µ–ª—å –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ None –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
        """
        try:
            if len(row) < 9:  # –ú–∏–Ω–∏–º—É–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
                return None
            
            return Client(
                id=row[0],
                name=row[1],
                phone=row[2],
                telegram_id=int(row[3]) if row[3] else None,
                yoga_experience=row[4].lower() in ["–¥–∞", "yes", "true", "1"],
                intensity_preference=row[5],
                time_preference=row[6],
                created_at=datetime.fromisoformat(row[7]),
                status=ClientStatus(row[8]) if row[8] else ClientStatus.ACTIVE,
                age=int(row[9]) if len(row) > 9 and row[9] else None,
                injuries=row[10] if len(row) > 10 and row[10] else None,
                goals=row[11] if len(row) > 11 and row[11] else None,
                how_found_us=row[12] if len(row) > 12 and row[12] else None
            )
            
        except (ValueError, IndexError) as e:
            logger.error(f"Error parsing client row: {e}", row=row)
            return None
    
    async def _find_client_row(self, client_id: str) -> Optional[int]:
        """
        –ù–∞–π—Ç–∏ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID.
        
        Args:
            client_id: ID –∫–ª–∏–µ–Ω—Ç–∞
            
        Returns:
            –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ (–Ω–∞—á–∏–Ω–∞—è —Å 1) –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        try:
            # –ß–∏—Ç–∞–µ–º –≤—Å–µ ID –∫–ª–∏–µ–Ω—Ç–æ–≤ (–∫–æ–ª–æ–Ω–∫–∞ A)
            ids_data = await self.sheets_client.read_range("A:A", self.SHEET_NAME)
            
            for row_num, row in enumerate(ids_data, 1):
                if row and row[0] == client_id:
                    return row_num
            
            return None
            
        except GoogleSheetsError:
            return None
    
    async def save_client(self, data: ClientCreateData) -> Client:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞."""
        await self._ensure_headers()
        
        # –°–æ–∑–¥–∞—ë–º –º–æ–¥–µ–ª—å –∫–ª–∏–µ–Ω—Ç–∞
        client = Client(**data.model_dump())
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ –∫–æ–Ω–µ—Ü —Ç–∞–±–ª–∏—Ü—ã
            row_data = self._client_to_row(client)
            await self.sheets_client.append_rows([row_data], self.SHEET_NAME)
            
            log_client_action(
                logger,
                action="created",
                client_id=client.id,
                client_phone=client.phone
            )
            
            return client
            
        except GoogleSheetsError as e:
            logger.error(f"Failed to save client: {e}")
            raise
    
    async def get_client_by_id(self, client_id: str) -> Optional[Client]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID."""
        try:
            row_num = await self._find_client_row(client_id)
            if not row_num:
                return None
            
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
            client_data = await self.sheets_client.read_range(
                f"A{row_num}:M{row_num}", 
                self.SHEET_NAME
            )
            
            if not client_data or not client_data[0]:
                return None
            
            return self._row_to_client(client_data[0])
            
        except GoogleSheetsError as e:
            logger.error(f"Failed to get client by ID {client_id}: {e}")
            return None
    
    async def get_client_by_phone(self, phone: str) -> Optional[Client]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
        try:
            # –ß–∏—Ç–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
            all_data = await self.sheets_client.read_range("A:M", self.SHEET_NAME)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            for row in all_data[1:]:
                if len(row) >= 3 and row[2] == phone:
                    return self._row_to_client(row)
            
            return None
            
        except GoogleSheetsError as e:
            logger.error(f"Failed to get client by phone {phone}: {e}")
            return None
    
    async def get_client_by_telegram_id(self, telegram_id: int) -> Optional[Client]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ Telegram ID."""
        if telegram_id is None:
            return None
        try:
            # –ß–∏—Ç–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
            all_data = await self.sheets_client.read_range("A:M", self.SHEET_NAME)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            for row in all_data[1:]:
                if len(row) >= 4 and row[3] == str(telegram_id):
                    return self._row_to_client(row)
            
            return None
            
        except GoogleSheetsError as e:
            logger.error(f"Failed to get client by telegram_id {telegram_id}: {e}")
            return None
    
    async def update_client(self, client_id: str, data: ClientUpdateData) -> Optional[Client]:
        """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞."""
        try:
            # –ù–∞—Ö–æ–¥–∏–º –∫–ª–∏–µ–Ω—Ç–∞
            existing_client = await self.get_client_by_id(client_id)
            if not existing_client:
                return None
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            update_dict = data.model_dump(exclude_unset=True)
            updated_client = existing_client.model_copy(update=update_dict)
            
            # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            row_num = await self._find_client_row(client_id)
            if not row_num:
                return None
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            row_data = self._client_to_row(updated_client)
            await self.sheets_client.write_range(
                f"A{row_num}:M{row_num}",
                [row_data],
                self.SHEET_NAME
            )
            
            log_client_action(
                logger,
                action="updated",
                client_id=client_id,
                details=update_dict
            )
            
            return updated_client
            
        except GoogleSheetsError as e:
            logger.error(f"Failed to update client {client_id}: {e}")
            return None
    
    async def delete_client(self, client_id: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞."""
        try:
            row_num = await self._find_client_row(client_id)
            if not row_num:
                return False
            
            # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É (Google Sheets API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ –Ω–∞–ø—Ä—è–º—É—é)
            await self.sheets_client.clear_range(
                f"A{row_num}:M{row_num}",
                self.SHEET_NAME
            )
            
            log_client_action(
                logger,
                action="deleted",
                client_id=client_id
            )
            
            return True
            
        except GoogleSheetsError as e:
            logger.error(f"Failed to delete client {client_id}: {e}")
            return False
    
    async def list_clients(
        self, 
        limit: Optional[int] = None, 
        offset: Optional[int] = None
    ) -> List[Client]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤."""
        try:
            # –ß–∏—Ç–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
            all_data = await self.sheets_client.read_range("A:M", self.SHEET_NAME)
            
            clients = []
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            for row in all_data[1:]:
                if row and row[0]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è
                    client = self._row_to_client(row)
                    if client:
                        clients.append(client)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º offset –∏ limit
            if offset:
                clients = clients[offset:]
            if limit:
                clients = clients[:limit]
            
            return clients
            
        except GoogleSheetsError as e:
            logger.error(f"Failed to list clients: {e}")
            return []
    
    async def search_clients(self, query: str) -> List[Client]:
        """–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É."""
        try:
            all_clients = await self.list_clients()
            query_lower = query.lower()
            
            matching_clients = []
            for client in all_clients:
                if (query_lower in client.name.lower() or 
                    query in client.phone):
                    matching_clients.append(client)
            
            return matching_clients
            
        except Exception as e:
            logger.error(f"Failed to search clients: {e}")
            return []
    
    async def count_clients(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤."""
        try:
            # –ß–∏—Ç–∞–µ–º –∫–æ–ª–æ–Ω–∫—É ID
            ids_data = await self.sheets_client.read_range("A:A", self.SHEET_NAME)
            
            # –°—á–∏—Ç–∞–µ–º –Ω–µ–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ (–∏—Å–∫–ª—é—á–∞—è –∑–∞–≥–æ–ª–æ–≤–æ–∫)
            count = 0
            for row in ids_data[1:]:
                if row and row[0]:
                    count += 1
            
            return count
            
        except GoogleSheetsError as e:
            logger.error(f"Failed to count clients: {e}")
            return 0 