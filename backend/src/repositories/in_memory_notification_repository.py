"""
üì¢ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets.
"""

from typing import List, Optional, Dict
from datetime import datetime

from ..models.notification import (
    Notification, NotificationCreateData, NotificationUpdateData, 
    NotificationStatus, NotificationType, NotificationPriority
)
from ..repositories.protocols.notification_repository import NotificationRepositoryProtocol
from ..utils.logger import get_logger

logger = get_logger(__name__)


class InMemoryNotificationRepository(NotificationRepositoryProtocol):
    """
    –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets.
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è."""
        self._notifications: Dict[str, Notification] = {}
        self._client_index: Dict[str, List[str]] = {}  # client_id -> [notification_ids]
        
        logger.info("InMemoryNotificationRepository –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def save_notification(self, data: NotificationCreateData) -> Notification:
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
        
        Args:
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            
        Returns:
            –°–æ–∑–¥–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        """
        notification = Notification(
            client_id=data.client_id,
            type=data.type,
            title=data.title,
            message=data.message,
            priority=data.priority,
            scheduled_at=data.scheduled_at,
            metadata=data.metadata,
            created_at=datetime.now()
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        self._notifications[notification.id] = notification
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –∫–ª–∏–µ–Ω—Ç–æ–≤
        if data.client_id not in self._client_index:
            self._client_index[data.client_id] = []
        self._client_index[data.client_id].append(notification.id)
        
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {notification.type.value} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ø–∞–º—è—Ç–∏ —Å ID: {notification.id}")
        return notification
    
    async def get_notification_by_id(self, notification_id: str) -> Optional[Notification]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ ID.
        
        Args:
            notification_id: ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            
        Returns:
            –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–ª–∏ None
        """
        return self._notifications.get(notification_id)
    
    async def get_notifications_by_client_id(
        self, 
        client_id: str, 
        limit: Optional[int] = None,
        offset: Optional[int] = None
    ) -> List[Notification]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞.
        
        Args:
            client_id: ID –∫–ª–∏–µ–Ω—Ç–∞
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            offset: –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞
        """
        notification_ids = self._client_index.get(client_id, [])
        notifications = [self._notifications[nid] for nid in notification_ids if nid in self._notifications]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
        notifications.sort(key=lambda x: x.created_at, reverse=True)
        
        if offset:
            notifications = notifications[offset:]
        if limit:
            notifications = notifications[:limit]
            
        return notifications
    
    async def get_notifications_by_status(self, status: NotificationStatus) -> List[Notification]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É.
        
        Args:
            status: –°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            
        Returns:
            –°–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
        """
        return [n for n in self._notifications.values() if n.status == status]
    
    async def get_notifications_by_type(self, notification_type: NotificationType) -> List[Notification]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —Ç–∏–ø—É.
        
        Args:
            notification_type: –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            
        Returns:
            –°–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        """
        return [n for n in self._notifications.values() if n.type == notification_type]
    
    async def get_scheduled_notifications(self, before_time: datetime) -> List[Notification]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
        
        Args:
            before_time: –í—Ä–µ–º—è, –¥–æ –∫–æ—Ç–æ—Ä–æ–≥–æ –∏—Å–∫–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        return [
            n for n in self._notifications.values()
            if (n.status == NotificationStatus.PENDING and 
                n.scheduled_at is not None and 
                n.scheduled_at <= before_time)
        ]
    
    async def get_failed_notifications_for_retry(self) -> List[Notification]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –Ω–µ—É–¥–∞—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏.
        
        Returns:
            –°–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
        """
        return [
            n for n in self._notifications.values()
            if (n.status == NotificationStatus.FAILED and 
                n.retry_count < n.max_retries)
        ]
    
    async def update_notification(self, notification_id: str, data: NotificationUpdateData) -> Optional[Notification]:
        """
        –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
        
        Args:
            notification_id: ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            
        Returns:
            –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–ª–∏ None
        """
        notification = self._notifications.get(notification_id)
        if not notification:
            return None
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
        if data.status is not None:
            notification.status = data.status
        if data.sent_at is not None:
            notification.sent_at = data.sent_at
        if data.delivered_at is not None:
            notification.delivered_at = data.delivered_at
        if data.telegram_message_id is not None:
            notification.telegram_message_id = data.telegram_message_id
        if data.retry_count is not None:
            notification.retry_count = data.retry_count
        
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {notification_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ –ø–∞–º—è—Ç–∏")
        return notification
    
    async def delete_notification(self, notification_id: str) -> bool:
        """
        –£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
        
        Args:
            notification_id: ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ, False –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        """
        notification = self._notifications.get(notification_id)
        if not notification:
            return False
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        del self._notifications[notification_id]
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∏–Ω–¥–µ–∫—Å–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
        if notification.client_id in self._client_index:
            if notification_id in self._client_index[notification.client_id]:
                self._client_index[notification.client_id].remove(notification_id)
        
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {notification_id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –ø–∞–º—è—Ç–∏")
        return True
    
    async def list_notifications(
        self, 
        limit: Optional[int] = None, 
        offset: Optional[int] = None
    ) -> List[Notification]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
        
        Args:
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            offset: –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        notifications = list(self._notifications.values())
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
        notifications.sort(key=lambda x: x.created_at, reverse=True)
        
        if offset:
            notifications = notifications[offset:]
        if limit:
            notifications = notifications[:limit]
            
        return notifications
    
    async def count_notifications(self) -> int:
        """
        –ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
        
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        return len(self._notifications)
    
    async def count_notifications_by_client(self, client_id: str) -> int:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞.
        
        Args:
            client_id: ID –∫–ª–∏–µ–Ω—Ç–∞
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞
        """
        return len(self._client_index.get(client_id, []))
    
    async def count_notifications_by_status(self, status: NotificationStatus) -> int:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —Å—Ç–∞—Ç—É—Å—É.
        
        Args:
            status: –°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
        """
        return len([n for n in self._notifications.values() if n.status == status])
    
    async def get_notifications_by_priority(self, priority: NotificationPriority) -> List[Notification]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É.
        
        Args:
            priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            
        Returns:
            –°–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        """
        return [n for n in self._notifications.values() if n.priority == priority]
    
    async def get_notifications_created_between(
        self, 
        start_time: datetime, 
        end_time: datetime
    ) -> List[Notification]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ.
        
        Args:
            start_time: –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞
            end_time: –ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥
        """
        return [
            n for n in self._notifications.values()
            if start_time <= n.created_at <= end_time
        ]
    
    async def cleanup_old_notifications(self, older_than: datetime) -> int:
        """
        –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
        
        Args:
            older_than: –£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ —ç—Ç–æ–π –¥–∞—Ç—ã
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        old_notifications = [
            n for n in self._notifications.values()
            if n.created_at < older_than
        ]
        
        count = 0
        for notification in old_notifications:
            if await self.delete_notification(notification.id):
                count += 1
        
        logger.info(f"–û—á–∏—â–µ–Ω–æ {count} —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –ø–∞–º—è—Ç–∏")
        return count
    
    def clear_all(self) -> int:
        """
        –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è).
        
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        """
        count = len(self._notifications)
        self._notifications.clear()
        self._client_index.clear()
        
        logger.info(f"–û—á–∏—â–µ–Ω–æ {count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –ø–∞–º—è—Ç–∏")
        return count 