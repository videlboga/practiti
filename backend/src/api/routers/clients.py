"""
üë• API —Ä–æ—É—Ç–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º–∏

CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –π–æ–≥–∞-—Å—Ç—É–¥–∏–∏.
–ü—Ä–∏–Ω—Ü–∏–ø CyberKitty: –ø—Ä–æ—Å—Ç–æ—Ç–∞ –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ.
"""

from fastapi import APIRouter, HTTPException, Depends, Query
from typing import List, Optional
import logging
import math

from ..models import (
    ClientCreateRequest, ClientUpdateRequest, ClientResponse, ClientSearchRequest,
    APIResponse, PaginationParams, PaginatedResponse, SubscriptionResponse
)
from ...services.protocols.client_service import ClientServiceProtocol
from ...models.client import ClientStatus
from ...utils.exceptions import BusinessLogicError, ValidationError
from functools import lru_cache
from ...services.client_service import ClientService
from ...config.settings import settings
from .subscriptions import _build_subscription_service
from ...services.protocols.subscription_service import SubscriptionServiceProtocol

logger = logging.getLogger(__name__)

router = APIRouter()


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è DI
def _create_repository():
    """–°–æ–∑–¥–∞—ë—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    if settings.environment == "testing":
        from ...repositories.in_memory_client_repository import InMemoryClientRepository
        return InMemoryClientRepository()
    else:
        from ...repositories.google_sheets_client_repository import GoogleSheetsClientRepository
        from ...integrations.google_sheets import GoogleSheetsClient
        return GoogleSheetsClientRepository(GoogleSheetsClient())


def _build_client_service() -> ClientServiceProtocol:
    """–§–∞–±—Ä–∏–∫–∞, —Å–æ–∑–¥–∞—é—â–∞—è singleton-—ç–∫–∑–µ–º–ø–ª—è—Ä ClientService."""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã
    return ClientService(_create_repository())


@lru_cache(maxsize=1)
def _get_cached_client_service() -> ClientServiceProtocol:
    return _build_client_service()


async def get_client_service() -> ClientServiceProtocol:
    """Dependency-provider –¥–ª—è FastAPI.

    –í production-—Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à (singleton-—Å–µ—Ä–≤–∏—Å) –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
    –í testing-—Ä–µ–∂–∏–º–µ –∫—ç—à –æ—Ç–∫–ª—é—á–∞–µ–º, —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π —Ç–µ—Å—Ç –ø–æ–ª—É—á–∞–ª "—Å–≤–µ–∂–∏–π" –∏–Ω—Å—Ç–∞–Ω—Å
    –∏ –Ω–µ –≤–æ–∑–Ω–∏–∫–∞–ª–æ –ø–æ–±–æ—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –∏–∑-–∑–∞ –æ–±—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏.
    """

    if settings.environment == "testing":  # –±–µ–∑ –∫—ç—à–∞ ‚Äì –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        return _build_client_service()

    # –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π –æ—Ç–¥–∞—ë–º singleton
    return _get_cached_client_service()


@router.get("/", response_model=PaginatedResponse)
async def get_clients(
    page: int = Query(1, ge=1, description="–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã"),
    limit: int = Query(20, ge=1, le=100, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –≤—ã–¥–∞—á–µ"),
    page_size: Optional[int] = Query(None, alias="pageSize", ge=1, le=100, description="–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∏–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ limit –∏–∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"),
    search: Optional[str] = Query(None, description="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"),
    status: Optional[str] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É"),
    client_service: ClientServiceProtocol = Depends(get_client_service)
) -> PaginatedResponse:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    
    Args:
        page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        page_size: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∏–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ limit –∏–∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        search: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        status: –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –∫–ª–∏–µ–Ω—Ç–∞
        client_service: –°–µ—Ä–≤–∏—Å –∫–ª–∏–µ–Ω—Ç–æ–≤
        
    Returns:
        –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    """
    try:
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∏–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        if page_size is not None:
            limit = page_size

        logger.info(f"–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤: page={page}, limit={limit}, status={status}, search={search}")
        
        # –ü—Ä–∏–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å –∫ Enum, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∏ –Ω–µ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        status_enum: Optional[ClientStatus] = None
        if status and str(status).strip():
            try:
                status_enum = ClientStatus(status)
            except ValueError:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å ‚Äì –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–∞: {status}")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
        if search and search.strip():
            clients = await client_service.search_clients(search.strip())
            # –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É
            if status_enum:
                clients = [c for c in clients if c.status == status_enum]
        else:
            if status_enum:
                clients = await client_service.get_clients_by_status(status_enum)
            else:
                clients = await client_service.get_all_clients()
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        total = len(clients)
        start_idx = (page - 1) * limit
        end_idx = start_idx + limit
        paginated_clients = clients[start_idx:end_idx]
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ response –º–æ–¥–µ–ª–∏
        client_responses = [
            ClientResponse.model_validate(client, from_attributes=True) for client in paginated_clients
        ]
        
        return PaginatedResponse(
            items=client_responses,
            total=total,
            page=page,
            limit=limit,
            pages=math.ceil(total / limit) if total > 0 else 1
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤")


@router.get("/{client_id}", response_model=ClientResponse)
async def get_client(
    client_id: str,
    client_service: ClientServiceProtocol = Depends(get_client_service)
) -> ClientResponse:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID.
    
    Args:
        client_id: ID –∫–ª–∏–µ–Ω—Ç–∞
        client_service: –°–µ—Ä–≤–∏—Å –∫–ª–∏–µ–Ω—Ç–æ–≤
        
    Returns:
        –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
    """
    try:
        logger.info(f"–ó–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞: {client_id}")
        
        client = await client_service.get_client(client_id)
        if not client:
            raise HTTPException(status_code=404, detail="–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return ClientResponse.model_validate(client, from_attributes=True)
        
    except BusinessLogicError as e:
        logger.warning(f"–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {client_id}")
        raise HTTPException(status_code=404, detail=str(e))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞")


@router.post("/", response_model=ClientResponse, status_code=201)
async def create_client(
    request: ClientCreateRequest,
    client_service: ClientServiceProtocol = Depends(get_client_service)
) -> ClientResponse:
    """
    –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
    
    Args:
        request: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        client_service: –°–µ—Ä–≤–∏—Å –∫–ª–∏–µ–Ω—Ç–æ–≤
        
    Returns:
        –°–æ–∑–¥–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
    """
    try:
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞: {request.name}, {request.phone}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º request –≤ –º–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∏—è
        from ...models.client import ClientCreateData
        
        create_data = ClientCreateData(
            name=request.name,
            phone=request.phone,
            telegram_id=request.telegram_id,
            yoga_experience=request.yoga_experience,
            intensity_preference=request.intensity_preference,
            time_preference=request.time_preference,
            age=request.age,
            injuries=request.injuries,
            goals=request.goals,
            how_found_us=request.how_found_us
        )
        
        client = await client_service.create_client(create_data)
        
        logger.info(f"–ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {client.id}")
        return ClientResponse.model_validate(client, from_attributes=True)
        
    except BusinessLogicError as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        raise HTTPException(status_code=400, detail=str(e))
    except ValidationError as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        raise HTTPException(status_code=422, detail=str(e))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞")


@router.put("/{client_id}", response_model=ClientResponse)
async def update_client(
    client_id: str,
    request: ClientUpdateRequest,
    client_service: ClientServiceProtocol = Depends(get_client_service)
) -> ClientResponse:
    """
    –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞.
    
    Args:
        client_id: ID –∫–ª–∏–µ–Ω—Ç–∞
        request: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        client_service: –°–µ—Ä–≤–∏—Å –∫–ª–∏–µ–Ω—Ç–æ–≤
        
    Returns:
        –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
    """
    try:
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞: {client_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
        existing_client = await client_service.get_client(client_id)
        if not existing_client:
            raise HTTPException(status_code=404, detail="–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º request –≤ –º–æ–¥–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        from ...models.client import ClientUpdateData
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Ç–æ–ª—å–∫–æ —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
        update_data_dict = {}
        for field, value in request.dict(exclude_unset=True).items():
            if value is not None:
                update_data_dict[field] = value
        
        if not update_data_dict:
            raise HTTPException(status_code=400, detail="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        
        update_data = ClientUpdateData(**update_data_dict)
        client = await client_service.update_client(client_id, update_data)
        
        logger.info(f"–ö–ª–∏–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: {client_id}")
        return ClientResponse.model_validate(client, from_attributes=True)
        
    except BusinessLogicError as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        raise HTTPException(status_code=400, detail=str(e))
    except ValidationError as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        raise HTTPException(status_code=422, detail=str(e))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞")


@router.delete("/{client_id}", response_model=APIResponse)
async def delete_client(
    client_id: str,
    client_service: ClientServiceProtocol = Depends(get_client_service)
) -> APIResponse:
    """
    –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ).
    
    Args:
        client_id: ID –∫–ª–∏–µ–Ω—Ç–∞
        client_service: –°–µ—Ä–≤–∏—Å –∫–ª–∏–µ–Ω—Ç–æ–≤
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    try:
        logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞: {client_id}")
        
        await client_service.delete_client(client_id)
        
        logger.info(f"–ö–ª–∏–µ–Ω—Ç —É–¥–∞–ª–µ–Ω: {client_id}")
        return APIResponse(
            success=True,
            message=f"–ö–ª–∏–µ–Ω—Ç {client_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
        )
        
    except BusinessLogicError as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        raise HTTPException(status_code=404, detail=str(e))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞")


@router.post("/search", response_model=PaginatedResponse)
async def search_clients(
    search_request: ClientSearchRequest,
    page: int = Query(1, ge=1, description="–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã"),
    limit: int = Query(20, ge=1, le=100, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"),
    client_service: ClientServiceProtocol = Depends(get_client_service)
) -> PaginatedResponse:
    """
    –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.
    
    Args:
        search_request: –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞
        page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        client_service: –°–µ—Ä–≤–∏—Å –∫–ª–∏–µ–Ω—Ç–æ–≤
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    """
    try:
        logger.info(f"–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤: {search_request.dict()}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        clients = await client_service.search_clients(
            query=search_request.query,
            filters={
                "status": search_request.status,
                "yoga_experience": search_request.yoga_experience,
                "intensity_preference": search_request.intensity_preference,
                "time_preference": search_request.time_preference
            }
        )
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        total = len(clients)
        start_idx = (page - 1) * limit
        end_idx = start_idx + limit
        paginated_clients = clients[start_idx:end_idx]
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ response –º–æ–¥–µ–ª–∏
        client_responses = [
            ClientResponse.model_validate(client, from_attributes=True) for client in paginated_clients
        ]
        
        return PaginatedResponse(
            items=client_responses,
            total=total,
            page=page,
            limit=limit,
            pages=math.ceil(total / limit) if total > 0 else 1
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤")


@router.patch("/{client_id}/activate", response_model=ClientResponse)
async def activate_client(
    client_id: str,
    client_service: ClientServiceProtocol = Depends(get_client_service)
) -> ClientResponse:
    """
    –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞.
    
    Args:
        client_id: ID –∫–ª–∏–µ–Ω—Ç–∞
        client_service: –°–µ—Ä–≤–∏—Å –∫–ª–∏–µ–Ω—Ç–æ–≤
        
    Returns:
        –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
    """
    try:
        logger.info(f"–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {client_id}")
        
        client = await client_service.activate_client(client_id)
        
        logger.info(f"–ö–ª–∏–µ–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {client_id}")
        return ClientResponse.model_validate(client, from_attributes=True)
        
    except BusinessLogicError as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        raise HTTPException(status_code=404, detail=str(e))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ {client_id}: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞")


@router.patch("/{client_id}/deactivate", response_model=ClientResponse)
async def deactivate_client(
    client_id: str,
    client_service: ClientServiceProtocol = Depends(get_client_service)
) -> ClientResponse:
    """
    –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞.
    
    Args:
        client_id: ID –∫–ª–∏–µ–Ω—Ç–∞
        client_service: –°–µ—Ä–≤–∏—Å –∫–ª–∏–µ–Ω—Ç–æ–≤
        
    Returns:
        –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
    """
    try:
        logger.info(f"–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {client_id}")
        
        client = await client_service.deactivate_client(client_id)
        
        logger.info(f"–ö–ª–∏–µ–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {client_id}")
        return ClientResponse.model_validate(client, from_attributes=True)
        
    except BusinessLogicError as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        raise HTTPException(status_code=404, detail=str(e))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ {client_id}: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞")


@router.get("/{client_id}/subscriptions", response_model=List[SubscriptionResponse])
async def get_client_subscriptions(
    client_id: str,
    subscription_service: SubscriptionServiceProtocol = Depends(_build_subscription_service),
):
    """–ü–æ–ª—É—á–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞."""
    try:
        subs = await subscription_service.get_client_subscriptions(client_id)
        return [SubscriptionResponse.from_orm(s) for s in subs]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞ {client_id}: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞") 