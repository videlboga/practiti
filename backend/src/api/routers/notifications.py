"""
üîî API —Ä–æ—É—Ç–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏

CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –π–æ–≥–∞-—Å—Ç—É–¥–∏–∏.
–ü—Ä–∏–Ω—Ü–∏–ø CyberKitty: –ø—Ä–æ—Å—Ç–æ—Ç–∞ –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ.
"""

from fastapi import APIRouter, HTTPException, Depends, Query
from typing import List, Optional
import logging
import math

from ..models import (
    NotificationCreateRequest, NotificationResponse, NotificationSearchRequest,
    APIResponse, PaginationParams, PaginatedResponse
)
from ...services.protocols.notification_service import NotificationServiceProtocol
from ...models.notification import NotificationStatus, NotificationType, NotificationPriority
from ...utils.exceptions import BusinessLogicError, ValidationError

logger = logging.getLogger(__name__)

router = APIRouter()


# Dependency injection –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤
async def get_notification_service() -> NotificationServiceProtocol:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±—É–¥–µ—Ç DI
    from ...repositories.in_memory_notification_repository import InMemoryNotificationRepository
    from ...repositories.in_memory_client_repository import InMemoryClientRepository
    from ...repositories.in_memory_subscription_repository import InMemorySubscriptionRepository
    from ...services.notification_service import NotificationService
    from ...services.client_service import ClientService
    from ...services.subscription_service import SubscriptionService
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    notification_repository = InMemoryNotificationRepository()
    client_repository = InMemoryClientRepository()
    subscription_repository = InMemorySubscriptionRepository()
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
    client_service = ClientService(client_repository)
    subscription_service = SubscriptionService(subscription_repository)
    
    return NotificationService(notification_repository, client_service, subscription_service)


@router.get("/", response_model=PaginatedResponse)
async def get_notifications(
    page: int = Query(1, ge=1, description="–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã"),
    limit: int = Query(20, ge=1, le=100, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"),
    status: Optional[NotificationStatus] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É"),
    notification_type: Optional[NotificationType] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É"),
    priority: Optional[NotificationPriority] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É"),
    client_id: Optional[str] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ –∫–ª–∏–µ–Ω—Ç—É"),
    notification_service: NotificationServiceProtocol = Depends(get_notification_service)
) -> PaginatedResponse:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    try:
        logger.info(f"–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: page={page}, limit={limit}, status={status}")
        
        # –ü–æ–ª—É—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        notifications = await notification_service.get_all_notifications()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        if client_id:
            notifications = [n for n in notifications if n.client_id == client_id]
        if status:
            notifications = [n for n in notifications if n.status == status]
        if notification_type:
            notifications = [n for n in notifications if n.notification_type == notification_type]
        if priority:
            notifications = [n for n in notifications if n.priority == priority]
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        total = len(notifications)
        start_idx = (page - 1) * limit
        end_idx = start_idx + limit
        paginated_notifications = notifications[start_idx:end_idx]
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ response –º–æ–¥–µ–ª–∏
        notification_responses = [
            NotificationResponse.from_orm(notification) for notification in paginated_notifications
        ]
        
        return PaginatedResponse(
            items=notification_responses,
            total=total,
            page=page,
            limit=limit,
            pages=math.ceil(total / limit) if total > 0 else 1
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")


@router.get("/{notification_id}", response_model=NotificationResponse)
async def get_notification(
    notification_id: str,
    notification_service: NotificationServiceProtocol = Depends(get_notification_service)
) -> NotificationResponse:
    """–ü–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ ID."""
    try:
        logger.info(f"–ó–∞–ø—Ä–æ—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notification_id}")
        
        notification = await notification_service.get_notification(notification_id)
        if not notification:
            raise HTTPException(status_code=404, detail="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        return NotificationResponse.from_orm(notification)
        
    except BusinessLogicError as e:
        logger.warning(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {notification_id}")
        raise HTTPException(status_code=404, detail=str(e))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {notification_id}: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")


@router.post("/", response_model=NotificationResponse, status_code=201)
async def create_notification(
    request: NotificationCreateRequest,
    notification_service: NotificationServiceProtocol = Depends(get_notification_service)
) -> NotificationResponse:
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."""
    try:
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –∫–ª–∏–µ–Ω—Ç={request.client_id}, —Ç–∏–ø={request.notification_type}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º request –≤ –º–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∏—è
        from ...models.notification import NotificationCreateData
        
        create_data = NotificationCreateData(
            client_id=request.client_id,
            notification_type=request.notification_type,
            title=request.title,
            message=request.message,
            priority=request.priority,
            scheduled_at=request.scheduled_at,
            metadata=request.metadata
        )
        
        notification = await notification_service.create_notification(create_data)
        
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {notification.id}")
        return NotificationResponse.from_orm(notification)
        
    except BusinessLogicError as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        raise HTTPException(status_code=400, detail=str(e))
    except ValidationError as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        raise HTTPException(status_code=422, detail=str(e))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")


@router.post("/{notification_id}/send", response_model=NotificationResponse)
async def send_notification(
    notification_id: str,
    notification_service: NotificationServiceProtocol = Depends(get_notification_service)
) -> NotificationResponse:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ."""
    try:
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notification_id}")
        
        notification = await notification_service.send_notification(notification_id)
        
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {notification_id}")
        return NotificationResponse.from_orm(notification)
        
    except BusinessLogicError as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        raise HTTPException(status_code=400, detail=str(e))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {notification_id}: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")


@router.delete("/{notification_id}", response_model=APIResponse)
async def delete_notification(
    notification_id: str,
    notification_service: NotificationServiceProtocol = Depends(get_notification_service)
) -> APIResponse:
    """–£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."""
    try:
        logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notification_id}")
        
        await notification_service.delete_notification(notification_id)
        
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ: {notification_id}")
        return APIResponse(
            success=True,
            message=f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {notification_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ"
        )
        
    except BusinessLogicError as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        raise HTTPException(status_code=404, detail=str(e))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {notification_id}: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
