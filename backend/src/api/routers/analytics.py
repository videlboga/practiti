"""
üìä API —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏

–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –π–æ–≥–∞-—Å—Ç—É–¥–∏–∏.
–ü—Ä–∏–Ω—Ü–∏–ø CyberKitty: –ø—Ä–æ—Å—Ç–æ—Ç–∞ –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ.
"""

from fastapi import APIRouter, HTTPException, Depends, Query
from typing import Dict, Any
import logging
from datetime import datetime, timedelta
import sys

from ..models import (
    AnalyticsResponse, ClientStatsResponse, SubscriptionStatsResponse,
    NotificationStatsResponse, DashboardMetricsResponse
)
from ...services.protocols.client_service import ClientServiceProtocol
from ...services.protocols.subscription_service import SubscriptionServiceProtocol
from ...services.protocols.notification_service import NotificationServiceProtocol
from ...models.client import ClientStatus
from ...models.subscription import SubscriptionStatus, SubscriptionType
from ...models.notification import NotificationStatus, NotificationType
from ...utils.exceptions import BusinessLogicError
from ...config.settings import settings
from ...services.protocols.booking_service import BookingServiceProtocol

logger = logging.getLogger(__name__)

router = APIRouter()


# --- –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π DI –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–µ—Å—Ç–∞–º–∏ ---

# –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤—É REST-—ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω—É–∂–Ω—ã —Ç—Ä–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞. –í —é–Ω–∏—Ç-—Ç–µ—Å—Ç–∞—Ö —ç—Ç–∏
# –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–æ–¥–º–µ–Ω—è—é—Ç—Å—è –Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –º–æ–∫–∏ —á–µ—Ä–µ–∑ `dependency_overrides`, –∫–æ—Ç–æ—Ä—ã–µ
# —Å—Å—ã–ª–∞—é—Ç—Å—è –∏–º–µ–Ω–Ω–æ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏ `get_client_service`, `get_subscription_service`,
# `get_notification_service` (—Å–º. backend/tests/test_api.py). –ü–æ—ç—Ç–æ–º—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π
# —Ä–∞–±–æ—Ç—ã —Ç–µ—Å—Ç–æ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–±—ã —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ
# —Å–µ—Ä–≤–∏—Å—ã –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é. –û—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Å–µ—Ä–≤–∏—Å `AnalyticsService` —Å–µ–π—á–∞—Å –Ω–µ
# –∑–∞–¥–µ–π—Å—Ç–≤—É–µ—Ç—Å—è, –∞ –µ–≥–æ –∏–º–ø–æ—Ä—Ç –ª–æ–º–∞–µ—Ç –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤. –í–º–µ—Å—Ç–æ –Ω–µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–∏–∂–µ.

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–±—Ä–∏–∫–∏ ---

def _build_client_service() -> ClientServiceProtocol:
    """–§–∞–±—Ä–∏–∫–∞ ClientService –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è."""

    from ...services.client_service import ClientService

    if "pytest" in sys.modules:
        from ...repositories.in_memory_client_repository import InMemoryClientRepository
        repo = InMemoryClientRepository()
    else:
        try:
            from ...repositories.google_sheets_client_repository import GoogleSheetsClientRepository
            from ...integrations.google_sheets import GoogleSheetsClient
            repo = GoogleSheetsClientRepository(GoogleSheetsClient())
        except Exception as e:
            logger.error(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å GoogleSheetsClientRepository: {e}. –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ InMemory.",
            )
            from ...repositories.in_memory_client_repository import InMemoryClientRepository  # noqa: WPS433
            repo = InMemoryClientRepository()

    return ClientService(repo)


def _build_subscription_service() -> SubscriptionServiceProtocol:
    """–§–∞–±—Ä–∏–∫–∞ SubscriptionService ‚Äì Google Sheets –≤ –ø—Ä–æ–¥–µ, In-Memory –≤ —Ç–µ—Å—Ç–∞—Ö."""

    from ...services.subscription_service import SubscriptionService

    if "pytest" in sys.modules:
        from ...repositories.in_memory_subscription_repository import InMemorySubscriptionRepository
        repo = InMemorySubscriptionRepository()
    else:
        try:
            from ...repositories.google_sheets_subscription_repository import GoogleSheetsSubscriptionRepository
            from ...integrations.google_sheets import GoogleSheetsClient
            repo = GoogleSheetsSubscriptionRepository(GoogleSheetsClient())
        except Exception as e:
            logger.error(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å GoogleSheetsSubscriptionRepository: {e}. –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ InMemory.",
            )
            from ...repositories.in_memory_subscription_repository import InMemorySubscriptionRepository  # noqa: WPS433
            repo = InMemorySubscriptionRepository()

    return SubscriptionService(repo)


def _build_notification_service() -> NotificationServiceProtocol:
    from ...services.notification_service import NotificationService
    from ...services.telegram_sender_service import TelegramSenderService

    # pytest ‚Üí in-memory, –∏–Ω–∞—á–µ Google Sheets
    if "pytest" in sys.modules:
        from ...repositories.in_memory_notification_repository import InMemoryNotificationRepository
        notif_repo = InMemoryNotificationRepository()
    else:
        from ...repositories.google_sheets_notification_repository import GoogleSheetsNotificationRepository
        from ...integrations.google_sheets import GoogleSheetsClient
        notif_repo = GoogleSheetsNotificationRepository(GoogleSheetsClient())

    client_service = _build_client_service()
    subscription_service = _build_subscription_service()
    telegram_sender = TelegramSenderService()
    return NotificationService(notif_repo, client_service, subscription_service, telegram_sender)


# ---------------------- Booking Service ----------------------

def _build_booking_service() -> BookingServiceProtocol:
    """–§–∞–±—Ä–∏–∫–∞ BookingService (Google Sheets / In-Memory)."""

    from ...services.booking_service import BookingService

    if "pytest" in sys.modules:
        from ...repositories.in_memory_booking_repository import InMemoryBookingRepository
        repo = InMemoryBookingRepository()
    else:
        try:
            from ...repositories.google_sheets_booking_repository import GoogleSheetsBookingRepository
            from ...integrations.google_sheets import GoogleSheetsClient
            repo = GoogleSheetsBookingRepository(GoogleSheetsClient())
        except Exception as e:
            logger.error(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å GoogleSheetsBookingRepository: {e}. –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ InMemory.",
            )
            from ...repositories.in_memory_booking_repository import InMemoryBookingRepository  # noqa: WPS433
            repo = InMemoryBookingRepository()

    # BookingService —Ç—Ä–µ–±—É–µ—Ç client_service –∏ subscription_service
    client_srv = _build_client_service()
    sub_srv = _build_subscription_service()
    return BookingService(repo, client_srv, sub_srv)


# DI wrapper

def get_booking_service() -> BookingServiceProtocol:  # type: ignore[override]
    return _build_booking_service()


# --- –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ª–µ–≥–∫–æ –º–æ–∫–∏—Ä—É—é—Ç—Å—è –≤ —Ç–µ—Å—Ç–∞—Ö ---

def get_client_service() -> ClientServiceProtocol:  # type: ignore[override]
    return _build_client_service()


def get_subscription_service() -> SubscriptionServiceProtocol:  # type: ignore[override]
    return _build_subscription_service()


def get_notification_service() -> NotificationServiceProtocol:  # type: ignore[override]
    return _build_notification_service()


# ---------- ENDPOINTS ----------


@router.get("/overview", response_model=AnalyticsResponse)
async def get_overview_analytics(
    period: str = Query("month", description="–ü–µ—Ä–∏–æ–¥: day, week, month, year"),
    client_service: ClientServiceProtocol = Depends(get_client_service),
    subscription_service: SubscriptionServiceProtocol = Depends(get_subscription_service),
    notification_service: NotificationServiceProtocol = Depends(get_notification_service)
) -> AnalyticsResponse:
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Å—Ç—É–¥–∏–∏."""
    try:
        logger.info(f"–ó–∞–ø—Ä–æ—Å –æ–±—â–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥: {period}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        clients = await client_service.get_all_clients()
        subscriptions = await subscription_service.get_all_subscriptions()
        notifications = await notification_service.get_all_notifications()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
        now = datetime.now()
        if period == "day":
            start_date = now - timedelta(days=1)
        elif period == "week":
            start_date = now - timedelta(weeks=1)
        elif period == "month":
            start_date = now - timedelta(days=30)
        elif period == "year":
            start_date = now - timedelta(days=365)
        else:
            start_date = now - timedelta(days=30)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –º–µ—Å—è—Ü
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–µ—Ä–∏–æ–¥—É
        period_clients = [c for c in clients if c.created_at >= start_date]
        period_subscriptions = [s for s in subscriptions if s.created_at >= start_date]
        period_notifications = [n for n in notifications if n.created_at >= start_date]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        overview_data = {
            "total_clients": len(clients),
            "new_clients": len(period_clients),
            "active_clients": len([c for c in clients if c.status == ClientStatus.ACTIVE]),
            
            "total_subscriptions": len(subscriptions),
            "new_subscriptions": len(period_subscriptions),
            "active_subscriptions": len([s for s in subscriptions if s.status == SubscriptionStatus.ACTIVE]),
            
            "total_revenue": sum(s.price for s in subscriptions),
            "period_revenue": sum(s.price for s in period_subscriptions),
            
            "total_notifications": len(notifications),
            "period_notifications": len(period_notifications),
            "delivered_notifications": len([n for n in notifications if n.status == NotificationStatus.DELIVERED]),
            
            "period_start": start_date.isoformat(),
            "period_end": now.isoformat()
        }
        
        return AnalyticsResponse(
            period=period,
            data=overview_data,
            generated_at=now
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")


@router.get("/clients", response_model=ClientStatsResponse)
async def get_client_analytics(
    client_service: ClientServiceProtocol = Depends(get_client_service)
) -> ClientStatsResponse:
    """–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º."""
    try:
        logger.info("–ó–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º")
        
        clients = await client_service.get_all_clients()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_clients = len(clients)
        active_clients = len([c for c in clients if c.status == ClientStatus.ACTIVE])
        
        # –ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –∑–∞ –º–µ—Å—è—Ü
        month_ago = datetime.now() - timedelta(days=30)
        new_clients_this_month = len([c for c in clients if c.created_at >= month_ago])
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –æ–ø—ã—Ç—É
        clients_by_experience = {}
        for client in clients:
            exp = "experienced" if client.yoga_experience else "beginner"
            clients_by_experience[exp] = clients_by_experience.get(exp, 0) + 1
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É
        clients_by_status = {}
        for client in clients:
            status = client.status.value
            clients_by_status[status] = clients_by_status.get(status, 0) + 1
        
        return ClientStatsResponse(
            total_clients=total_clients,
            active_clients=active_clients,
            new_clients_this_month=new_clients_this_month,
            clients_by_experience=clients_by_experience,
            clients_by_status=clients_by_status
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤")


@router.get("/subscriptions", response_model=SubscriptionStatsResponse)
async def get_subscription_analytics(
    subscription_service: SubscriptionServiceProtocol = Depends(get_subscription_service)
) -> SubscriptionStatsResponse:
    """–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞–º."""
    try:
        logger.info("–ó–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞–º")
        
        subscriptions = await subscription_service.get_all_subscriptions()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_subscriptions = len(subscriptions)
        active_subscriptions = len([s for s in subscriptions if s.status == SubscriptionStatus.ACTIVE])
        
        # –î–æ—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü
        month_ago = datetime.now() - timedelta(days=30)
        revenue_this_month = sum(
            s.price for s in subscriptions 
            if s.created_at >= month_ago
        )
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø—É
        subscriptions_by_type = {}
        for subscription in subscriptions:
            sub_type = subscription.type.value
            subscriptions_by_type[sub_type] = subscriptions_by_type.get(sub_type, 0) + 1
        
        # –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
        average_subscription_value = (
            sum(s.price for s in subscriptions) / total_subscriptions
            if total_subscriptions > 0 else 0
        )
        
        return SubscriptionStatsResponse(
            total_subscriptions=total_subscriptions,
            active_subscriptions=active_subscriptions,
            revenue_this_month=revenue_this_month,
            subscriptions_by_type=subscriptions_by_type,
            average_subscription_value=average_subscription_value
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤")


@router.get("/notifications", response_model=NotificationStatsResponse)
async def get_notification_analytics(
    notification_service: NotificationServiceProtocol = Depends(get_notification_service)
) -> NotificationStatsResponse:
    """–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º."""
    try:
        logger.info("–ó–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º")
        
        notifications = await notification_service.get_all_notifications()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_notifications = len(notifications)
        sent_notifications = len([n for n in notifications if n.status == NotificationStatus.SENT])
        delivered_notifications = len([n for n in notifications if n.status == NotificationStatus.DELIVERED])
        failed_notifications = len([n for n in notifications if n.status == NotificationStatus.FAILED])
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏
        delivery_rate = (
            (delivered_notifications / sent_notifications * 100)
            if sent_notifications > 0 else 0
        )
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø—É
        notifications_by_type = {}
        for notification in notifications:
            notif_type = notification.notification_type.value
            notifications_by_type[notif_type] = notifications_by_type.get(notif_type, 0) + 1
        
        return NotificationStatsResponse(
            total_notifications=total_notifications,
            sent_notifications=sent_notifications,
            delivered_notifications=delivered_notifications,
            failed_notifications=failed_notifications,
            delivery_rate=delivery_rate,
            notifications_by_type=notifications_by_type
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")


@router.get("/revenue", response_model=AnalyticsResponse)
async def get_revenue_analytics(
    period: str = Query("month", description="–ü–µ—Ä–∏–æ–¥: day, week, month, year"),
    subscription_service: SubscriptionServiceProtocol = Depends(get_subscription_service)
) -> AnalyticsResponse:
    """–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –¥–æ—Ö–æ–¥–æ–≤."""
    try:
        logger.info(f"–ó–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–æ—Ö–æ–¥–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥: {period}")
        
        subscriptions = await subscription_service.get_all_subscriptions()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
        now = datetime.now()
        if period == "day":
            start_date = now - timedelta(days=1)
        elif period == "week":
            start_date = now - timedelta(weeks=1)
        elif period == "month":
            start_date = now - timedelta(days=30)
        elif period == "year":
            start_date = now - timedelta(days=365)
        else:
            start_date = now - timedelta(days=30)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–µ—Ä–∏–æ–¥—É
        period_subscriptions = [s for s in subscriptions if s.created_at >= start_date]
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–æ—Ö–æ–¥—ã –ø–æ –¥–Ω—è–º
        daily_revenue = {}
        for subscription in period_subscriptions:
            date_key = subscription.created_at.date().isoformat()
            daily_revenue[date_key] = daily_revenue.get(date_key, 0) + subscription.price
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
        revenue_by_type = {}
        for subscription in period_subscriptions:
            sub_type = subscription.type.value
            revenue_by_type[sub_type] = revenue_by_type.get(sub_type, 0) + subscription.price
        
        revenue_data = {
            "total_revenue": sum(s.price for s in subscriptions),
            "period_revenue": sum(s.price for s in period_subscriptions),
            "daily_revenue": daily_revenue,
            "revenue_by_type": revenue_by_type,
            "average_daily_revenue": (
                sum(daily_revenue.values()) / len(daily_revenue)
                if daily_revenue else 0
            ),
            "period_start": start_date.isoformat(),
            "period_end": now.isoformat()
        }
        
        return AnalyticsResponse(
            period=period,
            data=revenue_data,
            generated_at=now
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–æ—Ö–æ–¥–æ–≤: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–æ—Ö–æ–¥–æ–≤")


# --------------------------------------------------------------
#  Alias for dashboard (frontend expects /dashboard/metrics)
# --------------------------------------------------------------


@router.get("/dashboard/metrics", response_model=DashboardMetricsResponse)
async def get_dashboard_metrics(  # noqa: D401
    period: str = Query("month", description="–ü–µ—Ä–∏–æ–¥: day, week, month, year"),
    client_service: ClientServiceProtocol = Depends(get_client_service),
    subscription_service: SubscriptionServiceProtocol = Depends(get_subscription_service),
    booking_service: BookingServiceProtocol = Depends(get_booking_service),
) -> DashboardMetricsResponse:
    """–ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞ (–ø–ª–æ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)."""

    try:
        # –ö–ª–∏–µ–Ω—Ç—ã
        try:
            clients = await client_service.get_all_clients()
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –º–µ—Ç—Ä–∏–∫: {e}")
            clients = []

        total_clients = len(clients)
        active_clients = len([c for c in clients if c.status == ClientStatus.ACTIVE])

        # –ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã
        try:
            subscriptions = await subscription_service.get_all_subscriptions()
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –º–µ—Ç—Ä–∏–∫: {e}")
            subscriptions = []

        total_subs = len(subscriptions)
        active_subs = len([s for s in subscriptions if s.status == SubscriptionStatus.ACTIVE])

        # –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        try:
            bookings = await booking_service.list_bookings()
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –º–µ—Ç—Ä–∏–∫: {e}")
            bookings = []

        total_bookings = len(bookings)

        now = datetime.utcnow()
        month_ago = now - timedelta(days=30)
        bookings_this_month = len([b for b in bookings if b.class_date >= month_ago])

        return DashboardMetricsResponse(
            totalClients=total_clients,
            activeClients=active_clients,
            totalSubscriptions=total_subs,
            activeSubscriptions=active_subs,
            totalBookings=total_bookings,
            bookingsThisMonth=bookings_this_month,
            generatedAt=now,
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –¥–∞—à–±–æ—Ä–¥–∞: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫")
