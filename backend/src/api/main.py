"""
üöÄ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ Practiti

REST API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –π–æ–≥–∞-—Å—Ç—É–¥–∏–µ–π.
–ü—Ä–∏–Ω—Ü–∏–ø CyberKitty: –ø—Ä–æ—Å—Ç–æ—Ç–∞ –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ.
"""

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
import logging
from typing import Dict, Any

from ..config.settings import settings

logger = logging.getLogger(__name__)


def create_app() -> FastAPI:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.
    
    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    """
    app = FastAPI(
        title="Practiti Admin API",
        description="REST API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –π–æ–≥–∞-—Å—Ç—É–¥–∏–µ–π Practiti",
        version="1.0.0",
        docs_url="/docs" if settings.debug else None,
        redoc_url="/redoc" if settings.debug else None,
    )
    
    # CORS middleware –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    app.add_middleware(
        CORSMiddleware,
        allow_origins=[
            "http://localhost:3000",
            "http://127.0.0.1:3000",
            "http://localhost:5173",
            "http://localhost:5174",
            "http://localhost:5175",
            "http://localhost:5176",
        ],  # React / Vite dev server (–ø–æ—Ä—Ç –º–æ–∂–µ—Ç —Å–¥–≤–∏–≥–∞—Ç—å—Å—è)
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )
    
    # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    @app.exception_handler(Exception)
    async def global_exception_handler(request, exc: Exception) -> JSONResponse:
        """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫."""
        logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {exc}", exc_info=True)
        
        return JSONResponse(
            status_code=500,
            content={
                "error": "internal_server_error",
                "message": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
                "detail": str(exc) if settings.debug else None
            }
        )
    
    # Health check endpoint
    @app.get("/health")
    async def health_check() -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API."""
        return {
            "status": "healthy",
            "service": "practiti-admin-api",
            "version": "1.0.0"
        }
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
    from .routers import clients, subscriptions, notifications, analytics, bookings
    
    app.include_router(clients.router, prefix="/api/v1/clients", tags=["clients"])
    app.include_router(subscriptions.router, prefix="/api/v1/subscriptions", tags=["subscriptions"])
    app.include_router(notifications.router, prefix="/api/v1/notifications", tags=["notifications"])
    app.include_router(analytics.router, prefix="/api/v1/analytics", tags=["analytics"])
    app.include_router(bookings.router, prefix="/api/v1", tags=["bookings"])
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∞–ª–∏–∞—Å—ã –±–µ–∑ –≤–µ—Ä—Å–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
    app.include_router(clients.router, prefix="/api/clients", tags=["clients-alias"])
    app.include_router(subscriptions.router, prefix="/api/subscriptions", tags=["subscriptions-alias"])
    app.include_router(notifications.router, prefix="/api/notifications", tags=["notifications-alias"])
    app.include_router(analytics.router, prefix="/api/analytics", tags=["analytics-alias"])
    app.include_router(bookings.router, prefix="/api", tags=["bookings-alias"])
    
    # -----------------------------
    #  –ê–ª–∏–∞—Å –¥–ª—è –º–µ—Ç—Ä–∏–∫ –¥–∞—à–±–æ—Ä–¥–∞
    # -----------------------------

    from .routers.analytics import get_dashboard_metrics as _dashboard_metrics_handler

    # –§—Ä–æ–Ω—Ç–µ–Ω–¥ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ /api/dashboard/metrics, –ø–æ—ç—Ç–æ–º—É –¥–æ–±–∞–≤–ª—è–µ–º —Ä—É—á–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç
    app.add_api_route(
        path="/api/dashboard/metrics",
        endpoint=_dashboard_metrics_handler,
        methods=["GET"],
        tags=["analytics-alias"],
        name="dashboard-metrics-alias",
    )
    
    logger.info("FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
    return app


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = create_app()


if __name__ == "__main__":
    import uvicorn
    
    uvicorn.run(
        "backend.src.api.main:app",
        host=settings.api_host,
        port=settings.api_port,
        reload=settings.debug,
        log_level=settings.log_level.lower(),
    ) 