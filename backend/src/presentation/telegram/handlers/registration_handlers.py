"""
üìù –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ CyberKitty Practiti

Handlers –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
"""

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, ConversationHandler

from .base_handler import BaseHandler
from ....models.registration import RegistrationState, REGISTRATION_STEPS
from ....services.registration_service import RegistrationService
from ....utils.logger import get_logger
from ....utils.exceptions import ValidationError, BusinessLogicError
from .. import templates as tpl

logger = get_logger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
REGISTRATION_START, REGISTRATION_INPUT, REGISTRATION_CONFIRM = range(3)


class RegistrationHandlers(BaseHandler):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—à–∞–≥–æ–≤—ã–º –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —á–µ—Ä–µ–∑ State Machine.
    """
    
    def __init__(self, registration_service: RegistrationService):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
        
        Args:
            registration_service: –°–µ—Ä–≤–∏—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        """
        super().__init__(registration_service.client_service)
        self.registration_service = registration_service
        
        logger.info("RegistrationHandlers –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def handle(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞.
        
        –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–∞—Ö.
        """
        pass
    
    async def start_registration(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """
        –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
        """
        user_id, username, first_name = await self.get_user_info(update)
        
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ start_registration –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {first_name or 'Unknown'} (@{username}, ID: {user_id})")
        
        try:
            # –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            registration = self.registration_service.start_registration(user_id, username)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            welcome_message = tpl.registration_welcome()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if update.callback_query:
                # –ï—Å–ª–∏ —ç—Ç–æ callback_query, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await update.callback_query.message.reply_text(welcome_message)
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–µ—Ä–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É
                await self._send_current_question_for_callback(update.callback_query.message, context, registration.current_state)
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await update.message.reply_text(welcome_message)
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–µ—Ä–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É
                await self._send_current_question(update, context, registration.current_state)
            
            return REGISTRATION_INPUT
            
        except Exception as e:
            await self.handle_error(update, context, e)
            return ConversationHandler.END
    
    async def process_registration_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
        """
        user_id, username, first_name = await self.get_user_info(update)
        user_input = update.message.text
        
        logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{user_input}'")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
            if not self.registration_service.is_registration_active(user_id):
                await update.message.reply_text(tpl.registration_not_found())
                return ConversationHandler.END
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            if user_input.lower() == '/cancel':
                await self._cancel_registration(update, context, user_id)
                return ConversationHandler.END
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥
            registration, step_completed = self.registration_service.process_input(user_id, user_input)
            
            if step_completed:
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
                if registration.current_state == RegistrationState.CONFIRMATION:
                    await self._show_confirmation(update, context, registration)
                    return REGISTRATION_CONFIRM
                else:
                    await self._send_current_question(update, context, registration.current_state)
                    return REGISTRATION_INPUT
            
            return REGISTRATION_INPUT
            
        except ValidationError as e:
            # –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ - –≤—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π
            try:
                # –ë–µ—Ä—ë–º —Ç–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–∏ Pydantic
                first_err = e.errors()[0]
                details = first_err.get("msg", "–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
            except Exception:
                details = "–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"

            friendly_error = tpl.registration_validation_error(details)
            await update.message.reply_text(friendly_error)
            return REGISTRATION_INPUT
            
        except BusinessLogicError as e:
            # –û—à–∏–±–∫–∞ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
            await update.message.reply_text(f"‚ùå {str(e)}")
            return ConversationHandler.END
            
        except Exception as e:
            await self.handle_error(update, context, e)
            return ConversationHandler.END
    
    async def confirm_registration(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """
        –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.
        """
        user_id, username, first_name = await self.get_user_info(update)
        
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ confirm_registration –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {first_name or 'Unknown'} (@{username}, ID: {user_id})")
        
        try:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            success = await self.registration_service.complete_registration(user_id)
            
            if success:
                success_message = tpl.registration_success()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ callback_query –∏–ª–∏ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if update.callback_query:
                    await update.callback_query.edit_message_text(success_message)
                else:
                    await update.message.reply_text(success_message)
                return ConversationHandler.END
            else:
                if update.callback_query:
                    await update.callback_query.edit_message_text(tpl.generic_error())
                else:
                    await update.message.reply_text(tpl.generic_error())
                return REGISTRATION_CONFIRM
                
        except Exception as e:
            await self.handle_error(update, context, e)
            return ConversationHandler.END
    
    async def _send_current_question(self, update: Update, context: ContextTypes.DEFAULT_TYPE, state: RegistrationState) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        
        Args:
            update: Telegram Update
            context: Telegram Context
            state: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        """
        if state not in REGISTRATION_STEPS:
            await update.message.reply_text(tpl.registration_process_error())
            return
        
        step = REGISTRATION_STEPS[state]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"{step.question}\n\n"
        if step.help_text:
            message += f"üí° {step.help_text}"
        
        reply_markup = tpl.options_keyboard(step.options) if step.options else None
        
        await update.message.reply_text(message, reply_markup=reply_markup)
    
    async def _show_confirmation(self, update: Update, context: ContextTypes.DEFAULT_TYPE, registration) -> None:
        """
        –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
        
        Args:
            update: Telegram Update
            context: Telegram Context
            registration: –î–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        """
        summary = registration.get_summary()
        
        confirmation_message = tpl.registration_confirmation(summary)
        
        await update.message.reply_text(
            confirmation_message,
            reply_markup=tpl.registration_confirmation_keyboard(),
        )
    
    async def _cancel_registration(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int) -> None:
        """
        –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.
        
        Args:
            update: Telegram Update
            context: Telegram Context
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        self.registration_service.cancel_registration(user_id)
        
        cancel_message = tpl.registration_cancelled()
        
        await update.message.reply_text(cancel_message)
    
    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏.
        
        Args:
            update: Telegram Update
            context: Telegram Context
            
        Returns:
            –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ConversationHandler
        """
        query = update.callback_query
        await query.answer()
        
        user_id, username, first_name = await self.get_user_info(update)
        
        callback_data = query.data
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            if callback_data == "confirm_yes":
                return await self.confirm_registration(update, context)
            elif callback_data == "confirm_edit":
                # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
                self.registration_service.cancel_registration(user_id)
                await query.edit_message_text(tpl.registration_restart())
                return await self.start_registration(update, context)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –æ–ø—Ü–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            elif callback_data.startswith("reg_"):
                selected_option = callback_data[4:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "reg_"
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –≤–≤–æ–¥
                registration, step_completed = self.registration_service.process_input(user_id, selected_option)
                
                if step_completed:
                    if registration.current_state == RegistrationState.CONFIRMATION:
                        await self._show_confirmation_callback(query, registration)
                        return REGISTRATION_CONFIRM
                    else:
                        await self._send_current_question_callback(query, registration.current_state)
                        return REGISTRATION_INPUT
                
                return REGISTRATION_INPUT
                
        except ValidationError as e:
            await query.edit_message_text(tpl.registration_validation_error(str(e)))
            return REGISTRATION_INPUT
            
        except Exception as e:
            await self.handle_error(update, context, e)
            return ConversationHandler.END
        
        return REGISTRATION_INPUT
    
    async def _send_current_question_callback(self, query, state: RegistrationState) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ callback query.
        """
        if state not in REGISTRATION_STEPS:
            await query.edit_message_text(tpl.registration_process_error())
            return
        
        step = REGISTRATION_STEPS[state]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"{step.question}\n\n"
        if step.help_text:
            message += f"üí° {step.help_text}"
        
        reply_markup = tpl.options_keyboard(step.options) if step.options else None
        
        await query.edit_message_text(message, reply_markup=reply_markup)
    
    async def _show_confirmation_callback(self, query, registration) -> None:
        """
        –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ callback query.
        """
        summary = registration.get_summary()
        
        confirmation_message = tpl.registration_confirmation(summary)
        
        await query.edit_message_text(
            confirmation_message,
            reply_markup=tpl.registration_confirmation_keyboard(),
        )
    
    async def _send_current_question_for_callback(self, message, context: ContextTypes.DEFAULT_TYPE, state: RegistrationState) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–ª—è callback).
        """
        if state not in REGISTRATION_STEPS:
            await message.reply_text(tpl.registration_process_error())
            return
        
        step = REGISTRATION_STEPS[state]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = f"{step.question}\n\n"
        if step.help_text:
            message_text += f"üí° {step.help_text}"
        
        reply_markup = tpl.options_keyboard(step.options) if step.options else None
        
        await message.reply_text(message_text, reply_markup=reply_markup) 