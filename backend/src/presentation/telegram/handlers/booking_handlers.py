"""
üìÖ Booking Handlers for Telegram Bot ‚Äì Practiti

–ü–æ–∑–≤–æ–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏—è –∫–æ–º–∞–Ω–¥–æ–π /book.
–ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è: –±–æ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞—Ç—É, –≤—Ä–µ–º—è –∏ —Ç–∏–ø –∑–∞–Ω—è—Ç–∏—è –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π,
–ø–æ—Å–ª–µ —á–µ–≥–æ —Å–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ BookingService –∏ —Å–æ–æ–±—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: YYYY-MM-DD HH:MM <—Ç–∏–ø>
–ü—Ä–∏–º–µ—Ä: 2025-07-01 19:00 —Ö–∞—Ç—Ö–∞

TODO: —Ä–∞—Å—à–∏—Ä–∏—Ç—å –Ω–∞ –≤—ã–±–æ—Ä –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, inline-–∫–Ω–æ–ø–∫–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
"""

from __future__ import annotations

import logging
from datetime import datetime

from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler, filters, MessageHandler, CommandHandler

from .base_handler import BaseHandler
from ....services.protocols.booking_service import BookingServiceProtocol
from ....services.protocols.client_service import ClientServiceProtocol
from ....models.booking import BookingCreateData
from ....utils.exceptions import BusinessLogicError

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler
BOOKING_INPUT = 1


class BookingHandlers(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã /book –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —à–∞–≥–æ–≤."""

    def __init__(self, booking_service: BookingServiceProtocol, client_service: ClientServiceProtocol):
        super().__init__(client_service)
        self.booking_service = booking_service
        logger.info("BookingHandlers –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    # ---------------------------------------------------------------------
    #   /book ‚Äì –Ω–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞
    # ---------------------------------------------------------------------

    async def book_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:  # type: ignore[override]
        """–°—Ç–∞—Ä—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ /book.

        1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
        2. –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É, –≤—Ä–µ–º—è –∏ —Ç–∏–ø –∑–∞–Ω—è—Ç–∏—è –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π.
        """
        await self.log_command(update, "book")

        try:
            user_id, username, first_name = await self.get_user_info(update)
            client = await self.client_service.get_client_by_telegram_id(user_id)

            if not client:
                msg = (
                    "üìù –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ —Å—Ç—É–¥–∏–∏.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register, —ç—Ç–æ –∑–∞–π–º—ë—Ç –ø–∞—Ä—É –º–∏–Ω—É—Ç."
                )
                if update.effective_chat:
                    await update.effective_chat.send_message(msg)
                return ConversationHandler.END

            prompt = (
                "üìÖ –í–≤–µ–¥–∏—Ç–µ *–¥–∞—Ç—É*, *–≤—Ä–µ–º—è* –∏ *—Ç–∏–ø* –∑–∞–Ω—è—Ç–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n\n"
                "–§–æ—Ä–º–∞—Ç: `YYYY-MM-DD HH:MM —Ç–∏–ø`\n"
                "–ü—Ä–∏–º–µ—Ä: `2025-07-01 19:00 —Ö–∞—Ç—Ö–∞`"
            )
            if update.effective_chat:
                await update.effective_chat.send_message(prompt, parse_mode="Markdown")
            return BOOKING_INPUT
        except Exception as e:
            await self.handle_error(update, context, e)
            return ConversationHandler.END

    # ------------------------------------------------------------------
    #   –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # ------------------------------------------------------------------

    async def process_booking_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:  # type: ignore[override]
        if not update.message or not update.message.text:
            return BOOKING_INPUT

        text = update.message.text.strip()
        parts = text.split()
        if len(parts) < 3:
            await update.effective_chat.send_message(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ /cancel." )
            return BOOKING_INPUT

        date_part, time_part, *class_type_parts = parts
        class_type = " ".join(class_type_parts)

        try:
            class_dt = datetime.strptime(f"{date_part} {time_part}", "%Y-%m-%d %H:%M")
        except ValueError:
            await update.effective_chat.send_message(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞—Ç—É/–≤—Ä–µ–º—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD HH:MM.")
            return BOOKING_INPUT

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        user_id = update.effective_user.id  # type: ignore[assignment]
        client = await self.client_service.get_client_by_telegram_id(user_id)
        if not client:
            await update.effective_chat.send_message("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é /register.")
            return ConversationHandler.END

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        create_data = BookingCreateData(
            client_id=client.id,
            class_date=class_dt,
            class_type=class_type,
        )

        try:
            booking = await self.booking_service.create_booking(create_data)
            await update.effective_chat.send_message(
                f"‚úÖ –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞! –î–æ –≤—Å—Ç—Ä–µ—á–∏ {class_dt.strftime('%d.%m %H:%M')} ‚ú®")
            logger.info("–°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å %s —á–µ—Ä–µ–∑ Telegram –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ %s", booking.id, client.id)
        except (ValueError, BusinessLogicError) as be:
            await update.effective_chat.send_message(f"üö´ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å: {be}")
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: %s", e)
            await update.effective_chat.send_message("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        return ConversationHandler.END

    # ------------------------------------------------------------------
    #   –û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞
    # ------------------------------------------------------------------

    async def cancel_booking(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:  # type: ignore[override]
        if update.effective_chat:
            await update.effective_chat.send_message("‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return ConversationHandler.END

    # ------------------------------------------------------------------
    #   –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ BaseHandler
    # ------------------------------------------------------------------

    async def handle(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:  # type: ignore[override]
        """–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ book_command.

        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –Ω–µ–æ–±—Ö–æ–¥–∏–º –ª–∏—à—å –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–º—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
        BaseHandler, —Ç–∞–∫ –∫–∞–∫ BookingHandlers —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ ConversationHandler
        —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏. –ï—Å–ª–∏ –∫–ª–∞—Å—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é (–Ω–∞–ø—Ä. –≤ —Ç–µ—Å—Ç–∞—Ö),
        –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã–∑–≤–∞—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—É—é –ª–æ–≥–∏–∫—É /book.
        """
        await self.book_command(update, context) 