"""
üèóÔ∏è –ë–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ Telegram Bot

–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥.
–ü—Ä–∏–Ω—Ü–∏–ø CyberKitty: –ø—Ä–æ—Å—Ç–æ—Ç–∞ –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ.
"""

import logging
from abc import ABC, abstractmethod
from typing import Optional

from telegram import Update
from telegram.ext import ContextTypes

from ....services.protocols.client_service import ClientServiceProtocol
from .. import templates as tpl

logger = logging.getLogger(__name__)


class BaseHandler(ABC):
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Telegram Bot.
    
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
    - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥
    - –î–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å–∞–º
    - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    - –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    """
    
    def __init__(self, client_service: ClientServiceProtocol):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞.
        
        Args:
            client_service: –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
        """
        self.client_service = client_service
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω {self.__class__.__name__}")
    
    async def get_user_info(self, update: Update) -> tuple[int, str, Optional[str]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
        
        Args:
            update: Telegram –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (user_id, username, first_name)
        """
        user = update.effective_user
        if not user:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
        
        user_id = user.id
        username = user.username or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        first_name = user.first_name
        
        return user_id, username, first_name
    
    async def log_command(self, update: Update, command: str) -> None:
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã.
        
        Args:
            update: Telegram –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            command: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        """
        try:
            user_id, username, first_name = await self.get_user_info(update)
            logger.info(
                f"–ö–æ–º–∞–Ω–¥–∞ /{command} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {first_name} "
                f"(@{username}, ID: {user_id})"
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /{command}: {e}")
    
    async def handle_error(self, update: Update, context: ContextTypes.DEFAULT_TYPE, error: Exception) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É –≤ –∫–æ–º–∞–Ω–¥–µ.
        
        Args:
            update: Telegram –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
            error: –í–æ–∑–Ω–∏–∫—à–∞—è –æ—à–∏–±–∫–∞
        """
        try:
            user_id, username, _ = await self.get_user_info(update)
            logger.error(
                f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} (ID: {user_id}): {error}",
                exc_info=True
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            if update.effective_chat:
                await update.effective_chat.send_message(tpl.generic_error())
        except Exception as log_error:
            logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–∫–∏: {log_error}")
    
    @abstractmethod
    async def handle(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã.
        
        –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö.
        
        Args:
            update: Telegram –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        """
        pass
    
    async def safe_handle(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.
        
        Args:
            update: Telegram –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        """
        try:
            await self.handle(update, context)
        except Exception as e:
            await self.handle_error(update, context, e) 