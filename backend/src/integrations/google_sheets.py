"""
üìä Google Sheets API –∫–ª–∏–µ–Ω—Ç –¥–ª—è CyberKitty Practiti

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Sheets API –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö,
–∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞—Ö –∏ –∑–∞–ø–∏—Å—è—Ö –Ω–∞ –∑–∞–Ω—è—Ç–∏—è.
"""

import json
from typing import List, Dict, Any, Optional
from pathlib import Path

from google.auth.transport.requests import Request
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

from ..config.settings import settings
from ..utils.logger import get_logger, log_google_sheets_operation
from ..utils.exceptions import GoogleSheetsError

logger = get_logger(__name__)


# ---------------------------------------------------------------------------
# GoogleSheetsClient
# ---------------------------------------------------------------------------
#
#  ‚Ä¢ –ß–∞—Å—Ç–æ —Å–æ–∑–¥–∞—ë—Ç—Å—è –≤ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ —á–µ—Ä–µ–∑ factory-—Ñ—É–Ω–∫—Ü–∏–∏ API-—Ä–æ—É—Ç–µ—Ä–æ–≤.
#    –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç 300-600 –º—Å –∏ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ
#    –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ HTTP-—Ç–∞–π–º-–∞—É—Ç–∏–∞–º –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ (axios timeout 10 s).
#  ‚Ä¢ –†–µ—à–µ–Ω–∏–µ: —Ä–µ–∞–ª–∏–∑—É–µ–º –ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–π —Å–∏–Ω–≥–ª—Ç–æ–Ω-–∫—ç—à –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø—Ä–æ—Ü–µ—Å—Å–∞.
#    –ö–ª—é—á –∫—ç—à–∞ ‚Äî –ø–∞—Ä–∞ (credentials_path, spreadsheet_id).
#
#  NB: –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞ ‚Äì FastAPI default Uvicorn workers = 1
#      –≤ dev. –î–ª—è production Gunicorn –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å preload-—Ç–∏–ø, –≥–¥–µ
#      –æ–±—ä–µ–∫—Ç –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –≤ –º–∞—Å—Ç–µ—Ä-–ø—Ä–æ—Ü–µ—Å—Å–µ –∏ —É–Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω –≤–æ—Ä–∫–µ—Ä–∞–º–∏.
# ---------------------------------------------------------------------------

class GoogleSheetsClient:
    """
    –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets API.
    
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —á—Ç–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö.
    """
    
    _instances: dict[str, "GoogleSheetsClient"] = {}

    def __new__(cls, credentials_file: Optional[str] = None, spreadsheet_id: Optional[str] = None):  # noqa: D401
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä, –µ—Å–ª–∏ –æ–Ω —É–∂–µ —Å–æ–∑–¥–∞–Ω."""

        creds = credentials_file or settings.google_credentials_path
        sheet_id = spreadsheet_id or settings.google_sheets_id
        cache_key = f"{creds}|{sheet_id}"

        if cache_key in cls._instances:
            return cls._instances[cache_key]

        instance = super().__new__(cls)
        cls._instances[cache_key] = instance
        return instance

    # ------------------------------------------------------------------
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    # ------------------------------------------------------------------

    def __init__(self, credentials_file: Optional[str] = None, spreadsheet_id: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Google Sheets.
        
        Args:
            credentials_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å credentials
            spreadsheet_id: ID —Ç–∞–±–ª–∏—Ü—ã Google Sheets
        """
        # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞ ‚Äì –≤—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –∞—Ç—Ä–∏–±—É—Ç —É–∂–µ –µ—Å—Ç—å
        if hasattr(self, "_initialized") and self._initialized:
            return

        self.credentials_file = credentials_file or settings.google_credentials_path
        self.spreadsheet_id = spreadsheet_id or settings.google_sheets_id
        self.scopes = ['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive.readonly']
        
        self._service = None
        self._credentials = None
        
        logger.info(
            "Initializing Google Sheets client (singleton)",
            spreadsheet_id=self.spreadsheet_id,
            credentials_file=self.credentials_file
        )

        # –§–ª–∞–≥, —á—Ç–æ –æ–±—ä–µ–∫—Ç —É–∂–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        self._initialized = True
    
    @property
    def service(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä–≤–∏—Å Google Sheets API —Å –ª–µ–Ω–∏–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π."""
        if self._service is None:
            self._authenticate()
        return self._service
    
    def _authenticate(self) -> None:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Google Sheets API."""
        try:
            logger.info("Authenticating with Google Sheets API")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ credentials
            credentials_path = Path(self.credentials_file)
            if not credentials_path.exists():
                raise GoogleSheetsError(
                    f"Credentials file not found: {self.credentials_file}",
                    operation="authentication"
                )
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º credentials
            self._credentials = Credentials.from_service_account_file(
                self.credentials_file,
                scopes=self.scopes
            )
            
            # –°–æ–∑–¥–∞—ë–º —Å–µ—Ä–≤–∏—Å
            self._service = build('sheets', 'v4', credentials=self._credentials)
            
            log_google_sheets_operation(
                logger,
                operation="authentication",
                success=True
            )
            
        except FileNotFoundError as e:
            error_msg = f"Credentials file not found: {e}"
            log_google_sheets_operation(
                logger,
                operation="authentication",
                success=False,
                error=error_msg
            )
            raise GoogleSheetsError(error_msg, operation="authentication")
            
        except json.JSONDecodeError as e:
            error_msg = f"Invalid credentials file format: {e}"
            log_google_sheets_operation(
                logger,
                operation="authentication",
                success=False,
                error=error_msg
            )
            raise GoogleSheetsError(error_msg, operation="authentication")
            
        except Exception as e:
            error_msg = f"Authentication failed: {e}"
            log_google_sheets_operation(
                logger,
                operation="authentication",
                success=False,
                error=error_msg
            )
            raise GoogleSheetsError(error_msg, operation="authentication")
    
    async def read_range(self, range_name: str, sheet_name: str = "Sheet1") -> List[List[str]]:
        """
        –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.
        
        Args:
            range_name: –î–∏–∞–ø–∞–∑–æ–Ω —è—á–µ–µ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "A1:E10")
            sheet_name: –ò–º—è –ª–∏—Å—Ç–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏
        """
        full_range = f"{sheet_name}!{range_name}"
        
        try:
            logger.info(f"Reading range: {full_range}")
            
            result = self.service.spreadsheets().values().get(
                spreadsheetId=self.spreadsheet_id,
                range=full_range
            ).execute()
            
            values = result.get('values', [])
            
            log_google_sheets_operation(
                logger,
                operation="read",
                sheet_name=sheet_name,
                range_name=range_name,
                success=True
            )
            
            return values
            
        except HttpError as e:
            error_msg = f"HTTP error reading range {full_range}: {e}"
            log_google_sheets_operation(
                logger,
                operation="read",
                sheet_name=sheet_name,
                range_name=range_name,
                success=False,
                error=error_msg
            )
            raise GoogleSheetsError(error_msg, operation="read")
            
        except Exception as e:
            error_msg = f"Unexpected error reading range {full_range}: {e}"
            log_google_sheets_operation(
                logger,
                operation="read",
                sheet_name=sheet_name,
                range_name=range_name,
                success=False,
                error=error_msg
            )
            raise GoogleSheetsError(error_msg, operation="read")
    
    async def write_range(
        self, 
        range_name: str, 
        values: List[List[Any]], 
        sheet_name: str = "Sheet1"
    ) -> bool:
        """
        –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω.
        
        Args:
            range_name: –î–∏–∞–ø–∞–∑–æ–Ω —è—á–µ–µ–∫
            values: –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
            sheet_name: –ò–º—è –ª–∏—Å—Ç–∞
            
        Returns:
            True –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–∞
        """
        full_range = f"{sheet_name}!{range_name}"
        
        try:
            logger.info(f"Writing to range: {full_range}")
            
            body = {
                'values': values
            }
            
            result = self.service.spreadsheets().values().update(
                spreadsheetId=self.spreadsheet_id,
                range=full_range,
                valueInputOption='RAW',
                body=body
            ).execute()
            
            updated_cells = result.get('updatedCells', 0)
            
            log_google_sheets_operation(
                logger,
                operation="write",
                sheet_name=sheet_name,
                range_name=range_name,
                success=True
            )
            
            logger.info(f"Updated {updated_cells} cells in {full_range}")
            return True
            
        except HttpError as e:
            error_msg = f"HTTP error writing to range {full_range}: {e}"
            log_google_sheets_operation(
                logger,
                operation="write",
                sheet_name=sheet_name,
                range_name=range_name,
                success=False,
                error=error_msg
            )
            raise GoogleSheetsError(error_msg, operation="write")
            
        except Exception as e:
            error_msg = f"Unexpected error writing to range {full_range}: {e}"
            log_google_sheets_operation(
                logger,
                operation="write",
                sheet_name=sheet_name,
                range_name=range_name,
                success=False,
                error=error_msg
            )
            raise GoogleSheetsError(error_msg, operation="write")
    
    async def append_rows(
        self, 
        values: List[List[Any]], 
        sheet_name: str = "Sheet1"
    ) -> bool:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ –≤ –∫–æ–Ω–µ—Ü —Ç–∞–±–ª–∏—Ü—ã.
        
        Args:
            values: –î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            sheet_name: –ò–º—è –ª–∏—Å—Ç–∞
            
        Returns:
            True –µ—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            logger.info(f"Appending {len(values)} rows to {sheet_name}")
            
            body = {
                'values': values
            }
            
            result = self.service.spreadsheets().values().append(
                spreadsheetId=self.spreadsheet_id,
                range=f"{sheet_name}!A:A",
                valueInputOption='RAW',
                insertDataOption='INSERT_ROWS',
                body=body
            ).execute()
            
            updated_cells = result.get('updates', {}).get('updatedCells', 0)
            
            log_google_sheets_operation(
                logger,
                operation="append",
                sheet_name=sheet_name,
                success=True
            )
            
            logger.info(f"Appended {updated_cells} cells to {sheet_name}")
            return True
            
        except HttpError as e:
            error_msg = f"HTTP error appending to {sheet_name}: {e}"
            log_google_sheets_operation(
                logger,
                operation="append",
                sheet_name=sheet_name,
                success=False,
                error=error_msg
            )
            raise GoogleSheetsError(error_msg, operation="append")
            
        except Exception as e:
            error_msg = f"Unexpected error appending to {sheet_name}: {e}"
            log_google_sheets_operation(
                logger,
                operation="append",
                sheet_name=sheet_name,
                success=False,
                error=error_msg
            )
            raise GoogleSheetsError(error_msg, operation="append")
    
    async def clear_range(self, range_name: str, sheet_name: str = "Sheet1") -> bool:
        """
        –û—á–∏—Å—Ç–∫–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.
        
        Args:
            range_name: –î–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
            sheet_name: –ò–º—è –ª–∏—Å—Ç–∞
            
        Returns:
            True –µ—Å–ª–∏ –æ—á–∏—Å—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        full_range = f"{sheet_name}!{range_name}"
        
        try:
            logger.info(f"Clearing range: {full_range}")
            
            self.service.spreadsheets().values().clear(
                spreadsheetId=self.spreadsheet_id,
                range=full_range
            ).execute()
            
            log_google_sheets_operation(
                logger,
                operation="clear",
                sheet_name=sheet_name,
                range_name=range_name,
                success=True
            )
            
            return True
            
        except HttpError as e:
            error_msg = f"HTTP error clearing range {full_range}: {e}"
            log_google_sheets_operation(
                logger,
                operation="clear",
                sheet_name=sheet_name,
                range_name=range_name,
                success=False,
                error=error_msg
            )
            raise GoogleSheetsError(error_msg, operation="clear")
            
        except Exception as e:
            error_msg = f"Unexpected error clearing range {full_range}: {e}"
            log_google_sheets_operation(
                logger,
                operation="clear",
                sheet_name=sheet_name,
                range_name=range_name,
                success=False,
                error=error_msg
            )
            raise GoogleSheetsError(error_msg, operation="clear")
    
    async def get_sheet_info(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–µ.
        
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–µ –∏ –ª–∏—Å—Ç–∞—Ö
        """
        try:
            logger.info("Getting spreadsheet info")
            
            result = self.service.spreadsheets().get(
                spreadsheetId=self.spreadsheet_id
            ).execute()
            
            log_google_sheets_operation(
                logger,
                operation="get_info",
                success=True
            )
            
            return result
            
        except HttpError as e:
            error_msg = f"HTTP error getting spreadsheet info: {e}"
            log_google_sheets_operation(
                logger,
                operation="get_info",
                success=False,
                error=error_msg
            )
            raise GoogleSheetsError(error_msg, operation="get_info")
            
        except Exception as e:
            error_msg = f"Unexpected error getting spreadsheet info: {e}"
            log_google_sheets_operation(
                logger,
                operation="get_info",
                success=False,
                error=error_msg
            )
            raise GoogleSheetsError(error_msg, operation="get_info")

    # ------------------------------------------------------------------
    # Sheet helpers
    # ------------------------------------------------------------------

    async def ensure_sheet_exists(self, sheet_name: str) -> None:
        """–°–æ–∑–¥–∞—Ç—å –ª–∏—Å—Ç, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.

        Args:
            sheet_name: –ò–º—è –ª–∏—Å—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ.
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –ª–∏—Å—Ç–æ–≤
            info = self.service.spreadsheets().get(spreadsheetId=self.spreadsheet_id).execute()
            existing_titles = {s["properties"]["title"] for s in info.get("sheets", [])}

            if sheet_name in existing_titles:
                return  # –£–∂–µ –µ—Å—Ç—å

            logger.info(f"Adding new sheet '{sheet_name}' to spreadsheet {self.spreadsheet_id}")

            requests_body = {
                "requests": [
                    {
                        "addSheet": {
                            "properties": {
                                "title": sheet_name
                            }
                        }
                    }
                ]
            }

            self.service.spreadsheets().batchUpdate(
                spreadsheetId=self.spreadsheet_id, body=requests_body
            ).execute()

            logger.info(f"Sheet '{sheet_name}' created successfully")

        except HttpError as e:
            error_msg = f"HTTP error creating sheet {sheet_name}: {e}"
            logger.error(error_msg)
            raise GoogleSheetsError(error_msg, operation="create_sheet")
        except Exception as e:
            error_msg = f"Unexpected error creating sheet {sheet_name}: {e}"
            logger.error(error_msg)
            raise GoogleSheetsError(error_msg, operation="create_sheet") 