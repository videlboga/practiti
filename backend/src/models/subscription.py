"""
üé´ –ú–æ–¥–µ–ª—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ CyberKitty Practiti

–ú–æ–¥–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å—Ç—É–¥–∏–∏ –π–æ–≥–∏.
–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É SUBSCRIPTION CONTRACT –∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.
"""

from datetime import date, datetime, timedelta
from enum import Enum
from typing import Optional
from uuid import uuid4

from pydantic import BaseModel, Field, field_validator, computed_field


class SubscriptionType(str, Enum):
    """–¢–∏–ø—ã –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤."""
    TRIAL = "trial"                    # –ü—Ä–æ–±–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç (500‚ÇΩ, 1 –∑–∞–Ω—è—Ç–∏–µ, 14 –¥–Ω–µ–π)
    SINGLE = "single"                  # –†–∞–∑–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ (1100‚ÇΩ, 1 –∑–∞–Ω—è—Ç–∏–µ)
    PACKAGE_4 = "package_4"           # 4 –∑–∞–Ω—è—Ç–∏—è (3200‚ÇΩ, 30 –¥–Ω–µ–π)
    PACKAGE_8 = "package_8"           # 8 –∑–∞–Ω—è—Ç–∏–π (7000‚ÇΩ, 30 –¥–Ω–µ–π)
    PACKAGE_12 = "package_12"         # 12 –∑–∞–Ω—è—Ç–∏–π (9000‚ÇΩ, 30 –¥–Ω–µ–π)
    UNLIMITED = "unlimited"           # –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π (10800‚ÇΩ, 30 –¥–Ω–µ–π)


class SubscriptionStatus(str, Enum):
    """–°—Ç–∞—Ç—É—Å—ã –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞."""
    PENDING = "pending"               # –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã
    ACTIVE = "active"                 # –ê–∫—Ç–∏–≤–Ω—ã–π
    EXPIRED = "expired"               # –ò—Å—Ç—ë–∫
    EXHAUSTED = "exhausted"           # –ò—Å—á–µ—Ä–ø–∞–Ω (–∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∑–∞–Ω—è—Ç–∏—è)
    SUSPENDED = "suspended"           # –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    CANCELLED = "cancelled"           # –û—Ç–º–µ–Ω—ë–Ω


class Subscription(BaseModel):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞.
    
    –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç SUBSCRIPTION CONTRACT –∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.
    """
    
    id: str = Field(default_factory=lambda: str(uuid4()), description="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞")
    client_id: str = Field(..., description="ID –∫–ª–∏–µ–Ω—Ç–∞-–≤–ª–∞–¥–µ–ª—å—Ü–∞")
    type: SubscriptionType = Field(..., description="–¢–∏–ø –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞")
    total_classes: int = Field(..., ge=0, description="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç–∏–π")
    used_classes: int = Field(default=0, ge=0, description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è")
    start_date: date = Field(..., description="–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –¥–µ–π—Å—Ç–≤–∏—è")
    end_date: date = Field(..., description="–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è")
    status: SubscriptionStatus = Field(default=SubscriptionStatus.PENDING, description="–°—Ç–∞—Ç—É—Å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    created_at: datetime = Field(default_factory=datetime.now, description="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
    price: int = Field(..., ge=0, description="–¶–µ–Ω–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –≤ —Ä—É–±–ª—è—Ö")
    payment_confirmed: bool = Field(default=False, description="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –ª–∏ –æ–ø–ª–∞—Ç–∞")
    payment_confirmed_at: Optional[datetime] = Field(default=None, description="–î–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã")
    
    @computed_field
    @property
    def remaining_classes(self) -> int:
        """–û—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç–∏–π."""
        if self.type == SubscriptionType.UNLIMITED:
            return 999  # –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç
        return max(0, self.total_classes - self.used_classes)
    
    @computed_field  
    @property
    def is_active(self) -> bool:
        """–ê–±–æ–Ω–µ–º–µ–Ω—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º, –µ—Å–ª–∏ –µ–≥–æ —Å—Ç–∞—Ç—É—Å ACTIVE, –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ –±—É–¥—É—â–µ–º –∏ –æ—Å—Ç–∞–ª–∏—Å—å –∑–∞–Ω—è—Ç–∏—è."""
        today = date.today()
        return (
            self.status == SubscriptionStatus.ACTIVE
            and (self.end_date is None or self.end_date >= today)
            and (self.remaining_classes is None or self.remaining_classes > 0)
        )
    
    @computed_field
    @property
    def is_expired(self) -> bool:
        """–ò—Å—Ç—ë–∫ –ª–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç (–ø–æ –¥–∞—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–ª–∏ —Å—Ç–∞—Ç—É—Å—É EXPIRED)."""
        today = date.today()
        return self.status == SubscriptionStatus.EXPIRED or (self.end_date < today)
    
    @computed_field
    @property
    def is_exhausted(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π."""
        return self.type != SubscriptionType.UNLIMITED and self.remaining_classes <= 0
    
    @field_validator('used_classes')
    @classmethod
    def validate_used_classes(cls, v: int, info) -> int:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π."""
        if hasattr(info, 'data') and 'total_classes' in info.data:
            total_classes = info.data['total_classes']
            subscription_type = info.data.get('type')
            
            # –î–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            if subscription_type != SubscriptionType.UNLIMITED and v > total_classes:
                raise ValueError(f'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è ({v}) –Ω–µ –º–æ–≥—É—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ({total_classes})')
        
        return v
    
    @field_validator('end_date')
    @classmethod  
    def validate_end_date(cls, v: date, info) -> date:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è."""
        if hasattr(info, 'data') and 'start_date' in info.data:
            start_date = info.data['start_date']
            if v < start_date:
                raise ValueError('–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞')
        
        return v

    def __str__(self) -> str:
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞."""
        return f"Subscription({self.type.value}, {self.remaining_classes}/{self.total_classes})"
    
    def __repr__(self) -> str:
        """Repr –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞."""
        return f"Subscription(id={self.id}, type={self.type}, status={self.status}, remaining={self.remaining_classes})"


class SubscriptionCreateData(BaseModel):
    """
    –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –∫–ª–∏–µ–Ω—Ç–æ–º.
    """
    
    client_id: str = Field(..., description="ID –∫–ª–∏–µ–Ω—Ç–∞-–≤–ª–∞–¥–µ–ª—å—Ü–∞")
    type: SubscriptionType = Field(..., description="–¢–∏–ø –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞")
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞; –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ (–±–µ–∑ Optional), —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å None
    start_date: date = Field(default_factory=date.today, description="–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞")
    
    # –í–∞–ª–∏–¥–∞—Ç–æ—Ä: –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º
    @field_validator('start_date')
    @classmethod
    def validate_start_date(cls, v: date) -> date:
        if v < date.today():
            raise ValueError('–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º')
        return v


class SubscriptionUpdateData(BaseModel):
    """
    –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞.
    
    –í—Å–µ –ø–æ–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ - –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ.
    """
    
    status: Optional[SubscriptionStatus] = Field(default=None, description="–°—Ç–∞—Ç—É—Å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞")
    used_classes: Optional[int] = Field(default=None, ge=0, description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è")
    payment_confirmed: Optional[bool] = Field(default=None, description="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –ª–∏ –æ–ø–ª–∞—Ç–∞")
    end_date: Optional[date] = Field(default=None, description="–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è")
    remaining_classes: Optional[int] = Field(None, ge=0, description="–û—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–Ω—è—Ç–∏—è")
    total_classes: Optional[int] = Field(None, ge=0, description="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç–∏–π (–¥–ª—è –ø–æ–¥–∞—Ä–∫–æ–≤)")
    type: Optional[SubscriptionType] = Field(None, description="–°–º–µ–Ω–∞ —Ç–∏–ø–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞")
    
    @field_validator('used_classes')
    @classmethod
    def validate_used_classes(cls, v: Optional[int]) -> Optional[int]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π."""
        if v is not None and v < 0:
            raise ValueError('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏')
        return v 

    @field_validator('remaining_classes')
    @classmethod
    def validate_remaining_classes(cls, v: Optional[int]) -> Optional[int]:
        if v is not None and v < 0:
            raise ValueError('–û—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–Ω—è—Ç–∏—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏')
        return v 

# -----------------------------------------------------------------------------
#  –î–æ–º–µ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º–∏/—Å–µ—Ä–≤–∏—Å–∞–º–∏ –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è
#  –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏). –ü–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ
#  —Å–ª–µ–¥—É–µ—Ç —É–±—Ä–∞—Ç—å –¥—É–±–ª–∏ –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ –æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞.
# -----------------------------------------------------------------------------

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: –∫–æ–ª-–≤–æ –∑–∞–Ω—è—Ç–∏–π, —Å—Ä–æ–∫ (–¥–Ω–∏), —Ü–µ–Ω–∞
SUBSCRIPTION_DETAILS = {
    SubscriptionType.TRIAL:    {"classes": 1, "duration_days": 14, "price": 500},
    SubscriptionType.SINGLE:   {"classes": 1, "duration_days": 30, "price": 1100},
    SubscriptionType.PACKAGE_4:  {"classes": 4, "duration_days": 30, "price": 3200},
    SubscriptionType.PACKAGE_8:  {"classes": 8, "duration_days": 30, "price": 7000},
    SubscriptionType.PACKAGE_12: {"classes": 12, "duration_days": 30, "price": 9000},
    SubscriptionType.UNLIMITED: {"classes": 9999, "duration_days": 30, "price": 10800},
}

# –°–∏–Ω–æ–Ω–∏–º –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª SUBSCRIPTION_TYPES
SUBSCRIPTION_TYPES = SUBSCRIPTION_DETAILS