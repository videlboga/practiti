"""
üìÖ –ú–æ–¥–µ–ª—å –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ CyberKitty Practiti

–ú–æ–¥–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å—è–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –∑–∞–Ω—è—Ç–∏—è –π–æ–≥–æ–π.
–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É BOOKING CONTRACT –∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.
"""

from datetime import datetime
from enum import Enum
from typing import Optional
from uuid import uuid4

from pydantic import BaseModel, Field, field_validator


class BookingStatus(str, Enum):
    """–°—Ç–∞—Ç—É—Å—ã –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ."""
    SCHEDULED = "scheduled"           # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞
    CONFIRMED = "confirmed"           # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
    ATTENDED = "attended"             # –ö–ª–∏–µ–Ω—Ç –ø—Ä–∏—à—ë–ª
    MISSED = "missed"                 # –ö–ª–∏–µ–Ω—Ç –Ω–µ –ø—Ä–∏—à—ë–ª
    CANCELLED = "cancelled"           # –û—Ç–º–µ–Ω–µ–Ω–∞


class Booking(BaseModel):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ.
    
    –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç BOOKING CONTRACT –∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.
    """
    
    id: str = Field(default_factory=lambda: str(uuid4()), description="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–ø–∏—Å–∏")
    client_id: str = Field(..., description="ID –∫–ª–∏–µ–Ω—Ç–∞")
    class_date: datetime = Field(..., description="–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è")
    class_type: str = Field(..., description="–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è (—Ö–∞—Ç—Ö–∞, –≤–∏–Ω—å—è—Å–∞, –∏ —Ç.–¥.)")
    status: BookingStatus = Field(default=BookingStatus.SCHEDULED, description="–°—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏")
    created_at: datetime = Field(default_factory=datetime.now, description="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    subscription_id: Optional[str] = Field(default=None, description="ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)")
    teacher_name: Optional[str] = Field(default=None, description="–ò–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
    class_duration: int = Field(default=90, ge=30, le=180, description="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö")
    notes: Optional[str] = Field(default=None, max_length=500, description="–ó–∞–º–µ—Ç–∫–∏ –∫ –∑–∞–ø–∏—Å–∏")
    
    # –ü–æ–ª—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    confirmed_at: Optional[datetime] = Field(default=None, description="–î–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
    attended_at: Optional[datetime] = Field(default=None, description="–î–∞—Ç–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è")
    cancelled_at: Optional[datetime] = Field(default=None, description="–î–∞—Ç–∞ –æ—Ç–º–µ–Ω—ã")
    
    @field_validator('class_date')
    @classmethod
    def validate_class_date(cls, v: datetime) -> datetime:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã –∑–∞–Ω—è—Ç–∏—è (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ aware/naive)."""
        from datetime import timezone
        now = datetime.now(timezone.utc)
        # –ü—Ä–∏–≤–æ–¥–∏–º –æ–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∫ UTC na√Øve –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        if v.tzinfo is not None:
            v_cmp = v.astimezone(timezone.utc).replace(tzinfo=None)
        else:
            v_cmp = v
        if now.tzinfo is not None:
            now_cmp = now.astimezone(timezone.utc).replace(tzinfo=None)
        else:
            now_cmp = now
        if v_cmp < now_cmp:
            raise ValueError('–ù–µ–ª—å–∑—è –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ –≤ –ø—Ä–æ—à–ª–æ–º')
        return v
    
    @field_validator('class_type')
    @classmethod
    def validate_class_type(cls, v: str) -> str:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–∏—è (MVP: –¥–æ–ø—É—Å–∫–∞–µ–º –ª—é–±–æ–π –Ω–µ –ø—É—Å—Ç–æ–π —Ç–∏–ø)."""
        return v.strip()
    
    @property
    def is_upcoming(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∑–∞–Ω—è—Ç–∏–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–µ."""
        return self.class_date > datetime.now()
    
    @property
    def is_past(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∑–∞–Ω—è—Ç–∏–µ —É–∂–µ –ø—Ä–æ—à–ª–æ."""
        return self.class_date < datetime.now()
    
    @property
    def can_be_cancelled(self) -> bool:
        """–ú–æ–∂–Ω–æ –ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å."""
        # –ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        # –ò —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ –∑–∞–Ω—è—Ç–∏—è –±–æ–ª—å—à–µ 2 —á–∞—Å–æ–≤
        if self.status not in [BookingStatus.SCHEDULED, BookingStatus.CONFIRMED]:
            return False
        
        time_until_class = (self.class_date - datetime.now()).total_seconds()
        return time_until_class > 7200  # 2 —á–∞—Å–∞ = 7200 —Å–µ–∫—É–Ω–¥

    def __str__(self) -> str:
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏."""
        return f"Booking({self.class_type}, {self.class_date.strftime('%Y-%m-%d %H:%M')})"
    
    def __repr__(self) -> str:
        """Repr –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏."""
        return f"Booking(id={self.id}, client_id={self.client_id}, status={self.status})"


class BookingCreateData(BaseModel):
    """
    –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ.
    """
    
    client_id: str = Field(..., description="ID –∫–ª–∏–µ–Ω—Ç–∞")
    class_date: datetime = Field(..., description="–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è")
    class_type: str = Field(..., description="–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è")
    subscription_id: Optional[str] = Field(default=None, description="ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞")
    teacher_name: Optional[str] = Field(default=None, description="–ò–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
    class_duration: int = Field(default=90, ge=30, le=180, description="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è")
    notes: Optional[str] = Field(default=None, max_length=500, description="–ó–∞–º–µ—Ç–∫–∏ –∫ –∑–∞–ø–∏—Å–∏")
    
    # –ù–∞—Å–ª–µ–¥—É–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥–µ–ª–∏
    _validate_class_date = field_validator('class_date')(Booking.validate_class_date.__func__)
    _validate_class_type = field_validator('class_type')(Booking.validate_class_type.__func__)


class BookingUpdateData(BaseModel):
    """
    –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏.
    
    –í—Å–µ –ø–æ–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ - –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ.
    """
    
    class_date: Optional[datetime] = Field(default=None, description="–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è")
    class_type: Optional[str] = Field(default=None, description="–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è")
    status: Optional[BookingStatus] = Field(default=None, description="–°—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏")
    teacher_name: Optional[str] = Field(default=None, description="–ò–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
    class_duration: Optional[int] = Field(default=None, ge=30, le=180, description="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è")
    notes: Optional[str] = Field(default=None, max_length=500, description="–ó–∞–º–µ—Ç–∫–∏ –∫ –∑–∞–ø–∏—Å–∏")
    
    @field_validator('class_date')
    @classmethod
    def validate_class_date(cls, v: Optional[datetime]) -> Optional[datetime]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã –∑–∞–Ω—è—Ç–∏—è."""
        if v is not None:
            return Booking.validate_class_date(v)
        return v
    
    @field_validator('class_type')
    @classmethod
    def validate_class_type(cls, v: Optional[str]) -> Optional[str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–∏—è."""
        if v is not None:
            return Booking.validate_class_type(v)
        return v 