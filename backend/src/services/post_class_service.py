"""
üéØ –°–µ—Ä–≤–∏—Å post-class –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏

–£–ø—Ä–∞–≤–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π:
- –û—Ç–ø—Ä–∞–≤–∫–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π –∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
- –°–±–æ—Ä –æ—Ç–∑—ã–≤–æ–≤ –æ –∑–∞–Ω—è—Ç–∏–∏
- –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–Ω—è—Ç–∏–π
- –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
"""

import asyncio
from datetime import datetime, timedelta
from typing import List, Optional, Dict, Any
import logging

from ..models.booking import Booking, BookingStatus
from ..models.feedback import Feedback, FeedbackCreateData, FeedbackType
from ..models.client import Client
from ..models.subscription import Subscription
from ..models.notification import NotificationType
from ..services.protocols.client_service import ClientServiceProtocol
from ..services.protocols.subscription_service import SubscriptionServiceProtocol
from ..services.protocols.notification_service import NotificationServiceProtocol

logger = logging.getLogger(__name__)


class PostClassService:
    """
    –°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∑–∞–Ω—è—Ç–∏–π.
    
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–Ω—è—Ç–∏–π
    - –°–±–æ—Ä –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    - –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–Ω—è—Ç–∏–π
    - –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    - –ê–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
    """
    
    def __init__(
        self,
        client_service: ClientServiceProtocol,
        subscription_service: SubscriptionServiceProtocol,
        notification_service: NotificationServiceProtocol
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ post-class –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏.
        
        Args:
            client_service: –°–µ—Ä–≤–∏—Å –∫–ª–∏–µ–Ω—Ç–æ–≤
            subscription_service: –°–µ—Ä–≤–∏—Å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
            notification_service: –°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        self._client_service = client_service
        self._subscription_service = subscription_service
        self._notification_service = notification_service
        
        logger.info("PostClassService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def process_completed_class(self, booking: Booking) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ.
        
        Args:
            booking: –ó–∞–ø–∏—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ATTENDED
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        if booking.status != BookingStatus.ATTENDED:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–Ω—è—Ç–∏–µ {booking.id} —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {booking.status}")
            return {"success": False, "error": "–ó–∞–Ω—è—Ç–∏–µ –Ω–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø–æ—Å–µ—â–µ–Ω–Ω–æ–µ"}
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è {booking.id} –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {booking.client_id}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
            client = await self._client_service.get_client(booking.client_id)
            subscription = None
            if booking.subscription_id:
                subscription = await self._subscription_service.get_subscription(booking.subscription_id)
            
            results = {
                "booking_id": booking.id,
                "client_id": booking.client_id,
                "processed_at": datetime.now().isoformat(),
                "actions": []
            }
            
            # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–µ—â–µ–Ω–∏–µ
            thank_you_sent = await self._send_thank_you_message(client, booking)
            results["actions"].append({
                "action": "thank_you_message",
                "success": thank_you_sent,
                "timestamp": datetime.now().isoformat()
            })
            
            # 2. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å (—Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 30 –º–∏–Ω—É—Ç)
            feedback_scheduled = await self._schedule_feedback_request(client, booking)
            results["actions"].append({
                "action": "feedback_request_scheduled",
                "success": feedback_scheduled,
                "timestamp": datetime.now().isoformat()
            })
            
            # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç)
            if subscription:
                progress_sent = await self._send_progress_update(client, subscription, booking)
                results["actions"].append({
                    "action": "progress_update",
                    "success": progress_sent,
                    "timestamp": datetime.now().isoformat()
                })
            
            # 4. –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–Ω—è—Ç–∏—è
            recommendations_sent = await self._send_class_recommendations(client, booking)
            results["actions"].append({
                "action": "class_recommendations",
                "success": recommendations_sent,
                "timestamp": datetime.now().isoformat()
            })
            
            # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
            achievements_sent = await self._check_and_send_achievements(client, booking)
            results["actions"].append({
                "action": "achievements_check",
                "success": achievements_sent,
                "timestamp": datetime.now().isoformat()
            })
            
            results["success"] = True
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–Ω—è—Ç–∏—è {booking.id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return results
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è {booking.id}: {e}")
            return {
                "success": False,
                "error": str(e),
                "booking_id": booking.id
            }
    
    async def _send_thank_you_message(self, client: Client, booking: Booking) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–µ—â–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è."""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –¥–Ω—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
            hour = booking.class_date.hour
            if hour < 12:
                time_greeting = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"
            elif hour < 18:
                time_greeting = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å"
            else:
                time_greeting = "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"
            
            # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–∏—è
            class_messages = {
                '—Ö–∞—Ç—Ö–∞': '–ù–∞–¥–µ–µ–º—Å—è, –≤—ã –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∏ –≥–∞—Ä–º–æ–Ω–∏—é –∏ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ! üßò‚Äç‚ôÄÔ∏è',
                '–≤–∏–Ω—å—è—Å–∞': '–ö–∞–∫–æ–π –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –ø–æ—Ç–æ–∫ —ç–Ω–µ—Ä–≥–∏–∏! –í—ã –±—ã–ª–∏ –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω—ã! üí´',
                '–∞—à—Ç–∞–Ω–≥–∞': '–í–ø–µ—á–∞—Ç–ª—è—é—â–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞! –í–∞—à–∞ —Å–∏–ª–∞ –∏ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å —Ä–∞—Å—Ç—É—Ç! üí™',
                '–∏–Ω—å': '–ì–ª—É–±–æ–∫–æ–µ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ! –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —ç—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º! üå∏',
                '–π–æ–≥–∞-–Ω–∏–¥—Ä–∞': '–ö–∞–∫–æ–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –º–∏—Ä —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏! ‚ú®',
                '–∫—É–Ω–¥–∞–ª–∏–Ω–∏': '–≠–Ω–µ—Ä–≥–∏—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∞! –ß—É–≤—Å—Ç–≤—É–µ—Ç–µ –ª–∏ –≤—ã —ç—Ç—É —Å–∏–ª—É –≤–Ω—É—Ç—Ä–∏? ‚ö°',
                '–ø—Ä–∞–Ω–∞—è–º–∞': '–î—ã—Ö–∞–Ω–∏–µ - —ç—Ç–æ –∂–∏–∑–Ω—å! –ü—Ä–µ–∫—Ä–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —ç–Ω–µ—Ä–≥–∏–µ–π! üå¨Ô∏è'
            }
            
            class_specific = class_messages.get(booking.class_type.lower(), '–û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞!')
            
            await self._notification_service.send_immediate_notification(
                client_id=client.id,
                notification_type=NotificationType.GENERAL_INFO,
                template_data={
                    'client_name': client.name,
                    'time_greeting': time_greeting,
                    'class_type': booking.class_type,
                    'class_specific_message': class_specific,
                    'class_date': booking.class_date.strftime('%d.%m.%Y –≤ %H:%M')
                }
            )
            
            logger.info(f"–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç—É {client.id} –∑–∞ –∑–∞–Ω—è—Ç–∏–µ {booking.id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç—É {client.id}: {e}")
            return False
    
    async def _schedule_feedback_request(self, client: Client, booking: Booking) -> bool:
        """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç."""
        try:
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –∑–∞–Ω—è—Ç–∏—è
            scheduled_time = datetime.now() + timedelta(minutes=30)
            
            await self._notification_service.create_notification_from_template(
                client_id=client.id,
                notification_type=NotificationType.GENERAL_INFO,
                template_data={
                    'client_name': client.name,
                    'class_type': booking.class_type,
                    'feedback_request': True,
                    'booking_id': booking.id
                },
                scheduled_at=scheduled_time
            )
            
            logger.info(f"–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client.id} –Ω–∞ {scheduled_time}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client.id}: {e}")
            return False
    
    async def _send_progress_update(self, client: Client, subscription: Subscription, booking: Booking) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—É."""
        try:
            remaining_classes = subscription.total_classes - subscription.used_classes
            progress_percentage = (subscription.used_classes / subscription.total_classes) * 100
            
            # –†–∞–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            if progress_percentage >= 80:
                progress_message = "–í—ã –ø–æ—á—Ç–∏ —É —Ü–µ–ª–∏! –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ! üéØ"
            elif progress_percentage >= 50:
                progress_message = "–û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å! –í—ã –Ω–∞ –ø–æ–ª–ø—É—Ç–∏ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞! üìà"
            elif progress_percentage >= 25:
                progress_message = "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –Ω–∞—á–∞–ª–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üåü"
            else:
                progress_message = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à—É –π–æ–≥–∞-–ø—Ä–∞–∫—Ç–∏–∫—É! –í–ø–µ—Ä–µ–¥–∏ –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ! üöÄ"
            
            await self._notification_service.send_immediate_notification(
                client_id=client.id,
                notification_type=NotificationType.GENERAL_INFO,
                template_data={
                    'client_name': client.name,
                    'used_classes': subscription.used_classes,
                    'total_classes': subscription.total_classes,
                    'remaining_classes': remaining_classes,
                    'progress_percentage': round(progress_percentage, 1),
                    'progress_message': progress_message
                }
            )
            
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É {client.id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–ª–∏–µ–Ω—Ç—É {client.id}: {e}")
            return False
    
    async def _send_class_recommendations(self, client: Client, booking: Booking) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–Ω—è—Ç–∏–π."""
        try:
            # –õ–æ–≥–∏–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–∏—è
            recommendations = self._get_class_recommendations(booking.class_type)
            
            await self._notification_service.send_immediate_notification(
                client_id=client.id,
                notification_type=NotificationType.GENERAL_INFO,
                template_data={
                    'client_name': client.name,
                    'current_class_type': booking.class_type,
                    'recommendations': recommendations,
                    'next_week_schedule': self._get_next_week_schedule()
                }
            )
            
            logger.info(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∑–∞–Ω—è—Ç–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç—É {client.id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∫–ª–∏–µ–Ω—Ç—É {client.id}: {e}")
            return False
    
    async def _check_and_send_achievements(self, client: Client, booking: Booking) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–ª–∏–µ–Ω—Ç–∞ (—ç—Ç–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –ø–æ–∑–∂–µ)
            # –ü–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            
            motivational_messages = [
                "–ö–∞–∂–¥–æ–µ –∑–∞–Ω—è—Ç–∏–µ - —ç—Ç–æ —à–∞–≥ –∫ –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–∏ —Å–µ–±—è! üåü",
                "–í–∞—à–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è! üí´",
                "–ô–æ–≥–∞ - —ç—Ç–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ, –∞ –Ω–µ –ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å–æ–º! üßò‚Äç‚ôÄÔ∏è",
                "–°–µ–≥–æ–¥–Ω—è –≤—ã —Å—Ç–∞–ª–∏ —Å–∏–ª—å–Ω–µ–µ, —á–µ–º –≤—á–µ—Ä–∞! üí™",
                "–í–∞—à–∞ –ø—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç—å –ø—Ä–∞–∫—Ç–∏–∫–µ –≤–æ—Å—Ö–∏—â–∞–µ—Ç! üôè"
            ]
            
            import random
            selected_message = random.choice(motivational_messages)
            
            await self._notification_service.send_immediate_notification(
                client_id=client.id,
                notification_type=NotificationType.GENERAL_INFO,
                template_data={
                    'client_name': client.name,
                    'motivational_message': selected_message,
                    'class_type': booking.class_type
                }
            )
            
            logger.info(f"–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É {client.id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É {client.id}: {e}")
            return False
    
    def _get_class_recommendations(self, current_class_type: str) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∑–∞–Ω—è—Ç–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏–ø–∞."""
        recommendations_map = {
            '—Ö–∞—Ç—Ö–∞': ['–í–∏–Ω—å—è—Å–∞-—Ñ–ª–æ—É –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –¥–∏–Ω–∞–º–∏–∫–∏', '–ô–æ–≥–∞-–Ω–∏–¥—Ä–∞ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è'],
            '–≤–∏–Ω—å—è—Å–∞': ['–•–∞—Ç—Ö–∞ –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤', '–ê—à—Ç–∞–Ω–≥–∞ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Å–∏–ª—ã'],
            '–∞—à—Ç–∞–Ω–≥–∞': ['–ò–Ω—å-–π–æ–≥–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è', '–ü—Ä–∞–Ω–∞—è–º–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥—ã—Ö–∞–Ω–∏–µ–º'],
            '–∏–Ω—å': ['–•–∞—Ç—Ö–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏', '–ú–µ–¥–∏—Ç–∞—Ü–∏—è –¥–ª—è —É–≥–ª—É–±–ª–µ–Ω–∏—è –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏'],
            '–π–æ–≥–∞-–Ω–∏–¥—Ä–∞': ['–•–∞—Ç—Ö–∞ –¥–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', '–ö—É–Ω–¥–∞–ª–∏–Ω–∏ –¥–ª—è —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–±–æ—Ç—ã'],
            '–∫—É–Ω–¥–∞–ª–∏–Ω–∏': ['–í–∏–Ω—å—è—Å–∞ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏', '–ú–µ–¥–∏—Ç–∞—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –æ–ø—ã—Ç–∞'],
            '–ø—Ä–∞–Ω–∞—è–º–∞': ['–•–∞—Ç—Ö–∞ –¥–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏', '–ú–µ–¥–∏—Ç–∞—Ü–∏—è –¥–ª—è —É–≥–ª—É–±–ª–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏']
        }
        
        return recommendations_map.get(current_class_type.lower(), [
            '–•–∞—Ç—Ö–∞-–π–æ–≥–∞ –¥–ª—è –æ—Å–Ω–æ–≤',
            '–í–∏–Ω—å—è—Å–∞-—Ñ–ª–æ—É –¥–ª—è –¥–∏–Ω–∞–º–∏–∫–∏'
        ])
    
    def _get_next_week_schedule(self) -> Dict[str, List[str]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é."""
        # –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç –±—Ä–∞—Ç—å—Å—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è)
        return {
            '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': ['09:00 –•–∞—Ç—Ö–∞-–π–æ–≥–∞', '19:00 –í–∏–Ω—å—è—Å–∞-—Ñ–ª–æ—É'],
            '–í—Ç–æ—Ä–Ω–∏–∫': ['10:00 –ê—à—Ç–∞–Ω–≥–∞', '18:30 –ô–æ–≥–∞-–Ω–∏–¥—Ä–∞'],
            '–°—Ä–µ–¥–∞': ['09:30 –í–∏–Ω—å—è—Å–∞-—Ñ–ª–æ—É', '19:00 –ò–Ω—å-–π–æ–≥–∞'],
            '–ß–µ—Ç–≤–µ—Ä–≥': ['10:00 –•–∞—Ç—Ö–∞-–π–æ–≥–∞', '18:00 –ö—É–Ω–¥–∞–ª–∏–Ω–∏'],
            '–ü—è—Ç–Ω–∏—Ü–∞': ['09:00 –ü—Ä–∞–Ω–∞—è–º–∞', '19:30 –í–∏–Ω—å—è—Å–∞-—Ñ–ª–æ—É'],
            '–°—É–±–±–æ—Ç–∞': ['10:00 –°–µ–º–µ–π–Ω–∞—è –π–æ–≥–∞', '16:00 –•–∞—Ç—Ö–∞-–π–æ–≥–∞'],
            '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': ['10:30 –ú–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞', '18:00 –ò–Ω—å-–π–æ–≥–∞']
        }
    
    async def process_missed_class(self, booking: Booking) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ.
        
        Args:
            booking: –ó–∞–ø–∏—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º MISSED
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        if booking.status != BookingStatus.MISSED:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–æ–ø—É—Å–∫ –∑–∞–Ω—è—Ç–∏—è {booking.id} —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {booking.status}")
            return {"success": False, "error": "–ó–∞–Ω—è—Ç–∏–µ –Ω–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ"}
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è {booking.id} –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {booking.client_id}")
        
        try:
            client = await self._client_service.get_client(booking.client_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self._notification_service.send_immediate_notification(
                client_id=client.id,
                notification_type=NotificationType.GENERAL_INFO,
                template_data={
                    'client_name': client.name,
                    'missed_class': True,
                    'class_type': booking.class_type,
                    'class_date': booking.class_date.strftime('%d.%m.%Y –≤ %H:%M'),
                    'next_opportunities': self._get_next_week_schedule()
                }
            )
            
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–ø—É—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É {client.id}")
            return {
                "success": True,
                "booking_id": booking.id,
                "client_id": booking.client_id,
                "action": "missed_class_message_sent"
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è {booking.id}: {e}")
            return {
                "success": False,
                "error": str(e),
                "booking_id": booking.id
            }
    
    async def send_daily_motivation(self, client_ids: Optional[List[str]] = None) -> int:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –º–æ—Ç–∏–≤–∞—Ü–∏—é –∞–∫—Ç–∏–≤–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º.
        
        Args:
            client_ids: –°–ø–∏—Å–æ–∫ ID –∫–ª–∏–µ–Ω—Ç–æ–≤ (–µ—Å–ª–∏ None, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º)
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        try:
            if client_ids is None:
                clients = await self._client_service.get_active_clients()
                client_ids = [client.id for client in clients]
            
            sent_count = 0
            daily_tips = [
                "üåÖ –ù–∞—á–Ω–∏—Ç–µ –¥–µ–Ω—å —Å –≥–ª—É–±–æ–∫–æ–≥–æ –¥—ã—Ö–∞–Ω–∏—è - —ç—Ç–æ –∑–∞—Ä—è–¥–∏—Ç –≤–∞—Å —ç–Ω–µ—Ä–≥–∏–µ–π –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å!",
                "üßò‚Äç‚ôÄÔ∏è –ü–æ–º–Ω–∏—Ç–µ: –π–æ–≥–∞ - —ç—Ç–æ –Ω–µ –æ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–µ, –∞ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ. –ö–∞–∂–¥—ã–π –¥–µ–Ω—å - –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å!",
                "üí´ –í–∞—à–µ —Ç–µ–ª–æ —Å–ø–æ—Å–æ–±–Ω–æ –Ω–∞ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–µ –≤–µ—â–∏. –î–æ–≤–µ—Ä—å—Ç–µ—Å—å –µ–º—É –∏ —Å–ª—É—à–∞–π—Ç–µ –µ–≥–æ —Å–∏–≥–Ω–∞–ª—ã.",
                "üå∏ –ü—Ä–∞–∫—Ç–∏–∫–∞ –π–æ–≥–∏ - —ç—Ç–æ –ø–æ–¥–∞—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –¥–µ–ª–∞–µ—Ç–µ —Å–µ–±–µ. –¶–µ–Ω–∏—Ç–µ —ç—Ç–æ –≤—Ä–µ–º—è.",
                "‚ö° –°–∏–ª–∞ –Ω–µ –≤ —Ç–æ–º, —á—Ç–æ–±—ã —É–¥–µ—Ä–∂–∞—Ç—å –ø–æ–∑—É, –∞ –≤ —Ç–æ–º, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –≤ –¥–≤–∏–∂–µ–Ω–∏–∏.",
                "üôè –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å - —ç—Ç–æ –π–æ–≥–∞ —Å–µ—Ä–¥—Ü–∞. –ó–∞ —á—Ç–æ –≤—ã –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã —Å–µ–≥–æ–¥–Ω—è?",
                "üåü –ö–∞–∂–¥–æ–µ –∑–∞–Ω—è—Ç–∏–µ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å –∫ –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–∏ —Å–µ–±—è. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—É—Ç—å!"
            ]
            
            import random
            selected_tip = random.choice(daily_tips)
            
            for client_id in client_ids:
                try:
                    client = await self._client_service.get_client(client_id)
                    
                    await self._notification_service.send_immediate_notification(
                        client_id=client.id,
                        notification_type=NotificationType.GENERAL_INFO,
                        template_data={
                            'client_name': client.name,
                            'daily_motivation': True,
                            'tip_message': selected_tip,
                            'today_schedule': self._get_today_schedule()
                        }
                    )
                    
                    sent_count += 1
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç—É {client_id}: {e}")
                    continue
            
            logger.info(f"–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {sent_count} –∫–ª–∏–µ–Ω—Ç–∞–º")
            return sent_count
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –º–æ—Ç–∏–≤–∞—Ü–∏–∏: {e}")
            return 0
    
    def _get_today_schedule(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."""
        today = datetime.now().strftime('%A')
        schedule_map = {
            'Monday': ['09:00 –•–∞—Ç—Ö–∞-–π–æ–≥–∞', '19:00 –í–∏–Ω—å—è—Å–∞-—Ñ–ª–æ—É'],
            'Tuesday': ['10:00 –ê—à—Ç–∞–Ω–≥–∞', '18:30 –ô–æ–≥–∞-–Ω–∏–¥—Ä–∞'],
            'Wednesday': ['09:30 –í–∏–Ω—å—è—Å–∞-—Ñ–ª–æ—É', '19:00 –ò–Ω—å-–π–æ–≥–∞'],
            'Thursday': ['10:00 –•–∞—Ç—Ö–∞-–π–æ–≥–∞', '18:00 –ö—É–Ω–¥–∞–ª–∏–Ω–∏'],
            'Friday': ['09:00 –ü—Ä–∞–Ω–∞—è–º–∞', '19:30 –í–∏–Ω—å—è—Å–∞-—Ñ–ª–æ—É'],
            'Saturday': ['10:00 –°–µ–º–µ–π–Ω–∞—è –π–æ–≥–∞', '16:00 –•–∞—Ç—Ö–∞-–π–æ–≥–∞'],
            'Sunday': ['10:30 –ú–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞', '18:00 –ò–Ω—å-–π–æ–≥–∞']
        }
        
        return schedule_map.get(today, ['–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è']) 