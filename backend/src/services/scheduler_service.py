"""
üïê –°–µ—Ä–≤–∏—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á

–£–ø—Ä–∞–≤–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –∏ —Ñ–æ–Ω–æ–≤—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏:
- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–Ω—è—Ç–∏—è—Ö
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π  
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–Ω—è—Ç–∏–π
- –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã
"""

import asyncio
from datetime import datetime, timedelta
from typing import Optional, List, Dict, Any
import logging

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from apscheduler.triggers.date import DateTrigger
from apscheduler.triggers.interval import IntervalTrigger
from apscheduler.jobstores.memory import MemoryJobStore
from apscheduler.executors.asyncio import AsyncIOExecutor

from ..models.client import Client
from ..models.subscription import Subscription
from ..models.notification import Notification, NotificationStatus, NotificationType, NotificationPriority
from ..services.protocols.client_service import ClientServiceProtocol
from ..services.protocols.subscription_service import SubscriptionServiceProtocol
from ..services.protocols.notification_service import NotificationServiceProtocol

logger = logging.getLogger(__name__)


class SchedulerService:
    """
    –°–µ—Ä–≤–∏—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.
    
    –£–ø—Ä–∞–≤–ª—è–µ—Ç:
    - –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –æ –∑–∞–Ω—è—Ç–∏—è—Ö
    - –û–±—Ä–∞–±–æ—Ç–∫–æ–π –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
    - –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏
    """
    
    def __init__(
        self,
        client_service: ClientServiceProtocol,
        subscription_service: SubscriptionServiceProtocol,
        notification_service: NotificationServiceProtocol
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.
        
        Args:
            client_service: –°–µ—Ä–≤–∏—Å –∫–ª–∏–µ–Ω—Ç–æ–≤
            subscription_service: –°–µ—Ä–≤–∏—Å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
            notification_service: –°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        self._client_service = client_service
        self._subscription_service = subscription_service
        self._notification_service = notification_service
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        jobstores = {
            'default': MemoryJobStore()
        }
        executors = {
            'default': AsyncIOExecutor()
        }
        job_defaults = {
            'coalesce': False,
            'max_instances': 3
        }
        
        self._scheduler = AsyncIOScheduler(
            jobstores=jobstores,
            executors=executors,
            job_defaults=job_defaults,
            timezone='Europe/Moscow'
        )
        
        self._is_running = False
        logger.info("SchedulerService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def start(self) -> None:
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á."""
        if self._is_running:
            logger.warning("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            self._scheduler.start()
            self._is_running = True
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
            await self._register_periodic_jobs()
            
            logger.info("SchedulerService –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
            raise
    
    async def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        if not self._is_running:
            return
        
        try:
            self._scheduler.shutdown(wait=True)
            self._is_running = False
            logger.info("SchedulerService –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    
    async def _register_periodic_jobs(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á."""
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        self._scheduler.add_job(
            self._process_scheduled_notifications,
            trigger=IntervalTrigger(minutes=5),
            id='process_scheduled_notifications',
            name='–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
            replace_existing=True
        )
        
        # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        self._scheduler.add_job(
            self._retry_failed_notifications,
            trigger=IntervalTrigger(minutes=30),
            id='retry_failed_notifications',
            name='–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
            replace_existing=True
        )
        
        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–Ω—è—Ç–∏—è—Ö - –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 18:00
        self._scheduler.add_job(
            self._send_class_reminders,
            trigger=CronTrigger(hour=18, minute=0),
            id='daily_class_reminders',
            name='–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–Ω—è—Ç–∏—è—Ö',
            replace_existing=True
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ - –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00
        self._scheduler.add_job(
            self._check_expiring_subscriptions,
            trigger=CronTrigger(hour=10, minute=0),
            id='check_expiring_subscriptions',
            name='–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤',
            replace_existing=True
        )
        
        # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 9:00
        self._scheduler.add_job(
            self._send_weekly_stats,
            trigger=CronTrigger(day_of_week='mon', hour=9, minute=0),
            id='weekly_stats',
            name='–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
            replace_existing=True
        )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π - –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
        self._scheduler.add_job(
            self._process_completed_classes,
            trigger=IntervalTrigger(minutes=15),
            id='process_completed_classes',
            name='–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π',
            replace_existing=True
        )
        
        logger.info("–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    async def schedule_class_reminder(
        self,
        client_id: str,
        class_date: datetime,
        class_type: str,
        reminder_hours_before: int = 2
    ) -> str:
        """
        –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–Ω—è—Ç–∏–∏.
        
        Args:
            client_id: ID –∫–ª–∏–µ–Ω—Ç–∞
            class_date: –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è
            class_type: –¢–∏–ø –∑–∞–Ω—è—Ç–∏—è
            reminder_hours_before: –ó–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –Ω–∞–ø–æ–º–Ω–∏—Ç—å
            
        Returns:
            ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        """
        # –ï—Å–ª–∏ –¥–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è —É–∂–µ –≤ –ø—Ä–æ—à–ª–æ–º ‚Äì –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        if class_date <= datetime.now():
            logger.warning(f"–î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è {class_date} —É–∂–µ –ø—Ä–æ—à–ª–∞ ‚Äì –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è")
            return ""

        reminder_time = class_date - timedelta(hours=reminder_hours_before)

        # –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –µ–≥–æ –Ω–∞ +1 —Å–µ–∫—É–Ω–¥—É –≤–ø–µ—Ä—ë–¥
        if reminder_time <= datetime.now():
            reminder_time = datetime.now() + timedelta(seconds=1)
        
        job_id = f"class_reminder_{client_id}_{class_date.strftime('%Y%m%d_%H%M')}"
        
        try:
            self._scheduler.add_job(
                self._send_single_class_reminder,
                trigger=DateTrigger(run_date=reminder_time),
                args=[client_id, class_date, class_type],
                id=job_id,
                name=f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–Ω—è—Ç–∏–∏ {class_type}",
                replace_existing=True
            )
            
            logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id} –Ω–∞ {reminder_time}")
            return job_id
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
            return ""
    
    async def schedule_subscription_expiry_reminder(
        self,
        subscription_id: str,
        expiry_date: datetime,
        days_before: int = 3
    ) -> str:
        """
        –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞.
        
        Args:
            subscription_id: ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
            expiry_date: –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
            days_before: –ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω–∞–ø–æ–º–Ω–∏—Ç—å
            
        Returns:
            ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        """
        reminder_time = expiry_date - timedelta(days=days_before)
        
        if reminder_time <= datetime.now():
            logger.warning(f"–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–æ")
            return ""
        
        job_id = f"subscription_expiry_{subscription_id}_{expiry_date.strftime('%Y%m%d')}"
        
        try:
            self._scheduler.add_job(
                self._send_subscription_expiry_reminder,
                trigger=DateTrigger(run_date=reminder_time),
                args=[subscription_id],
                id=job_id,
                name=f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞",
                replace_existing=True
            )
            
            logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ {subscription_id}")
            return job_id
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏: {e}")
            return ""
    
    async def cancel_job(self, job_id: str) -> bool:
        """
        –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ.
        
        Args:
            job_id: ID –∑–∞–¥–∞–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            self._scheduler.remove_job(job_id)
            logger.info(f"–ó–∞–¥–∞–Ω–∏–µ {job_id} –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return True
            
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ {job_id}: {e}")
            return False
    
    async def get_scheduled_jobs(self) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.
        
        Returns:
            –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        """
        jobs = []
        for job in self._scheduler.get_jobs():
            jobs.append({
                'id': job.id,
                'name': job.name,
                'next_run_time': job.next_run_time,
                'trigger': str(job.trigger)
            })
        
        return jobs
    
    # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
    
    async def _process_scheduled_notifications(self) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        try:
            processed_count = await self._notification_service.process_scheduled_notifications()
            if processed_count > 0:
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            return processed_count
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return 0
    
    async def _retry_failed_notifications(self) -> None:
        """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        try:
            retried_count = await self._notification_service.retry_failed_notifications()
            if retried_count > 0:
                logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {retried_count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    
    async def _send_class_reminders(self) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∑–∞–Ω—è—Ç–∏—è—Ö."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞–º–∏
            active_clients = await self._client_service.get_active_clients()
            
            reminder_count = 0
            tomorrow = datetime.now() + timedelta(days=1)
            
            for client in active_clients:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∫–ª–∏–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã
                subscriptions = await self._subscription_service.get_client_subscriptions(client.id)
                active_subscriptions = [s for s in subscriptions if s.status.value == 'active']
                
                if active_subscriptions:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏—Ö –∑–∞–Ω—è—Ç–∏—è—Ö
                    await self._send_daily_schedule_reminder(client.id, tomorrow)
                    reminder_count += 1
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {reminder_count} –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∑–∞–Ω—è—Ç–∏—è—Ö")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
    
    async def _check_expiring_subscriptions(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã
            all_subscriptions = await self._subscription_service.get_all_subscriptions()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã, –∏—Å—Ç–µ–∫–∞—é—â–∏–µ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 3 –¥–Ω—è
            expiring_soon = []
            check_date = datetime.now().date() + timedelta(days=3)
            
            for subscription in all_subscriptions:
                if (subscription.status.value == 'active' and 
                    subscription.end_date <= check_date):
                    expiring_soon.append(subscription)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            for subscription in expiring_soon:
                await self._send_subscription_expiry_reminder(subscription.id)
            
            if expiring_soon:
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(expiring_soon)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞—Ö")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤: {e}")
    
    async def _send_weekly_stats(self) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–±–æ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞)")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    
    async def _send_single_class_reminder(
        self,
        client_id: str,
        class_date: datetime,
        class_type: str
    ) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∑–∞–Ω—è—Ç–∏–∏."""
        try:
            client = await self._client_service.get_client(client_id)
            
            # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            notification_data = {
                'client_id': client_id,
                'type': NotificationType.CLASS_REMINDER,
                'title': f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–Ω—è—Ç–∏–∏ {class_type}',
                'message': f'–ü—Ä–∏–≤–µ—Ç, {client.name}! üëã\n\n'
                          f'–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –≤–∞—à–µ–º –∑–∞–Ω—è—Ç–∏–∏:\n'
                          f'üßò‚Äç‚ôÄÔ∏è {class_type}\n'
                          f'üïê {class_date.strftime("%d.%m.%Y –≤ %H:%M")}\n\n'
                          f'–£–≤–∏–¥–∏–º—Å—è –Ω–∞ –∫–æ–≤—Ä–∏–∫–µ! üåü',
                'priority': NotificationPriority.HIGH,
                'metadata': {
                    'class_date': class_date.isoformat(),
                    'class_type': class_type
                }
            }
            
            notification_id = await self._notification_service.create_notification(notification_data)
            await self._notification_service.send_notification(notification_id)
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–Ω—è—Ç–∏–∏ –∫–ª–∏–µ–Ω—Ç—É {client_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–Ω—è—Ç–∏–∏: {e}")
    
    async def _send_subscription_expiry_reminder(self, subscription_id: str) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞."""
        try:
            subscription = await self._subscription_service.get_subscription(subscription_id)
            client = await self._client_service.get_client(subscription.client_id)
            
            remaining_classes = subscription.total_classes - subscription.used_classes
            
            notification_data = {
                'client_id': subscription.client_id,
                'type': NotificationType.SUBSCRIPTION_EXPIRING,
                'title': '–í–∞—à –∞–±–æ–Ω–µ–º–µ–Ω—Ç —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç',
                'message': f'–ü—Ä–∏–≤–µ—Ç, {client.name}! üëã\n\n'
                          f'–í–∞—à –∞–±–æ–Ω–µ–º–µ–Ω—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç {subscription.end_date.strftime("%d.%m.%Y")}\n'
                          f'–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–Ω—è—Ç–∏–π: {remaining_classes}\n\n'
                          f'–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É! üßò‚Äç‚ôÄÔ∏è\n\n'
                          f'–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏: /contact',
                'priority': NotificationPriority.HIGH,
                'metadata': {
                    'subscription_id': subscription_id,
                    'expiry_date': subscription.end_date.isoformat(),
                    'remaining_classes': remaining_classes
                }
            }
            
            notification_id = await self._notification_service.create_notification(notification_data)
            await self._notification_service.send_notification(notification_id)
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ {subscription_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: {e}")
    
    async def _send_daily_schedule_reminder(self, client_id: str, date: datetime) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏."""
        try:
            client = await self._client_service.get_client(client_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            weekday = date.weekday()
            schedule_text = self._get_schedule_for_day(weekday)
            
            notification_data = {
                'client_id': client_id,
                'type': NotificationType.GENERAL_INFO,
                'title': f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {date.strftime("%d.%m.%Y")}',
                'message': f'–ü—Ä–∏–≤–µ—Ç, {client.name}! üëã\n\n'
                          f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n\n'
                          f'{schedule_text}\n\n'
                          f'–ñ–¥–µ–º –≤–∞—Å –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ! üßò‚Äç‚ôÄÔ∏è',
                'priority': NotificationPriority.NORMAL,
                'metadata': {
                    'schedule_date': date.isoformat(),
                    'weekday': weekday
                }
            }
            
            notification_id = await self._notification_service.create_notification(notification_data)
            await self._notification_service.send_notification(notification_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
    
    def _get_schedule_for_day(self, weekday: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏."""
        schedules = {
            0: "üåÖ 08:00 - –•–∞—Ç—Ö–∞-–π–æ–≥–∞ (–Ω–∞—á–∏–Ω–∞—é—â–∏–µ)\nüåü 19:00 - –í–∏–Ω—å—è—Å–∞-—Ñ–ª–æ—É (—Å—Ä–µ–¥–Ω–∏–π)\nüåô 20:45 - –ô–æ–≥–∞-–Ω–∏–¥—Ä–∞",
            1: "üåÖ 07:30 - –£—Ç—Ä–µ–Ω–Ω—è—è –ø—Ä–∞–∫—Ç–∏–∫–∞\nüåü 18:30 - –•–∞—Ç—Ö–∞-–π–æ–≥–∞ (—Å—Ä–µ–¥–Ω–∏–π)\nüåô 20:15 - –ò–Ω—å-–π–æ–≥–∞",
            2: "üåÖ 08:00 - –ê—à—Ç–∞–Ω–≥–∞-–π–æ–≥–∞ (–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π)\nüåü 19:00 - –•–∞—Ç—Ö–∞-–π–æ–≥–∞ (–Ω–∞—á–∏–Ω–∞—é—â–∏–µ)\nüåô 20:45 - –ú–µ–¥–∏—Ç–∞—Ü–∏—è",
            3: "üåÖ 07:30 - –í–∏–Ω—å—è—Å–∞-—Ñ–ª–æ—É (—Å—Ä–µ–¥–Ω–∏–π)\nüåü 18:30 - –•–∞—Ç—Ö–∞-–π–æ–≥–∞ (–≤—Å–µ —É—Ä–æ–≤–Ω–∏)\nüåô 20:15 - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ–ª—å–Ω–∞—è –π–æ–≥–∞",
            4: "üåÖ 08:00 - –•–∞—Ç—Ö–∞-–π–æ–≥–∞ (–Ω–∞—á–∏–Ω–∞—é—â–∏–µ)\nüåü 19:00 - –í–∏–Ω—å—è—Å–∞-—Ñ–ª–æ—É (—Å—Ä–µ–¥–Ω–∏–π)\nüåô 20:45 - –ô–æ–≥–∞-–Ω–∏–¥—Ä–∞",
            5: "üåÖ 09:00 - –£—Ç—Ä–µ–Ω–Ω—è—è –ø—Ä–∞–∫—Ç–∏–∫–∞\nüåü 11:00 - –°–µ–º–µ–π–Ω–∞—è –π–æ–≥–∞\nüåô 18:00 - –•–∞—Ç—Ö–∞-–π–æ–≥–∞ (–≤—Å–µ —É—Ä–æ–≤–Ω–∏)",
            6: "üåÖ 10:00 - –ú–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞\nüåü 12:00 - –ò–Ω—å-–π–æ–≥–∞\nüåô 18:00 - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ–ª—å–Ω–∞—è –π–æ–≥–∞"
        }
        
        return schedules.get(weekday, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è")
    
    async def _process_completed_classes(self) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –¥–ª—è post-class –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏.
        
        –≠—Ç–∞ –∑–∞–¥–∞—á–∞ –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å PostClassService –∫–æ–≥–¥–∞ –æ–Ω –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ main.py
        """
        try:
            logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π...")
            
            # TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å PostClassService
            # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            logger.info("Post-class –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π: {e}") 