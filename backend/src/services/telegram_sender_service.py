"""
üì± –°–µ—Ä–≤–∏—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏–π

–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram Bot API.
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å NotificationService –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.
"""

import logging
from typing import Optional, Dict, Any
from telegram import Bot
from telegram.error import TelegramError

from ..models.client import Client
from ..models.notification import Notification
from ..config.settings import settings

logger = logging.getLogger(__name__)


class TelegramSenderService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram.
    
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
    - –û—Ç–ø—Ä–∞–≤–∫—É —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    - –û–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ Telegram API
    - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–æ–∫
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏–π."""
        self._bot: Optional[Bot] = None
        self._is_enabled = False
        
        # –†–∞–∑—Ä–µ—à–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¢–û–õ–¨–ö–û –≤ production.
        if settings.environment != "production":
            logger.info("TelegramSenderService –∑–∞–ø—É—â–µ–Ω –≤ –Ω–µ–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∞")
            return

        # Production: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω
        telegram_config = settings.get_telegram_config()
        if telegram_config.bot_token and telegram_config.bot_token != "fake_token_for_tests":
            try:
                self._bot = Bot(token=telegram_config.bot_token)
                self._is_enabled = True
                logger.info("TelegramSenderService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ä–µ–∞–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telegram Bot: {e}")
                self._is_enabled = False
        else:
            logger.info("TelegramSenderService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –±–µ–∑ —Ä–∞–±–æ—á–µ–≥–æ —Ç–æ–∫–µ–Ω–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∞")
            self._is_enabled = False
    
    async def send_notification_to_client(
        self, 
        client: Client, 
        notification: Notification
    ) -> tuple[bool, Optional[int], Optional[str]]:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É —á–µ—Ä–µ–∑ Telegram.
        
        Args:
            client: –ö–ª–∏–µ–Ω—Ç-–ø–æ–ª—É—á–∞—Ç–µ–ª—å
            notification: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (—É—Å–ø–µ—Ö, message_id, –æ—à–∏–±–∫–∞)
        """
        if not self._is_enabled:
            logger.info(f"Telegram –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞, –∏–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {notification.id}")
            return True, None, None
        
        if not client.telegram_id:
            error_msg = f"–£ –∫–ª–∏–µ–Ω—Ç–∞ {client.id} –Ω–µ—Ç Telegram ID"
            logger.warning(error_msg)
            return False, None, error_msg
        
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            formatted_message = self._format_notification_message(notification)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = await self._bot.send_message(
                chat_id=client.telegram_id,
                text=formatted_message,
                parse_mode='Markdown'
            )
            
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {notification.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É {client.id} (message_id: {message.message_id})")
            return True, message.message_id, None
            
        except TelegramError as e:
            error_msg = f"–û—à–∏–±–∫–∞ Telegram API: {e}"
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {notification.id}: {error_msg}")
            return False, None, error_msg
            
        except Exception as e:
            error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {notification.id}: {error_msg}")
            return False, None, error_msg
    
    async def send_custom_message(
        self, 
        telegram_id: int, 
        message: str,
        parse_mode: str = 'Markdown'
    ) -> tuple[bool, Optional[int], Optional[str]]:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ Telegram ID.
        
        Args:
            telegram_id: Telegram ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ (Markdown, HTML)
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (—É—Å–ø–µ—Ö, message_id, –æ—à–∏–±–∫–∞)
        """
        if not self._is_enabled:
            logger.info(f"Telegram –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞, –∏–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {telegram_id}")
            return True, None, None
        
        try:
            sent_message = await self._bot.send_message(
                chat_id=telegram_id,
                text=message,
                parse_mode=parse_mode
            )
            
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {telegram_id} (message_id: {sent_message.message_id})")
            return True, sent_message.message_id, None
            
        except TelegramError as e:
            error_msg = f"–û—à–∏–±–∫–∞ Telegram API: {e}"
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ {telegram_id}: {error_msg}")
            return False, None, error_msg
            
        except Exception as e:
            error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {telegram_id}: {error_msg}")
            return False, None, error_msg
    
    def _format_notification_message(self, notification: Notification) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram.
        
        Args:
            notification: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        # –ë–∞–∑–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        message_parts = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        title_emoji = self._get_emoji_for_notification_type(notification.type)
        message_parts.append(f"{title_emoji} **{notification.title}**")
        
        # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_parts.append("")
        message_parts.append(notification.message)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        if notification.metadata:
            additional_info = self._format_metadata(notification.metadata)
            if additional_info:
                message_parts.append("")
                message_parts.append(additional_info)
        
        # –ü–æ–¥–ø–∏—Å—å —Å—Ç—É–¥–∏–∏
        message_parts.append("")
        message_parts.append("---")
        message_parts.append("üßò‚Äç‚ôÄÔ∏è *Practiti - –ô–æ–≥–∞ –°—Ç—É–¥–∏—è*")
        
        return "\n".join(message_parts)
    
    def _get_emoji_for_notification_type(self, notification_type) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
        emoji_map = {
            'class_reminder': '‚è∞',
            'subscription_expiry': '‚ö†Ô∏è',
            'schedule_reminder': 'üìÖ',
            'welcome': 'üåü',
            'registration_complete': '‚úÖ',
            'subscription_purchased': 'üéâ',
            'general_info': '‚ÑπÔ∏è',
            'promotion': 'üéÅ',
            'class_cancelled': '‚ùå',
            'schedule_change': 'üîÑ'
        }
        
        return emoji_map.get(notification_type.value if hasattr(notification_type, 'value') else str(notification_type), '‚ÑπÔ∏è')
    
    def _format_metadata(self, metadata: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
        
        Args:
            metadata: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        """
        formatted_parts = []
        
        # –î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è
        if 'class_date' in metadata:
            try:
                from datetime import datetime
                class_date = datetime.fromisoformat(metadata['class_date'])
                formatted_parts.append(f"üìÖ –î–∞—Ç–∞: {class_date.strftime('%d.%m.%Y –≤ %H:%M')}")
            except:
                pass
        
        # –¢–∏–ø –∑–∞–Ω—è—Ç–∏—è
        if 'class_type' in metadata:
            formatted_parts.append(f"üßò‚Äç‚ôÄÔ∏è –¢–∏–ø: {metadata['class_type']}")
        
        # –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
        if 'expiry_date' in metadata:
            try:
                from datetime import datetime
                expiry_date = datetime.fromisoformat(metadata['expiry_date'])
                formatted_parts.append(f"üìÖ –ò—Å—Ç–µ–∫–∞–µ—Ç: {expiry_date.strftime('%d.%m.%Y')}")
            except:
                pass
        
        # –û—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–Ω—è—Ç–∏—è
        if 'remaining_classes' in metadata:
            formatted_parts.append(f"üé´ –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–Ω—è—Ç–∏–π: {metadata['remaining_classes']}")
        
        # –¶–µ–Ω–∞
        if 'price' in metadata:
            formatted_parts.append(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {metadata['price']} ‚ÇΩ")
        
        return "\n".join(formatted_parts)
    
    def is_enabled(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Telegram."""
        return self._is_enabled
    
    async def test_connection(self) -> tuple[bool, Optional[str]]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API.
        
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (—É—Å–ø–µ—Ö, –æ—à–∏–±–∫–∞)
        """
        if not self._is_enabled:
            return False, "Telegram –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞"
        
        try:
            bot_info = await self._bot.get_me()
            logger.info(f"–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API —É—Å–ø–µ—à–Ω–æ. Bot: @{bot_info.username}")
            return True, None
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API: {e}"
            logger.error(error_msg)
            return False, error_msg 