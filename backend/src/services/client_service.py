"""
üë§ ClientService - –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏

–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ CyberKitty Practiti.
–ü—Ä–∏–Ω—Ü–∏–ø: –ø—Ä–æ—Å—Ç–æ—Ç–∞ –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ.
"""

import logging
from typing import List, Optional

from ..models.client import Client, ClientCreateData, ClientUpdateData, ClientStatus
from ..repositories.protocols import ClientRepositoryProtocol
from ..utils.exceptions import BusinessLogicError, ValidationError
from .protocols.client_service import ClientServiceProtocol

logger = logging.getLogger(__name__)


class ClientService(ClientServiceProtocol):
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏.
    
    –†–µ–∞–ª–∏–∑—É–µ—Ç –≤—Å—é –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º–∏:
    - –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
    - –í–∞–ª–∏–¥–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª
    - –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞–º–∏
    """
    
    def __init__(self, client_repository: ClientRepositoryProtocol):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞.
        
        Args:
            client_repository: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
        """
        self._repository = client_repository
        logger.info("ClientService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def create_client(self, data: ClientCreateData) -> Client:
        """
        –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
        
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ Telegram ID.
        """
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞: {data.name}, {data.phone}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        existing_phone = await self._repository.get_client_by_phone(data.phone)
        if existing_phone:
            logger.warning(f"–ö–ª–∏–µ–Ω—Ç —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º {data.phone} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            raise BusinessLogicError(f"–ö–ª–∏–µ–Ω—Ç —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º {data.phone} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å Telegram ID
        if data.telegram_id is not None:
            existing_telegram = await self._repository.get_client_by_telegram_id(data.telegram_id)
            if existing_telegram:
                logger.warning(f"–ö–ª–∏–µ–Ω—Ç —Å Telegram ID {data.telegram_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                raise BusinessLogicError("–ö–ª–∏–µ–Ω—Ç —Å –¥–∞–Ω–Ω—ã–º Telegram –∞–∫–∫–∞—É–Ω—Ç–æ–º —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        saved_client = await self._repository.save_client(data)
        
        logger.info(f"–ö–ª–∏–µ–Ω—Ç {saved_client.name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å ID: {saved_client.id}")
        return saved_client
    
    async def get_client(self, client_id: str) -> Client:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID.
        """
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID: {client_id}")
        
        if not client_id:
            raise ValidationError("ID –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        client = await self._repository.get_client_by_id(client_id)
        if not client:
            logger.warning(f"–ö–ª–∏–µ–Ω—Ç —Å ID {client_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            raise BusinessLogicError(f"–ö–ª–∏–µ–Ω—Ç —Å ID {client_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        logger.debug(f"–ö–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω: {client.name}")
        return client
    
    async def get_client_by_telegram_id(self, telegram_id: int) -> Optional[Client]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ Telegram ID.
        """
        logger.debug(f"–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ Telegram ID: {telegram_id}")
        
        if not telegram_id:
            raise ValidationError("Telegram ID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        client = await self._repository.get_client_by_telegram_id(telegram_id)
        
        if client:
            logger.debug(f"–ö–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –ø–æ Telegram ID: {client.name}")
        else:
            logger.debug(f"–ö–ª–∏–µ–Ω—Ç —Å Telegram ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return client
    
    async def get_client_by_phone(self, phone: str) -> Optional[Client]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
        """
        logger.debug(f"–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: {phone}")
        
        if not phone:
            raise ValidationError("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –∏–∑ –º–æ–¥–µ–ª–∏ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
            normalized_phone = Client.validate_phone(phone)
        except ValueError as e:
            raise ValidationError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")
        
        client = await self._repository.get_client_by_phone(normalized_phone)
        
        if client:
            logger.debug(f"–ö–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: {client.name}")
        else:
            logger.debug(f"–ö–ª–∏–µ–Ω—Ç —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º {phone} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return client
    
    async def search_clients(self, query: str) -> List[Client]:
        """
        –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É.
        """
        logger.debug(f"–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'")
        
        if not query or len(query.strip()) < 2:
            raise ValidationError("–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞")
        
        query = query.strip()
        clients = await self._repository.search_clients(query)
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(clients)} –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'")
        return clients
    
    async def update_client(self, client_id: str, data: ClientUpdateData) -> Client:
        """
        –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞.
        """
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ ID: {client_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        existing_client = await self.get_client(client_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –µ—Å–ª–∏ –æ–Ω –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è
        if data.phone and data.phone != existing_client.phone:
            existing_phone = await self._repository.get_client_by_phone(data.phone)
            if existing_phone:
                logger.warning(f"–¢–µ–ª–µ—Ñ–æ–Ω {data.phone} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –∫–ª–∏–µ–Ω—Ç–æ–º")
                raise BusinessLogicError(f"–¢–µ–ª–µ—Ñ–æ–Ω {data.phone} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –∫–ª–∏–µ–Ω—Ç–æ–º")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        saved_client = await self._repository.update_client(client_id, data)
        
        if not saved_client:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ {client_id}")
            raise BusinessLogicError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ {client_id}")
        
        logger.info(f"–ö–ª–∏–µ–Ω—Ç {client_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
        return saved_client
    
    async def get_all_clients(self) -> List[Client]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.
        """
        logger.debug("–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
        
        clients = await self._repository.list_clients()
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(clients)} –∫–ª–∏–µ–Ω—Ç–æ–≤")
        return clients
    
    async def delete_client(self, client_id: str) -> bool:
        """
        –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ - –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞).
        """
        logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ ID: {client_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
        client = await self.get_client(client_id)
        
        # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π
        update_data = ClientUpdateData(status=ClientStatus.INACTIVE)
        await self.update_client(client_id, update_data)
        
        logger.info(f"–ö–ª–∏–µ–Ω—Ç {client.name} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π")
        return True
    
    async def activate_client(self, client_id: str) -> Client:
        """
        –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞.
        """
        logger.info(f"–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ ID: {client_id}")
        
        update_data = ClientUpdateData(status=ClientStatus.ACTIVE)
        client = await self.update_client(client_id, update_data)
        
        logger.info(f"–ö–ª–∏–µ–Ω—Ç {client.name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        return client
    
    async def deactivate_client(self, client_id: str) -> Client:
        """
        –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞.
        """
        logger.info(f"–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ ID: {client_id}")
        
        update_data = ClientUpdateData(status=ClientStatus.INACTIVE)
        client = await self.update_client(client_id, update_data)
        
        logger.info(f"–ö–ª–∏–µ–Ω—Ç {client.name} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        return client
    
    async def get_active_clients(self) -> List[Client]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.
        
        –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã.
        """
        logger.debug("–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
        
        all_clients = await self.get_all_clients()
        active_clients = [c for c in all_clients if c.status == ClientStatus.ACTIVE]
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(active_clients)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
        return active_clients
    
    async def get_clients_by_status(self, status: ClientStatus) -> List[Client]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É.
        
        Args:
            status: –°—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
        """
        logger.debug(f"–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {status}")
        
        all_clients = await self.get_all_clients()
        filtered_clients = [c for c in all_clients if c.status == status]
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(filtered_clients)} –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {status}")
        return filtered_clients 