"""
üé´ –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞–º–∏ Practiti

–ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –π–æ–≥–∞-—Å—Ç—É–¥–∏–∏.
"""

from datetime import date, datetime, timedelta
from typing import List, Optional

from ..models.subscription import (
    Subscription, SubscriptionCreateData, SubscriptionUpdateData, 
    SubscriptionType, SubscriptionStatus
)
from ..repositories.protocols.subscription_repository import SubscriptionRepositoryProtocol
from ..services.protocols.subscription_service import SubscriptionServiceProtocol
from ..utils.exceptions import BusinessLogicError
from ..utils.logger import get_logger

logger = get_logger(__name__)


class SubscriptionService(SubscriptionServiceProtocol):
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤.
    
    –†–µ–∞–ª–∏–∑—É–µ—Ç –≤—Å—é –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É —Ä–∞–±–æ—Ç—ã —Å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞–º–∏.
    """
    
    def __init__(self, subscription_repository: SubscriptionRepositoryProtocol):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞.
        
        Args:
            subscription_repository: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
        """
        self._repository = subscription_repository
        logger.info("SubscriptionService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def create_subscription(self, data: SubscriptionCreateData) -> Subscription:
        """
        –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç.
        
        Args:
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
            
        Returns:
            –°–æ–∑–¥–∞–Ω–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç
            
        Raises:
            BusinessLogicError: –ü—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª
        """
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ {data.type.value} –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {data.client_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ —É –∫–ª–∏–µ–Ω—Ç–∞
        active_subscription = await self.get_active_subscription(data.client_id)
        if active_subscription:
            raise BusinessLogicError(
                f"–£ –∫–ª–∏–µ–Ω—Ç–∞ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç: {active_subscription.type.value}"
            )
        
        # –°–æ–∑–¥–∞–µ–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        subscription = await self._repository.save_subscription(data)
        
        logger.info(f"–ê–±–æ–Ω–µ–º–µ–Ω—Ç {subscription.id} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        return subscription
    
    async def get_subscription(self, subscription_id: str) -> Subscription:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç –ø–æ ID.
        
        Args:
            subscription_id: ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
            
        Returns:
            –ê–±–æ–Ω–µ–º–µ–Ω—Ç
            
        Raises:
            BusinessLogicError: –ï—Å–ª–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        subscription = await self._repository.get_subscription_by_id(subscription_id)
        if not subscription:
            raise BusinessLogicError(f"–ê–±–æ–Ω–µ–º–µ–Ω—Ç —Å ID {subscription_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return subscription
    
    async def get_client_subscriptions(self, client_id: str) -> List[Subscription]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞.
        
        Args:
            client_id: ID –∫–ª–∏–µ–Ω—Ç–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞
        """
        return await self._repository.get_subscriptions_by_client_id(client_id)
    
    async def get_active_subscription(self, client_id: str) -> Optional[Subscription]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç –∫–ª–∏–µ–Ω—Ç–∞.
        
        Args:
            client_id: ID –∫–ª–∏–µ–Ω—Ç–∞
            
        Returns:
            –ê–∫—Ç–∏–≤–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç –∏–ª–∏ None
        """
        active_subscriptions = await self._repository.get_active_subscriptions_by_client_id(client_id)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–µ–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Å —É—á–µ—Ç–æ–º –¥–∞—Ç –∏ –∑–∞–Ω—è—Ç–∏–π)
        truly_active = [sub for sub in active_subscriptions if sub.is_active]
        
        if not truly_active:
            return None
        
        # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö (–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π
        return max(truly_active, key=lambda x: x.created_at)
    
    async def use_class(self, subscription_id: str) -> Subscription:
        """
        –°–ø–∏—Å–∞—Ç—å –æ–¥–Ω–æ –∑–∞–Ω—è—Ç–∏–µ —Å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞.
        
        Args:
            subscription_id: ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
            
        Returns:
            –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç
            
        Raises:
            BusinessLogicError: –ï—Å–ª–∏ –Ω–µ–ª—å–∑—è —Å–ø–∏—Å–∞—Ç—å –∑–∞–Ω—è—Ç–∏–µ
        """
        subscription = await self.get_subscription(subscription_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Å–ø–∏—Å–∞—Ç—å –∑–∞–Ω—è—Ç–∏–µ
        if not subscription.is_active:
            raise BusinessLogicError(
                f"–ê–±–æ–Ω–µ–º–µ–Ω—Ç {subscription_id} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω (—Å—Ç–∞—Ç—É—Å: {subscription.status.value})"
            )
        
        if subscription.remaining_classes <= 0:
            raise BusinessLogicError(
                f"–ù–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ {subscription_id} –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∑–∞–Ω—è—Ç–∏—è"
            )
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–Ω—è—Ç–∏–µ
        new_used_classes = subscription.used_classes + 1
        update_data = SubscriptionUpdateData(used_classes=new_used_classes)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—á–µ—Ä–ø–∞–ª—Å—è –ª–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç
        if subscription.type != SubscriptionType.UNLIMITED and new_used_classes >= subscription.total_classes:
            update_data.status = SubscriptionStatus.EXHAUSTED
        
        updated_subscription = await self._repository.update_subscription(subscription_id, update_data)
        if not updated_subscription:
            raise BusinessLogicError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç {subscription_id}")
        
        logger.info(f"–°–ø–∏—Å–∞–Ω–æ –∑–∞–Ω—è—Ç–∏–µ —Å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ {subscription_id}. –û—Å—Ç–∞–ª–æ—Å—å: {updated_subscription.remaining_classes}")
        return updated_subscription
    
    async def confirm_payment(self, subscription_id: str) -> Subscription:
        """
        –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞.
        
        Args:
            subscription_id: ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
            
        Returns:
            –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç
        """
        subscription = await self.get_subscription(subscription_id)
        
        if subscription.payment_confirmed:
            logger.warning(f"–û–ø–ª–∞—Ç–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ {subscription_id} —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
            return subscription
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–ø–ª–∞—Ç—É –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç
        update_data = SubscriptionUpdateData(
            payment_confirmed=True,
            status=SubscriptionStatus.ACTIVE
        )
        
        updated_subscription = await self._repository.update_subscription(subscription_id, update_data)
        if not updated_subscription:
            raise BusinessLogicError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç {subscription_id}")
        
        logger.info(f"–û–ø–ª–∞—Ç–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ {subscription_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
        return updated_subscription
    
    async def extend_subscription(self, subscription_id: str, additional_days: int) -> Subscription:
        """
        –ü—Ä–æ–¥–ª–∏—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞.
        
        Args:
            subscription_id: ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
            additional_days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
            
        Returns:
            –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç
        """
        if additional_days <= 0:
            raise BusinessLogicError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
        
        subscription = await self.get_subscription(subscription_id)
        
        # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
        new_end_date = subscription.end_date + timedelta(days=additional_days)
        update_data = SubscriptionUpdateData(end_date=new_end_date)
        
        # –ï—Å–ª–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç –±—ã–ª –∏—Å—Ç–µ–∫—à–∏–º, –¥–µ–ª–∞–µ–º –µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã–º
        if subscription.status == SubscriptionStatus.EXPIRED:
            update_data.status = SubscriptionStatus.ACTIVE
        
        updated_subscription = await self._repository.update_subscription(subscription_id, update_data)
        if not updated_subscription:
            raise BusinessLogicError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç {subscription_id}")
        
        logger.info(f"–ê–±–æ–Ω–µ–º–µ–Ω—Ç {subscription_id} –ø—Ä–æ–¥–ª–µ–Ω –Ω–∞ {additional_days} –¥–Ω–µ–π –¥–æ {new_end_date}")
        return updated_subscription
    
    async def suspend_subscription(self, subscription_id: str) -> Subscription:
        """
        –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç.
        
        Args:
            subscription_id: ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
            
        Returns:
            –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç
        """
        subscription = await self.get_subscription(subscription_id)
        
        if subscription.status == SubscriptionStatus.SUSPENDED:
            logger.warning(f"–ê–±–æ–Ω–µ–º–µ–Ω—Ç {subscription_id} —É–∂–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return subscription
        
        if subscription.status not in [SubscriptionStatus.ACTIVE, SubscriptionStatus.PENDING]:
            raise BusinessLogicError(
                f"–ù–µ–ª—å–∑—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {subscription.status.value}"
            )
        
        update_data = SubscriptionUpdateData(status=SubscriptionStatus.SUSPENDED)
        updated_subscription = await self._repository.update_subscription(subscription_id, update_data)
        
        if not updated_subscription:
            raise BusinessLogicError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç {subscription_id}")
        
        logger.info(f"–ê–±–æ–Ω–µ–º–µ–Ω—Ç {subscription_id} –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return updated_subscription
    
    async def resume_subscription(self, subscription_id: str) -> Subscription:
        """
        –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç.
        
        Args:
            subscription_id: ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
            
        Returns:
            –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç
        """
        subscription = await self.get_subscription(subscription_id)
        
        if subscription.status != SubscriptionStatus.SUSPENDED:
            raise BusinessLogicError(
                f"–ú–æ–∂–Ω–æ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {subscription.status.value}"
            )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        new_status = SubscriptionStatus.ACTIVE if subscription.payment_confirmed else SubscriptionStatus.PENDING
        
        update_data = SubscriptionUpdateData(status=new_status)
        updated_subscription = await self._repository.update_subscription(subscription_id, update_data)
        
        if not updated_subscription:
            raise BusinessLogicError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç {subscription_id}")
        
        logger.info(f"–ê–±–æ–Ω–µ–º–µ–Ω—Ç {subscription_id} –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {new_status.value}")
        return updated_subscription
    
    async def update_subscription_status(self) -> int:
        """
        –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã –≤—Å–µ—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ (expired, exhausted).
        
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏—Ö —Å—Ç–∞—Ç—É—Å—ã —Å–æ–≥–ª–∞—Å–Ω–æ
        —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–Ω—è—Ç–∏–π.
        
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
        """
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã
        active_subscriptions = await self._repository.get_subscriptions_by_status(SubscriptionStatus.ACTIVE)
        updated_count = 0
        
        today = date.today()
        
        for subscription in active_subscriptions:
            update_data = None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ –ø–æ –¥–∞—Ç–µ
            if subscription.is_expired:
                update_data = SubscriptionUpdateData(status=SubscriptionStatus.EXPIRED)
                logger.info(f"–ê–±–æ–Ω–µ–º–µ–Ω—Ç {subscription.id} –∏—Å—Ç–µ–∫ –ø–æ –¥–∞—Ç–µ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—á–µ—Ä–ø–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π
            elif subscription.is_exhausted:
                update_data = SubscriptionUpdateData(status=SubscriptionStatus.EXHAUSTED)
                logger.info(f"–ê–±–æ–Ω–µ–º–µ–Ω—Ç {subscription.id} –∏—Å—á–µ—Ä–ø–∞–Ω")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if update_data:
                await self._repository.update_subscription(subscription.id, update_data)
                updated_count += 1
        
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç—É—Å–æ–≤ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤: {updated_count}")
        return updated_count
    
    async def get_subscription_statistics(self, client_id: str) -> dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞–º –∫–ª–∏–µ–Ω—Ç–∞.
        
        Args:
            client_id: ID –∫–ª–∏–µ–Ω—Ç–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        subscriptions = await self.get_client_subscriptions(client_id)
        
        if not subscriptions:
            return {
                "total_subscriptions": 0,
                "active_subscriptions": 0,
                "total_classes_bought": 0,
                "total_classes_used": 0,
                "total_money_spent": 0,
                "favorite_subscription_type": None,
                "current_subscription": None
            }
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_subscriptions = len(subscriptions)
        active_subscriptions = len([s for s in subscriptions if s.is_active])
        total_classes_bought = sum(s.total_classes for s in subscriptions if s.type != SubscriptionType.UNLIMITED)
        total_classes_used = sum(s.used_classes for s in subscriptions)
        total_money_spent = sum(s.price for s in subscriptions if s.payment_confirmed)
        
        # –ù–∞—Ö–æ–¥–∏–º –ª—é–±–∏–º—ã–π —Ç–∏–ø –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
        type_counts = {}
        for subscription in subscriptions:
            type_counts[subscription.type] = type_counts.get(subscription.type, 0) + 1
        
        favorite_type = max(type_counts.items(), key=lambda x: x[1])[0] if type_counts else None
        
        # –¢–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç
        current_subscription = await self.get_active_subscription(client_id)
        
        return {
            "total_subscriptions": total_subscriptions,
            "active_subscriptions": active_subscriptions,
            "total_classes_bought": total_classes_bought,
            "total_classes_used": total_classes_used,
            "total_money_spent": total_money_spent,
            "favorite_subscription_type": favorite_type.value if favorite_type else None,
            "current_subscription": {
                "id": current_subscription.id,
                "type": current_subscription.type.value,
                "remaining_classes": current_subscription.remaining_classes,
                "end_date": current_subscription.end_date.isoformat()
                         } if current_subscription else None
        }
    
    def get_subscription_price(self, subscription_type: SubscriptionType) -> int:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –ø–æ —Ç–∏–ø—É.
        
        Args:
            subscription_type: –¢–∏–ø –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
            
        Returns:
            –¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö
        """
        prices = {
            SubscriptionType.TRIAL: 500,
            SubscriptionType.SINGLE: 1100,
            SubscriptionType.PACKAGE_4: 3200,
            SubscriptionType.PACKAGE_8: 7000,
            SubscriptionType.PACKAGE_12: 9000,
            SubscriptionType.UNLIMITED: 10800,
        }
        return prices[subscription_type]
    
    def calculate_subscription_end_date(self, subscription_type: SubscriptionType, start_date: date) -> date:
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞.
        
        Args:
            subscription_type: –¢–∏–ø –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
            start_date: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞
            
        Returns:
            –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è
        """
        if subscription_type == SubscriptionType.TRIAL:
            return start_date + timedelta(days=14)  # –ü—Ä–æ–±–Ω—ã–π - 14 –¥–Ω–µ–π
        elif subscription_type == SubscriptionType.SINGLE:
            return start_date + timedelta(days=1)   # –†–∞–∑–æ–≤–æ–µ - 1 –¥–µ–Ω—å
        else:
            return start_date + timedelta(days=30)  # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ - 30 –¥–Ω–µ–π
    
    def get_subscription_classes_count(self, subscription_type: SubscriptionType) -> int:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç–∏–π –ø–æ —Ç–∏–ø—É –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞.
        
        Args:
            subscription_type: –¢–∏–ø –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç–∏–π
        """
        classes = {
            SubscriptionType.TRIAL: 1,
            SubscriptionType.SINGLE: 1,
            SubscriptionType.PACKAGE_4: 4,
            SubscriptionType.PACKAGE_8: 8,
            SubscriptionType.PACKAGE_12: 12,
            SubscriptionType.UNLIMITED: 999,  # –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π
        }
        return classes[subscription_type]
    
    def get_subscription_info(self, subscription_type: SubscriptionType) -> dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ –ø–æ —Ç–∏–ø—É.
        
        Args:
            subscription_type: –¢–∏–ø –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ
        """
        return {
            "type": subscription_type.value,
            "price": self.get_subscription_price(subscription_type),
            "classes": self.get_subscription_classes_count(subscription_type),
            "duration_days": self._get_subscription_duration_days(subscription_type),
            "description": self._get_subscription_description(subscription_type)
        }
    
    def _get_subscription_duration_days(self, subscription_type: SubscriptionType) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –≤ –¥–Ω—è—Ö."""
        if subscription_type == SubscriptionType.TRIAL:
            return 14
        elif subscription_type == SubscriptionType.SINGLE:
            return 1
        else:
            return 30
    
    def _get_subscription_description(self, subscription_type: SubscriptionType) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞."""
        descriptions = {
            SubscriptionType.TRIAL: "–ü—Ä–æ–±–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç - 1 –∑–∞–Ω—è—Ç–∏–µ –Ω–∞ 14 –¥–Ω–µ–π",
            SubscriptionType.SINGLE: "–†–∞–∑–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ",
            SubscriptionType.PACKAGE_4: "–ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ 4 –∑–∞–Ω—è—Ç–∏—è (30 –¥–Ω–µ–π)",
            SubscriptionType.PACKAGE_8: "–ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ 8 –∑–∞–Ω—è—Ç–∏–π (30 –¥–Ω–µ–π)",
            SubscriptionType.PACKAGE_12: "–ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ 12 –∑–∞–Ω—è—Ç–∏–π (30 –¥–Ω–µ–π)",
            SubscriptionType.UNLIMITED: "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç (30 –¥–Ω–µ–π)",
        }
        return descriptions[subscription_type] 