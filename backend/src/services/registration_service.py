"""
üìù –°–µ—Ä–≤–∏—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ CyberKitty Practiti

–£–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–º –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
"""

from typing import Dict, Optional
from ..models.registration import RegistrationData, RegistrationState, REGISTRATION_STEPS
from ..models.client import ClientCreateData
from ..services.protocols.client_service import ClientServiceProtocol
from ..utils.logger import get_logger
from ..utils.exceptions import ValidationError, BusinessLogicError

logger = get_logger(__name__)


class RegistrationService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ—à–∞–≥–æ–≤–æ–µ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö.
    """
    
    def __init__(self, client_service: ClientServiceProtocol):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
        
        Args:
            client_service: –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
        """
        self.client_service = client_service
        self._active_registrations: Dict[int, RegistrationData] = {}
        
        logger.info("RegistrationService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def start_registration(self, telegram_id: int, telegram_username: Optional[str] = None) -> RegistrationData:
        """
        –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            telegram_username: Telegram username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –î–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        """
        logger.info(f"–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        
        registration_data = RegistrationData(
            telegram_id=telegram_id,
            telegram_username=telegram_username,
            current_state=RegistrationState.WAITING_NAME
        )
        
        self._active_registrations[telegram_id] = registration_data
        
        logger.debug(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        return registration_data
    
    def get_registration(self, telegram_id: int) -> Optional[RegistrationData]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –î–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ None
        """
        return self._active_registrations.get(telegram_id)
    
    def is_registration_active(self, telegram_id: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            True –µ—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞
        """
        registration = self.get_registration(telegram_id)
        return registration is not None and registration.current_state != RegistrationState.COMPLETED
    
    def process_input(self, telegram_id: int, user_input: str) -> tuple[RegistrationData, bool]:
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ç–µ–∫—É—â–µ–º —à–∞–≥–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
        
        Args:
            telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_input: –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —à–∞–≥–∞)
            
        Raises:
            ValidationError: –ü—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –≤–≤–æ–¥–µ
            BusinessLogicError: –ü—Ä–∏ –æ—à–∏–±–∫–µ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
        """
        registration = self.get_registration(telegram_id)
        if not registration:
            raise BusinessLogicError("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ '{user_input}' –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è {registration.current_state}")
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /skip
            if user_input.strip().lower() == '/skip':
                return self._handle_skip(registration)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if registration.current_state == RegistrationState.WAITING_NAME:
                return self._process_name(registration, user_input)
            elif registration.current_state == RegistrationState.WAITING_PHONE:
                return self._process_phone(registration, user_input)
            elif registration.current_state == RegistrationState.WAITING_AGE:
                return self._process_age(registration, user_input)
            elif registration.current_state == RegistrationState.WAITING_YOGA_EXPERIENCE:
                return self._process_yoga_experience(registration, user_input)
            elif registration.current_state == RegistrationState.WAITING_INTENSITY:
                return self._process_intensity(registration, user_input)
            elif registration.current_state == RegistrationState.WAITING_TIME_PREFERENCE:
                return self._process_time_preference(registration, user_input)
            elif registration.current_state == RegistrationState.WAITING_INJURIES:
                return self._process_injuries(registration, user_input)
            elif registration.current_state == RegistrationState.WAITING_GOALS:
                return self._process_goals(registration, user_input)
            elif registration.current_state == RegistrationState.WAITING_HOW_FOUND:
                return self._process_how_found(registration, user_input)
            else:
                raise BusinessLogicError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {registration.current_state}")
                
        except ValidationError:
            # –í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            raise
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞: {e}")
            raise BusinessLogicError(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def _handle_skip(self, registration: RegistrationData) -> tuple[RegistrationData, bool]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /skip."""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –ø–æ–ª—è –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
        skippable_states = {
            RegistrationState.WAITING_AGE,
            RegistrationState.WAITING_INJURIES,
            RegistrationState.WAITING_GOALS,
            RegistrationState.WAITING_HOW_FOUND
        }
        
        if registration.current_state not in skippable_states:
            raise ValidationError("–≠—Ç–æ—Ç —à–∞–≥ –Ω–µ–ª—å–∑—è –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        next_state = self._get_next_state(registration.current_state)
        registration.current_state = next_state
        
        return registration, True
    
    def _process_name(self, registration: RegistrationData, name: str) -> tuple[RegistrationData, bool]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –∏–º–µ–Ω–∏."""
        name = name.strip()
        if len(name) < 2:
            raise ValidationError("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞")
        if len(name) > 50:
            raise ValidationError("–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤")
        
        registration.name = name
        registration.current_state = RegistrationState.WAITING_PHONE
        return registration, True
    
    def _process_phone(self, registration: RegistrationData, phone: str) -> tuple[RegistrationData, bool]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –∏–∑ –º–æ–¥–µ–ª–∏
            temp_data = RegistrationData(telegram_id=registration.telegram_id, phone=phone)
            registration.phone = temp_data.phone
            registration.current_state = RegistrationState.WAITING_AGE
            return registration, True
        except ValueError as e:
            raise ValidationError(str(e))
    
    def _process_age(self, registration: RegistrationData, age_str: str) -> tuple[RegistrationData, bool]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –≤–æ–∑—Ä–∞—Å—Ç–∞."""
        try:
            age = int(age_str.strip())
            temp_data = RegistrationData(telegram_id=registration.telegram_id, age=age)
            registration.age = temp_data.age
            registration.current_state = RegistrationState.WAITING_YOGA_EXPERIENCE
            return registration, True
        except ValueError:
            raise ValidationError("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 16 –¥–æ 80")
    
    def _process_yoga_experience(self, registration: RegistrationData, experience: str) -> tuple[RegistrationData, bool]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –æ–ø—ã—Ç–∞ –π–æ–≥–∏."""
        experience_lower = experience.lower().strip()
        if "–¥–∞" in experience_lower or "–µ—Å—Ç—å" in experience_lower:
            registration.yoga_experience = True
        elif "–Ω–µ—Ç" in experience_lower or "–Ω–æ–≤–∏—á–æ–∫" in experience_lower:
            registration.yoga_experience = False
        else:
            raise ValidationError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–î–∞, –µ—Å—Ç—å –æ–ø—ã—Ç' –∏–ª–∏ '–ù–µ—Ç, —è –Ω–æ–≤–∏—á–æ–∫'")
        
        registration.current_state = RegistrationState.WAITING_INTENSITY
        return registration, True
    
    def _process_intensity(self, registration: RegistrationData, intensity: str) -> tuple[RegistrationData, bool]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏."""
        intensity_lower = intensity.lower().strip()
        valid_intensities = {
            "–Ω–∏–∑–∫–∞—è": "–Ω–∏–∑–∫–∞—è",
            "—Å—Ä–µ–¥–Ω—è—è": "—Å—Ä–µ–¥–Ω—è—è", 
            "–≤—ã—Å–æ–∫–∞—è": "–≤—ã—Å–æ–∫–∞—è",
            "–ª—é–±–∞—è": "–ª—é–±–∞—è"
        }
        
        for key, value in valid_intensities.items():
            if key in intensity_lower:
                registration.intensity_preference = value
                registration.current_state = RegistrationState.WAITING_TIME_PREFERENCE
                return registration, True
        
        raise ValidationError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ: –ù–∏–∑–∫–∞—è, –°—Ä–µ–¥–Ω—è—è, –í—ã—Å–æ–∫–∞—è –∏–ª–∏ –õ—é–±–∞—è")
    
    def _process_time_preference(self, registration: RegistrationData, time_pref: str) -> tuple[RegistrationData, bool]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω—è—Ç–∏–π."""
        time_lower = time_pref.lower().strip()
        
        if "—É—Ç—Ä" in time_lower:
            registration.time_preference = "—É—Ç—Ä–æ"
        elif "–¥–Ω" in time_lower:
            registration.time_preference = "–¥–µ–Ω—å"
        elif "–≤–µ—á" in time_lower:
            registration.time_preference = "–≤–µ—á–µ—Ä"
        elif "–ª—é–±" in time_lower:
            registration.time_preference = "–ª—é–±–æ–µ"
        else:
            raise ValidationError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ: –£—Ç—Ä–æ, –î–µ–Ω—å, –í–µ—á–µ—Ä –∏–ª–∏ –õ—é–±–æ–µ")
        
        registration.current_state = RegistrationState.WAITING_INJURIES
        return registration, True
    
    def _process_injuries(self, registration: RegistrationData, injuries: str) -> tuple[RegistrationData, bool]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ —Ç—Ä–∞–≤–º/–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π."""
        injuries = injuries.strip()
        if len(injuries) > 200:
            raise ValidationError("–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–≤–º –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 200 —Å–∏–º–≤–æ–ª–æ–≤")
        
        registration.injuries = injuries if injuries else None
        registration.current_state = RegistrationState.WAITING_GOALS
        return registration, True
    
    def _process_goals(self, registration: RegistrationData, goals: str) -> tuple[RegistrationData, bool]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ —Ü–µ–ª–µ–π."""
        goals = goals.strip()
        if len(goals) > 200:
            raise ValidationError("–û–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–µ–π –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 200 —Å–∏–º–≤–æ–ª–æ–≤")
        
        registration.goals = goals if goals else None
        registration.current_state = RegistrationState.WAITING_HOW_FOUND
        return registration, True
    
    def _process_how_found(self, registration: RegistrationData, how_found: str) -> tuple[RegistrationData, bool]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
        how_found = how_found.strip()
        if len(how_found) > 100:
            raise ValidationError("–û—Ç–≤–µ—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤")
        
        registration.how_found_us = how_found if how_found else None
        registration.current_state = RegistrationState.CONFIRMATION
        return registration, True
    
    def _get_next_state(self, current_state: RegistrationState) -> RegistrationState:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ."""
        state_order = [
            RegistrationState.WAITING_NAME,
            RegistrationState.WAITING_PHONE,
            RegistrationState.WAITING_AGE,
            RegistrationState.WAITING_YOGA_EXPERIENCE,
            RegistrationState.WAITING_INTENSITY,
            RegistrationState.WAITING_TIME_PREFERENCE,
            RegistrationState.WAITING_INJURIES,
            RegistrationState.WAITING_GOALS,
            RegistrationState.WAITING_HOW_FOUND,
            RegistrationState.CONFIRMATION
        ]
        
        try:
            current_index = state_order.index(current_state)
            if current_index < len(state_order) - 1:
                return state_order[current_index + 1]
            else:
                return RegistrationState.CONFIRMATION
        except ValueError:
            return RegistrationState.CONFIRMATION
    
    async def complete_registration(self, telegram_id: int) -> bool:
        """
        –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞.
        
        Args:
            telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            True –µ—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            
        Raises:
            BusinessLogicError: –ü—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        """
        registration = self.get_registration(telegram_id)
        if not registration:
            raise BusinessLogicError("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        if not registration.is_complete():
            raise BusinessLogicError("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –Ω–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
            client_data = ClientCreateData(
                name=registration.name,
                phone=registration.phone,
                telegram_id=registration.telegram_id,
                yoga_experience=registration.yoga_experience,
                intensity_preference=registration.intensity_preference,
                time_preference=registration.time_preference,
                age=registration.age,
                injuries=registration.injuries,
                goals=registration.goals,
                how_found_us=registration.how_found_us
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ ClientService
            client = await self.client_service.create_client(client_data)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
            try:
                from ..services.telegram_sender_service import TelegramSenderService
                from ..config.settings import settings as _settings

                if _settings.telegram_admin_chat_id:
                    sender = TelegramSenderService()
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    message = (
                        f"üå± –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ!\n"
                        f"–ò–º—è: {client.name}\n"
                        f"–¢–µ–ª–µ—Ñ–æ–Ω: {client.phone}\n"
                        f"–û–ø—ã—Ç –π–æ–≥–∏: {'–µ—Å—Ç—å' if client.yoga_experience else '–Ω–µ—Ç'}\n"
                        f"–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {client.intensity_preference}\n"
                        f"–í—Ä–µ–º—è: {client.time_preference}"
                    )
                    await sender.send_custom_message(int(_settings.telegram_admin_chat_id), message)
            except Exception as e:  # pragma: no cover
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
            
            # –ü–æ–º–µ—á–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
            registration.current_state = RegistrationState.COMPLETED
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
            del self._active_registrations[telegram_id]
            
            logger.info(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–æ–∑–¥–∞–Ω –∫–ª–∏–µ–Ω—Ç {client.id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
            raise BusinessLogicError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: {e}")
    
    def cancel_registration(self, telegram_id: int) -> bool:
        """
        –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            True –µ—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞
        """
        if telegram_id in self._active_registrations:
            del self._active_registrations[telegram_id]
            logger.info(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return True
        return False
    
    def clear_all_registrations(self) -> int:
        """
        –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏).
        
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∏—â–µ–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
        """
        count = len(self._active_registrations)
        self._active_registrations.clear()
        logger.info(f"–û—á–∏—â–µ–Ω–æ {count} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π")
        return count
    
    def get_current_step(self, telegram_id: int) -> Optional[dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —à–∞–≥–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
        
        Args:
            telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —à–∞–≥–µ –∏–ª–∏ None
        """
        registration = self.get_registration(telegram_id)
        if not registration:
            return None
        
        if registration.current_state in REGISTRATION_STEPS:
            step = REGISTRATION_STEPS[registration.current_state]
            return {
                "question": step.question,
                "help_text": step.help_text,
                "options": step.options,
                "state": registration.current_state.value
            }
        
        return None
 