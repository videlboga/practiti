"""
üì¢ –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ Practiti

–ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –π–æ–≥–∞-—Å—Ç—É–¥–∏–∏.
"""

from datetime import datetime, timedelta
from typing import List, Optional, Dict, Any

from ..models.notification import (
    Notification, NotificationCreateData, NotificationUpdateData, 
    NotificationType, NotificationStatus, NotificationPriority,
    NOTIFICATION_TEMPLATES
)
from ..repositories.protocols.notification_repository import NotificationRepositoryProtocol
from ..services.protocols.notification_service import NotificationServiceProtocol
from ..services.protocols.client_service import ClientServiceProtocol
from ..services.protocols.subscription_service import SubscriptionServiceProtocol
from ..utils.exceptions import BusinessLogicError
from ..utils.logger import get_logger

logger = get_logger(__name__)


class NotificationService(NotificationServiceProtocol):
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤.
    
    –†–µ–∞–ª–∏–∑—É–µ—Ç –≤—Å—é –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É —Ä–∞–±–æ—Ç—ã —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏.
    """
    
    def __init__(
        self, 
        notification_repository: NotificationRepositoryProtocol,
        client_service: ClientServiceProtocol,
        subscription_service: SubscriptionServiceProtocol
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞.
        
        Args:
            notification_repository: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            client_service: –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
            subscription_service: –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞–º–∏
        """
        self._repository = notification_repository
        self._client_service = client_service
        self._subscription_service = subscription_service
        
        logger.info("NotificationService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def create_notification(self, data: NotificationCreateData) -> Notification:
        """
        –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
        
        Args:
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            
        Returns:
            –°–æ–∑–¥–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            
        Raises:
            BusinessLogicError: –ü—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª
        """
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {data.type.value} –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {data.client_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª–∏–µ–Ω—Ç
        try:
            await self._client_service.get_client(data.client_id)
        except BusinessLogicError:
            raise BusinessLogicError(f"–ö–ª–∏–µ–Ω—Ç —Å ID {data.client_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        notification = await self._repository.save_notification(data)
        
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {notification.id} —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        return notification
    
    async def create_notification_from_template(
        self, 
        client_id: str, 
        notification_type: NotificationType, 
        template_data: Dict[str, Any],
        scheduled_at: Optional[datetime] = None
    ) -> Notification:
        """
        –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ —à–∞–±–ª–æ–Ω–∞.
        
        Args:
            client_id: ID –∫–ª–∏–µ–Ω—Ç–∞-–ø–æ–ª—É—á–∞—Ç–µ–ª—è
            notification_type: –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            template_data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ —à–∞–±–ª–æ–Ω
            scheduled_at: –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            
        Returns:
            –°–æ–∑–¥–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        """
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω
        template = NOTIFICATION_TEMPLATES.get(notification_type)
        if not template:
            raise BusinessLogicError(f"–®–∞–±–ª–æ–Ω –¥–ª—è —Ç–∏–ø–∞ {notification_type.value} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω
        try:
            title, message = template.format_notification(**template_data)
        except ValueError as e:
            raise BusinessLogicError(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notification_data = NotificationCreateData(
            client_id=client_id,
            type=notification_type,
            title=title,
            message=message,
            priority=template.priority,
            scheduled_at=scheduled_at,
            metadata=template_data
        )
        
        return await self.create_notification(notification_data)
    
    async def get_notification(self, notification_id: str) -> Notification:
        """
        –ü–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ ID.
        
        Args:
            notification_id: ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            
        Returns:
            –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            
        Raises:
            BusinessLogicError: –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        """
        notification = await self._repository.get_notification_by_id(notification_id)
        if not notification:
            raise BusinessLogicError(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å ID {notification_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        return notification
    
    async def get_all_notifications(self, limit: Optional[int] = None, offset: Optional[int] = None) -> List[Notification]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
        
        Args:
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            offset: –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        return await self._repository.list_notifications(limit=limit, offset=offset)
    
    async def get_client_notifications(
        self, 
        client_id: str, 
        limit: Optional[int] = None
    ) -> List[Notification]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞.
        
        Args:
            client_id: ID –∫–ª–∏–µ–Ω—Ç–∞
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            
        Returns:
            –°–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞
        """
        return await self._repository.get_notifications_by_client_id(client_id, limit=limit)
    
    async def get_pending_notifications(self) -> List[Notification]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
        
        Returns:
            –°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        return await self._repository.get_notifications_by_status(NotificationStatus.PENDING)
    
    async def get_scheduled_notifications(self, before_time: datetime) -> List[Notification]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
        
        Args:
            before_time: –í—Ä–µ–º—è, –¥–æ –∫–æ—Ç–æ—Ä–æ–≥–æ –∏—Å–∫–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        return await self._repository.get_scheduled_notifications(before_time)
    
    async def send_notification(self, notification_id: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
        
        Args:
            notification_id: ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        notification = await self.get_notification(notification_id)
        
        if notification.status != NotificationStatus.PENDING:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {notification_id} —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {notification.status}")
            return False
        
        # TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram Bot –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
        await self.mark_as_sent(notification_id)
        
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {notification_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        return True
    
    async def send_immediate_notification(
        self, 
        client_id: str, 
        notification_type: NotificationType, 
        template_data: Dict[str, Any]
    ) -> bool:
        """
        –°–æ–∑–¥–∞—Ç—å –∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
        
        Args:
            client_id: ID –∫–ª–∏–µ–Ω—Ç–∞-–ø–æ–ª—É—á–∞—Ç–µ–ª—è
            notification_type: –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            template_data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ —à–∞–±–ª–æ–Ω
            
        Returns:
            True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            notification = await self.create_notification_from_template(
                client_id=client_id,
                notification_type=notification_type,
                template_data=template_data
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
            return await self.send_notification(notification.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    async def mark_as_sent(self, notification_id: str, telegram_message_id: Optional[int] = None) -> Notification:
        """
        –û—Ç–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ.
        
        Args:
            notification_id: ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            telegram_message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
            
        Returns:
            –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        """
        update_data = NotificationUpdateData(
            status=NotificationStatus.SENT,
            sent_at=datetime.now(),
            telegram_message_id=telegram_message_id
        )
        
        notification = await self._repository.update_notification(notification_id, update_data)
        if not notification:
            raise BusinessLogicError(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å ID {notification_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {notification_id} –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ")
        return notification
    
    async def mark_as_delivered(self, notification_id: str) -> Notification:
        """
        –û—Ç–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ.
        
        Args:
            notification_id: ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            
        Returns:
            –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        """
        update_data = NotificationUpdateData(
            status=NotificationStatus.DELIVERED,
            delivered_at=datetime.now()
        )
        
        notification = await self._repository.update_notification(notification_id, update_data)
        if not notification:
            raise BusinessLogicError(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å ID {notification_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {notification_id} –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ")
        return notification
    
    async def mark_as_failed(self, notification_id: str, error_message: str) -> Notification:
        """
        –û—Ç–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω–æ–µ.
        
        Args:
            notification_id: ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            error_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            
        Returns:
            –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        """
        notification = await self.get_notification(notification_id)
        
        update_data = NotificationUpdateData(
            status=NotificationStatus.FAILED,
            retry_count=notification.retry_count + 1
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata = notification.metadata.copy()
        metadata['last_error'] = error_message
        metadata['failed_at'] = datetime.now().isoformat()
        
        notification = await self._repository.update_notification(notification_id, update_data)
        if not notification:
            raise BusinessLogicError(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å ID {notification_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        logger.error(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {notification_id} –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω–æ–µ: {error_message}")
        return notification
    
    async def cancel_notification(self, notification_id: str) -> Notification:
        """
        –û—Ç–º–µ–Ω–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
        
        Args:
            notification_id: ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            
        Returns:
            –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        """
        update_data = NotificationUpdateData(
            status=NotificationStatus.CANCELLED
        )
        
        notification = await self._repository.update_notification(notification_id, update_data)
        if not notification:
            raise BusinessLogicError(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å ID {notification_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {notification_id} –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return notification
    
    async def retry_failed_notifications(self) -> int:
        """
        –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–µ—É–¥–∞—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
        
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–≤—Ç–æ—Ä–Ω–æ
        """
        failed_notifications = await self._repository.get_failed_notifications_for_retry()
        
        retry_count = 0
        for notification in failed_notifications:
            try:
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ PENDING –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                update_data = NotificationUpdateData(status=NotificationStatus.PENDING)
                await self._repository.update_notification(notification.id, update_data)
                
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
                if await self.send_notification(notification.id):
                    retry_count += 1
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {notification.id}: {e}")
        
        logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {retry_count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        return retry_count
    
    async def process_scheduled_notifications(self) -> int:
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
        
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –≤—Ä–µ–º—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Å—Ç—É–ø–∏–ª–æ.
        
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        current_time = datetime.now()
        scheduled_notifications = await self.get_scheduled_notifications(current_time)
        
        processed_count = 0
        for notification in scheduled_notifications:
            try:
                if await self.send_notification(notification.id):
                    processed_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {notification.id}: {e}")
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        return processed_count
    
    async def send_subscription_expiring_notifications(self, days_before: int = 3) -> int:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞—Ö.
        
        Args:
            days_before: –ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        logger.info(f"–ü–æ–∏—Å–∫ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤, –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö —á–µ—Ä–µ–∑ {days_before} –¥–Ω–µ–π")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –≤ SubscriptionService –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
        
        sent_count = 0
        # expiring_subscriptions = await self._subscription_service.get_expiring_subscriptions(days_before)
        
        # for subscription in expiring_subscriptions:
        #     try:
        #         client = await self._client_service.get_client(subscription.client_id)
        #         
        #         template_data = {
        #             'client_name': client.name,
        #             'subscription_type': subscription.type.value,
        #             'end_date': subscription.end_date.strftime('%d.%m.%Y'),
        #             'remaining_classes': subscription.remaining_classes
        #         }
        #         
        #         if await self.send_immediate_notification(
        #             client_id=subscription.client_id,
        #             notification_type=NotificationType.SUBSCRIPTION_EXPIRING,
        #             template_data=template_data
        #         ):
        #             sent_count += 1
        #             
        #     except Exception as e:
        #         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ–∫–∞—é—â–µ–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ {subscription.id}: {e}")
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞—Ö")
        return sent_count
    
    async def send_classes_running_out_notifications(self, classes_threshold: int = 2) -> int:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏—Ö—Å—è –∑–∞–Ω—è—Ç–∏—è—Ö.
        
        Args:
            classes_threshold: –ü—Ä–∏ –∫–∞–∫–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∑–∞–Ω—è—Ç–∏–π –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        logger.info(f"–ü–æ–∏—Å–∫ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ —Å {classes_threshold} –∏–ª–∏ –º–µ–Ω–µ–µ –∑–∞–Ω—è—Ç–∏—è–º–∏")
        
        sent_count = 0
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –≤ SubscriptionService –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ —Å –º–∞–ª—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–Ω—è—Ç–∏–π
        # low_classes_subscriptions = await self._subscription_service.get_subscriptions_with_low_classes(classes_threshold)
        
        # for subscription in low_classes_subscriptions:
        #     try:
        #         client = await self._client_service.get_client(subscription.client_id)
        #         
        #         template_data = {
        #             'client_name': client.name,
        #             'remaining_classes': subscription.remaining_classes
        #         }
        #         
        #         if await self.send_immediate_notification(
        #             client_id=subscription.client_id,
        #             notification_type=NotificationType.CLASSES_RUNNING_OUT,
        #             template_data=template_data
        #         ):
        #             sent_count += 1
        #             
        #     except Exception as e:
        #         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏—Ö—Å—è –∑–∞–Ω—è—Ç–∏—è—Ö {subscription.id}: {e}")
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏—Ö—Å—è –∑–∞–Ω—è—Ç–∏—è—Ö")
        return sent_count
    
    async def get_notification_statistics(self, client_id: Optional[str] = None) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º.
        
        Args:
            client_id: ID –∫–ª–∏–µ–Ω—Ç–∞ (–µ—Å–ª–∏ None, —Ç–æ –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        if client_id:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
            notifications = await self.get_client_notifications(client_id)
            
            stats = {
                'client_id': client_id,
                'total_notifications': len(notifications),
                'by_status': {},
                'by_type': {},
                'by_priority': {},
                'recent_notifications': []
            }
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            for notification in notifications:
                status = notification.status.value
                stats['by_status'][status] = stats['by_status'].get(status, 0) + 1
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
                ntype = notification.type.value
                stats['by_type'][ntype] = stats['by_type'].get(ntype, 0) + 1
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
                priority = notification.priority.value
                stats['by_priority'][priority] = stats['by_priority'].get(priority, 0) + 1
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            stats['recent_notifications'] = [
                {
                    'id': n.id,
                    'type': n.type.value,
                    'title': n.title,
                    'status': n.status.value,
                    'created_at': n.created_at.isoformat()
                }
                for n in notifications[:5]
            ]
            
        else:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_count = await self._repository.count_notifications()
            
            stats = {
                'total_notifications': total_count,
                'by_status': {},
                'by_type': {},
                'by_priority': {},
                'system_health': {}
            }
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            for status in NotificationStatus:
                count = await self._repository.count_notifications_by_status(status)
                if count > 0:
                    stats['by_status'][status.value] = count
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
            for ntype in NotificationType:
                notifications = await self._repository.get_notifications_by_type(ntype)
                if notifications:
                    stats['by_type'][ntype.value] = len(notifications)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
            for priority in NotificationPriority:
                notifications = await self._repository.get_notifications_by_priority(priority)
                if notifications:
                    stats['by_priority'][priority.value] = len(notifications)
            
            # –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
            pending_count = stats['by_status'].get('pending', 0)
            failed_count = stats['by_status'].get('failed', 0)
            
            stats['system_health'] = {
                'pending_notifications': pending_count,
                'failed_notifications': failed_count,
                'needs_attention': failed_count > 0 or pending_count > 10
            }
        
        return stats
    
    # –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
    
    async def send_welcome_notification(self, client_id: str, client_name: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –∫–ª–∏–µ–Ω—Ç—É.
        
        Args:
            client_id: ID –∫–ª–∏–µ–Ω—Ç–∞
            client_name: –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞
            
        Returns:
            True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        template_data = {'client_name': client_name}
        
        return await self.send_immediate_notification(
            client_id=client_id,
            notification_type=NotificationType.WELCOME_MESSAGE,
            template_data=template_data
        )
    
    async def send_registration_complete_notification(self, client_id: str, client_name: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
        
        Args:
            client_id: ID –∫–ª–∏–µ–Ω—Ç–∞
            client_name: –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞
            
        Returns:
            True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        template_data = {'client_name': client_name}
        
        return await self.send_immediate_notification(
            client_id=client_id,
            notification_type=NotificationType.REGISTRATION_COMPLETE,
            template_data=template_data
        )
    
    async def send_subscription_purchased_notification(
        self, 
        client_id: str, 
        client_name: str,
        subscription_type: str,
        total_classes: int,
        end_date: str,
        price: int
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞.
        
        Args:
            client_id: ID –∫–ª–∏–µ–Ω—Ç–∞
            client_name: –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞
            subscription_type: –¢–∏–ø –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
            total_classes: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç–∏–π
            end_date: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
            price: –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
            
        Returns:
            True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        template_data = {
            'client_name': client_name,
            'subscription_type': subscription_type,
            'total_classes': total_classes,
            'end_date': end_date,
            'price': price
        }
        
        return await self.send_immediate_notification(
            client_id=client_id,
            notification_type=NotificationType.SUBSCRIPTION_PURCHASED,
            template_data=template_data
        )
    
    async def send_general_info_notification(
        self, 
        client_id: str, 
        client_name: str, 
        message: str
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—â–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
        
        Args:
            client_id: ID –∫–ª–∏–µ–Ω—Ç–∞
            client_name: –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        template_data = {
            'client_name': client_name,
            'message': message
        }
        
        return await self.send_immediate_notification(
            client_id=client_id,
            notification_type=NotificationType.GENERAL_INFO,
            template_data=template_data
        ) 