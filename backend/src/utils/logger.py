"""
üìù –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è CyberKitty Practiti

–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç structlog –¥–ª—è –ª—É—á—à–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–æ–≤.
"""

import logging
import sys
from typing import Any, Dict, Optional

import structlog
from structlog.typing import FilteringBoundLogger

from ..config.settings import settings


def configure_logging() -> None:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç structlog –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤.
    """
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ logging
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=getattr(logging, settings.log_level.upper()),
        stream=sys.stdout
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ structlog
    structlog.configure(
        processors=[
            structlog.stdlib.filter_by_level,
            structlog.stdlib.add_logger_name,
            structlog.stdlib.add_log_level,
            structlog.stdlib.PositionalArgumentsFormatter(),
            structlog.processors.TimeStamper(fmt="iso"),
            structlog.processors.StackInfoRenderer(),
            structlog.processors.format_exc_info,
            structlog.processors.UnicodeDecoder(),
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º JSON –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ, —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
            structlog.processors.JSONRenderer() if not settings.debug 
            else structlog.dev.ConsoleRenderer(colors=True)
        ],
        context_class=dict,
        logger_factory=structlog.stdlib.LoggerFactory(),
        wrapper_class=structlog.stdlib.BoundLogger,
        cache_logger_on_first_use=True,
    )


def get_logger(name: str) -> FilteringBoundLogger:
    """
    –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–≥–µ—Ä –¥–ª—è –º–æ–¥—É–ª—è.
    
    Args:
        name: –ò–º—è –º–æ–¥—É–ª—è (–æ–±—ã—á–Ω–æ __name__)
        
    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä
    """
    return structlog.get_logger(name)


class LoggerMixin:
    """
    –ú–∏–∫—Å–∏–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–ª–∞—Å—Å—ã.
    
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë—Ç –ª–æ–≥–≥–µ—Ä —Å –∏–º–µ–Ω–µ–º –∫–ª–∞—Å—Å–∞.
    """
    
    @property
    def logger(self) -> FilteringBoundLogger:
        """–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞."""
        if not hasattr(self, '_logger'):
            self._logger = get_logger(self.__class__.__name__)
        return self._logger


def log_function_call(
    logger: FilteringBoundLogger,
    function_name: str,
    args: Optional[Dict[str, Any]] = None,
    level: str = "info"
) -> None:
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏.
    
    Args:
        logger: –õ–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏
        function_name: –ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏
        args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ (–±–µ–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!)
        level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    log_method = getattr(logger, level.lower())
    log_method(
        f"Calling {function_name}",
        function=function_name,
        args=args or {}
    )


def log_function_result(
    logger: FilteringBoundLogger,
    function_name: str,
    success: bool,
    result: Optional[Dict[str, Any]] = None,
    error: Optional[str] = None,
    level: str = "info"
) -> None:
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–∏.
    
    Args:
        logger: –õ–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏
        function_name: –ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏
        success: –£—Å–ø–µ—à–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è
        result: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–±–µ–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!)
        error: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    log_method = getattr(logger, level.lower())
    
    if success:
        log_method(
            f"Function {function_name} completed successfully",
            function=function_name,
            success=True,
            result=result or {}
        )
    else:
        log_method(
            f"Function {function_name} failed",
            function=function_name,
            success=False,
            error=error
        )


def log_telegram_update(
    logger: FilteringBoundLogger,
    update_type: str,
    user_id: Optional[int] = None,
    chat_id: Optional[int] = None,
    message_text: Optional[str] = None
) -> None:
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.
    
    Args:
        logger: –õ–æ–≥–≥–µ—Ä
        update_type: –¢–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (message, callback_query, –∏ —Ç.–¥.)
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        chat_id: ID —á–∞—Ç–∞
        message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤)
    """
    logger.info(
        f"Telegram update: {update_type}",
        update_type=update_type,
        user_id=user_id,
        chat_id=chat_id,
        message_preview=message_text[:100] if message_text else None
    )


def log_google_sheets_operation(
    logger: FilteringBoundLogger,
    operation: str,
    sheet_name: Optional[str] = None,
    range_name: Optional[str] = None,
    success: bool = True,
    error: Optional[str] = None
) -> None:
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å Google Sheets.
    
    Args:
        logger: –õ–æ–≥–≥–µ—Ä
        operation: –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ (read, write, update, –∏ —Ç.–¥.)
        sheet_name: –ò–º—è –ª–∏—Å—Ç–∞
        range_name: –î–∏–∞–ø–∞–∑–æ–Ω —è—á–µ–µ–∫
        success: –£—Å–ø–µ—à–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è
        error: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    """
    level = "info" if success else "error"
    log_method = getattr(logger, level)
    
    log_method(
        f"Google Sheets {operation}",
        operation=operation,
        sheet_name=sheet_name,
        range_name=range_name,
        success=success,
        error=error
    )


def log_client_action(
    logger: FilteringBoundLogger,
    action: str,
    client_id: Optional[str] = None,
    client_phone: Optional[str] = None,
    details: Optional[Dict[str, Any]] = None
) -> None:
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –∫–ª–∏–µ–Ω—Ç–æ–≤.
    
    Args:
        logger: –õ–æ–≥–≥–µ—Ä
        action: –î–µ–π—Å—Ç–≤–∏–µ (registration, subscription_purchase, –∏ —Ç.–¥.)
        client_id: ID –∫–ª–∏–µ–Ω—Ç–∞
        client_phone: –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞ (–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
        details: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
    """
    # –ú–∞—Å–∫–∏—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –ª–æ–≥–æ–≤
    masked_phone = None
    if client_phone:
        masked_phone = client_phone[:3] + "***" + client_phone[-4:]
    
    logger.info(
        f"Client action: {action}",
        action=action,
        client_id=client_id,
        client_phone=masked_phone,
        details=details or {}
    )


def log_subscription_event(
    logger: FilteringBoundLogger,
    event: str,
    subscription_id: str,
    client_id: Optional[str] = None,
    subscription_type: Optional[str] = None,
    details: Optional[Dict[str, Any]] = None
) -> None:
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤.
    
    Args:
        logger: –õ–æ–≥–≥–µ—Ä
        event: –°–æ–±—ã—Ç–∏–µ (created, activated, expired, –∏ —Ç.–¥.)
        subscription_id: ID –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
        client_id: ID –∫–ª–∏–µ–Ω—Ç–∞
        subscription_type: –¢–∏–ø –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
        details: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
    """
    logger.info(
        f"Subscription event: {event}",
        event=event,
        subscription_id=subscription_id,
        client_id=client_id,
        subscription_type=subscription_type,
        details=details or {}
    )


def log_subscription_action(subscription_id: str, action: str, details: str = ""):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π —Å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞–º–∏."""
    logger = get_logger("subscription_flow")
    logger.info(f"ACTION: {action} | SUB_ID: {subscription_id} | DETAILS: {details}")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
configure_logging() 