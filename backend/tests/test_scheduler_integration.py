"""
üß™ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è SchedulerService

–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å –¥—Ä—É–≥–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏.
"""

import pytest
import asyncio
from datetime import datetime, timedelta
from unittest.mock import AsyncMock, patch

from backend.src.services.scheduler_service import SchedulerService
from backend.src.services.client_service import ClientService
from backend.src.services.subscription_service import SubscriptionService
from backend.src.services.notification_service import NotificationService
from backend.src.repositories.in_memory_client_repository import InMemoryClientRepository
from backend.src.repositories.in_memory_subscription_repository import InMemorySubscriptionRepository
from backend.src.repositories.in_memory_notification_repository import InMemoryNotificationRepository
from backend.src.models.client import Client, ClientStatus, ClientCreateData
from backend.src.models.subscription import Subscription, SubscriptionStatus, SubscriptionType, SubscriptionCreateData
from backend.src.models.notification import NotificationType


@pytest.fixture
async def setup_services():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    client_repo = InMemoryClientRepository()
    subscription_repo = InMemorySubscriptionRepository()
    notification_repo = InMemoryNotificationRepository()
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
    client_service = ClientService(client_repo)
    subscription_service = SubscriptionService(subscription_repo)
    notification_service = NotificationService(
        notification_repo, 
        client_service, 
        subscription_service
    )
    scheduler_service = SchedulerService(
        client_service,
        subscription_service,
        notification_service
    )
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    client_data = ClientCreateData(
        name="–ê–Ω–Ω–∞ –¢–µ—Å—Ç–æ–≤–∞—è",
        phone="+79161234567",
        telegram_id=123456789
    )
    test_client = await client_service.create_client(client_data)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç
    subscription_data = SubscriptionCreateData(
        client_id=test_client.id,
        type=SubscriptionType.PACKAGE_8,
        total_classes=8,
        price=9600,
        start_date=datetime.now().date(),
        end_date=(datetime.now() + timedelta(days=30)).date()
    )
    test_subscription = await subscription_service.create_subscription(subscription_data)
    
    return {
        'client_service': client_service,
        'subscription_service': subscription_service,
        'notification_service': notification_service,
        'scheduler_service': scheduler_service,
        'test_client': test_client,
        'test_subscription': test_subscription
    }


class TestSchedulerIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
    
    @pytest.mark.asyncio
    async def test_scheduler_lifecycle(self, setup_services):
        """–¢–µ—Å—Ç –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        services = await setup_services
        scheduler = services['scheduler_service']
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        await scheduler.start()
        assert scheduler._is_running is True
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        await scheduler.stop()
        assert scheduler._is_running is False
    
    @pytest.mark.asyncio
    async def test_schedule_class_reminder_integration(self, setup_services):
        """–¢–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–Ω—è—Ç–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏."""
        services = await setup_services
        scheduler = services['scheduler_service']
        test_client = services['test_client']
        
        await scheduler.start()
        
        try:
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            class_date = datetime.now() + timedelta(hours=4)
            job_id = await scheduler.schedule_class_reminder(
                test_client.id,
                class_date,
                "–•–∞—Ç—Ö–∞-–π–æ–≥–∞"
            )
            
            assert job_id != ""
            assert job_id.startswith("class_reminder_")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ
            jobs = await scheduler.get_scheduled_jobs()
            job_ids = [job['id'] for job in jobs]
            assert job_id in job_ids
            
            # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏–µ
            cancelled = await scheduler.cancel_job(job_id)
            assert cancelled is True
            
        finally:
            await scheduler.stop()
    
    @pytest.mark.asyncio
    async def test_subscription_expiry_reminder_integration(self, setup_services):
        """–¢–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞."""
        services = await setup_services
        scheduler = services['scheduler_service']
        test_subscription = services['test_subscription']
        
        await scheduler.start()
        
        try:
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏
            expiry_date = datetime.now() + timedelta(days=5)
            job_id = await scheduler.schedule_subscription_expiry_reminder(
                test_subscription.id,
                expiry_date
            )
            
            assert job_id != ""
            assert job_id.startswith("subscription_expiry_")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ
            jobs = await scheduler.get_scheduled_jobs()
            job_ids = [job['id'] for job in jobs]
            assert job_id in job_ids
            
        finally:
            await scheduler.stop()
    
    @pytest.mark.asyncio
    async def test_notification_creation_and_sending(self, setup_services):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
        services = await setup_services
        scheduler = services['scheduler_service']
        notification_service = services['notification_service']
        test_client = services['test_client']
        
        # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
        notification = await notification_service.create_notification_from_template(
            client_id=test_client.id,
            notification_type=NotificationType.CLASS_REMINDER,
            template_data={
                'client_name': test_client.name,
                'class_type': '–•–∞—Ç—Ö–∞-–π–æ–≥–∞',
                'class_date': (datetime.now() + timedelta(hours=2)).isoformat(),
                'reminder_hours': 2
            }
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ
        assert notification.id is not None
        assert notification.client_id == test_client.id
        assert notification.type == NotificationType.CLASS_REMINDER
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ)
        sent = await notification_service.send_notification(notification.id)
        assert sent is True
    
    @pytest.mark.asyncio
    async def test_periodic_tasks_registration(self, setup_services):
        """–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á."""
        services = await setup_services
        scheduler = services['scheduler_service']
        
        await scheduler.start()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
            jobs = await scheduler.get_scheduled_jobs()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã
            job_ids = [job['id'] for job in jobs]
            
            expected_jobs = [
                'process_scheduled_notifications',
                'retry_failed_notifications',
                'daily_class_reminders',
                'check_expiring_subscriptions',
                'weekly_stats'
            ]
            
            for expected_job in expected_jobs:
                assert expected_job in job_ids, f"–ó–∞–¥–∞—á–∞ {expected_job} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            
        finally:
            await scheduler.stop()
    
    @pytest.mark.asyncio
    async def test_notification_processing_integration(self, setup_services):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        services = await setup_services
        scheduler = services['scheduler_service']
        notification_service = services['notification_service']
        test_client = services['test_client']
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        scheduled_time = datetime.now() - timedelta(minutes=1)  # –í—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ
        notification = await notification_service.create_notification_from_template(
            client_id=test_client.id,
            notification_type=NotificationType.CLASS_REMINDER,
            template_data={
                'client_name': test_client.name,
                'class_type': '–í–∏–Ω—å—è—Å–∞-—Ñ–ª–æ—É',
                'class_date': datetime.now().isoformat(),
                'reminder_hours': 2
            },
            scheduled_at=scheduled_time
        )
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        processed_count = await scheduler._process_scheduled_notifications()
        
        # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –¥–æ–ª–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å—Å—è 1 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        assert processed_count >= 0  # –ú–æ–∂–µ—Ç –±—ã—Ç—å 0 –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
    
    @pytest.mark.asyncio
    async def test_error_handling_in_scheduler(self, setup_services):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ."""
        services = await setup_services
        scheduler = services['scheduler_service']
        
        await scheduler.start()
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            job_id = await scheduler.schedule_class_reminder(
                "nonexistent-client",
                datetime.now() + timedelta(hours=2),
                "–¢–µ—Å—Ç"
            )
            
            # –ó–∞–¥–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–æ, –Ω–æ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –±—É–¥–µ—Ç –æ—à–∏–±–∫–∞
            assert job_id != ""
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ
            cancelled = await scheduler.cancel_job("nonexistent-job")
            assert cancelled is False
            
        finally:
            await scheduler.stop()


class TestSchedulerPerformance:
    """–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
    
    @pytest.mark.asyncio
    async def test_multiple_jobs_scheduling(self, setup_services):
        """–¢–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π."""
        services = await setup_services
        scheduler = services['scheduler_service']
        test_client = services['test_client']
        
        await scheduler.start()
        
        try:
            job_ids = []
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º 10 –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            for i in range(10):
                class_date = datetime.now() + timedelta(hours=i+1)
                job_id = await scheduler.schedule_class_reminder(
                    test_client.id,
                    class_date,
                    f"–ó–∞–Ω—è—Ç–∏–µ {i+1}"
                )
                job_ids.append(job_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã
            jobs = await scheduler.get_scheduled_jobs()
            scheduled_job_ids = [job['id'] for job in jobs]
            
            for job_id in job_ids:
                if job_id:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ ID (–æ—à–∏–±–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è)
                    assert job_id in scheduled_job_ids
            
            # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
            for job_id in job_ids:
                if job_id:
                    await scheduler.cancel_job(job_id)
            
        finally:
            await scheduler.stop()


if __name__ == "__main__":
    # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    async def quick_test():
        """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏."""
        print("üß™ –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞ SchedulerService...")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        client_repo = InMemoryClientRepository()
        subscription_repo = InMemorySubscriptionRepository()
        notification_repo = InMemoryNotificationRepository()
        
        client_service = ClientService(client_repo)
        subscription_service = SubscriptionService(subscription_repo)
        notification_service = NotificationService(
            notification_repo, 
            client_service, 
            subscription_service
        )
        scheduler_service = SchedulerService(
            client_service,
            subscription_service,
            notification_service
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª
        await scheduler_service.start()
        print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
        
        jobs = await scheduler_service.get_scheduled_jobs()
        print(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(jobs)} –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á")
        
        await scheduler_service.stop()
        print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        print("üéâ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    
    asyncio.run(quick_test()) 