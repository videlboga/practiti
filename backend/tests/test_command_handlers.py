"""
üß™ –¢–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ Telegram Bot

–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã Session B8.
–ü—Ä–∏–Ω—Ü–∏–ø CyberKitty: –ø—Ä–æ—Å—Ç–æ—Ç–∞ –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ.
"""

import pytest
from unittest.mock import AsyncMock, MagicMock
from telegram import Update, User, Chat
from telegram.ext import ContextTypes

from backend.src.presentation.telegram.handlers.command_handlers import CommandHandlers
from backend.src.services.protocols.client_service import ClientServiceProtocol


@pytest.fixture
def mock_client_service():
    """–ú–æ–∫ —Å–µ—Ä–≤–∏—Å–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤."""
    service = AsyncMock(spec=ClientServiceProtocol)
    return service


@pytest.fixture
def command_handlers(mock_client_service):
    """–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ CommandHandlers –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
    return CommandHandlers(mock_client_service)


@pytest.fixture
def mock_update():
    """–ú–æ–∫ Telegram Update."""
    update = MagicMock(spec=Update)
    update.effective_user = MagicMock(spec=User)
    update.effective_user.id = 12345
    update.effective_user.username = "testuser"
    update.effective_user.first_name = "Test"
    
    update.effective_chat = MagicMock(spec=Chat)
    update.effective_chat.send_message = AsyncMock()
    
    return update


@pytest.fixture
def mock_context():
    """–ú–æ–∫ Telegram Context."""
    context = MagicMock(spec=ContextTypes.DEFAULT_TYPE)
    return context


@pytest.mark.asyncio
async def test_address_command_success(command_handlers, mock_update, mock_context):
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /address."""
    
    # Act
    await command_handlers.address_command(mock_update, mock_context)
    
    # Assert
    mock_update.effective_chat.send_message.assert_called_once()
    call_args = mock_update.effective_chat.send_message.call_args
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    message_text = call_args[0][0]  # –ü–µ—Ä–≤—ã–π –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç
    
    assert "üìç" in message_text
    assert "Practiti" in message_text
    assert "–ú–æ—Å–∫–≤–∞" in message_text
    assert "–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã" in message_text
    assert "–ö–æ–Ω—Ç–∞–∫—Ç—ã" in message_text
    assert "–ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è" in message_text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Markdown
    assert call_args[1]["parse_mode"] == "Markdown"


@pytest.mark.asyncio
async def test_address_command_handles_error(command_handlers, mock_update, mock_context):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –≤ –∫–æ–º–∞–Ω–¥–µ /address."""
    
    # Arrange
    mock_update.effective_chat.send_message.side_effect = [Exception("Test error"), None]
    
    # Act & Assert - –Ω–µ –¥–æ–ª–∂–Ω–æ –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
    await command_handlers.address_command(mock_update, mock_context)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ 2 –≤—ã–∑–æ–≤–∞: –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å –æ—à–∏–±–∫–æ–π) + —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    assert mock_update.effective_chat.send_message.call_count == 2


@pytest.mark.asyncio
async def test_faq_command_success(command_handlers, mock_update, mock_context):
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /faq."""
    
    # Act
    await command_handlers.faq_command(mock_update, mock_context)
    
    # Assert
    mock_update.effective_chat.send_message.assert_called_once()
    call_args = mock_update.effective_chat.send_message.call_args
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    message_text = call_args[0][0]  # –ü–µ—Ä–≤—ã–π –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç
    
    assert "‚ùì" in message_text
    assert "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã" in message_text
    assert "–û –∑–∞–Ω—è—Ç–∏—è—Ö" in message_text
    assert "–û–± –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞—Ö" in message_text
    assert "–û –∑–∞–ø–∏—Å–∏" in message_text
    assert "–æ–ø—ã—Ç" in message_text
    assert "–∞–±–æ–Ω–µ–º–µ–Ω—Ç" in message_text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Markdown
    assert call_args[1]["parse_mode"] == "Markdown"


@pytest.mark.asyncio
async def test_contact_command_success(command_handlers, mock_update, mock_context):
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /contact."""
    
    # Act
    await command_handlers.contact_command(mock_update, mock_context)
    
    # Assert
    mock_update.effective_chat.send_message.assert_called_once()
    call_args = mock_update.effective_chat.send_message.call_args
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    message_text = call_args[0][0]  # –ü–µ—Ä–≤—ã–π –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç
    
    assert "üìû" in message_text
    assert "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" in message_text
    assert "–¢–µ–ª–µ—Ñ–æ–Ω" in message_text
    assert "WhatsApp" in message_text
    assert "Email" in message_text
    assert "+7 (999) 123-45-67" in message_text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Markdown
    assert call_args[1]["parse_mode"] == "Markdown"


@pytest.mark.asyncio
async def test_prices_command_success(command_handlers, mock_update, mock_context):
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /prices."""
    
    # Act
    await command_handlers.prices_command(mock_update, mock_context)
    
    # Assert
    mock_update.effective_chat.send_message.assert_called_once()
    call_args = mock_update.effective_chat.send_message.call_args
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    message_text = call_args[0][0]  # –ü–µ—Ä–≤—ã–π –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç
    
    assert "üí∞" in message_text
    assert "–¶–µ–Ω—ã –Ω–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã" in message_text
    assert "–†–∞–∑–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ" in message_text
    assert "1 500 ‚ÇΩ" in message_text
    assert "–ê–±–æ–Ω–µ–º–µ–Ω—Ç 4 –∑–∞–Ω—è—Ç–∏—è" in message_text
    assert "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è" in message_text
    assert "–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã" in message_text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Markdown
    assert call_args[1]["parse_mode"] == "Markdown"


@pytest.mark.asyncio
async def test_schedule_command_success(command_handlers, mock_update, mock_context):
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /schedule."""
    
    # Act
    await command_handlers.schedule_command(mock_update, mock_context)
    
    # Assert
    mock_update.effective_chat.send_message.assert_called_once()
    call_args = mock_update.effective_chat.send_message.call_args
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    message_text = call_args[0][0]  # –ü–µ—Ä–≤—ã–π –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç
    
    assert "üìÖ" in message_text
    assert "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π" in message_text
    assert "–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö" in message_text
    assert "–•–∞—Ç—Ö–∞-–π–æ–≥–∞" in message_text
    assert "–í–∏–Ω—å—è—Å–∞-—Ñ–ª–æ—É" in message_text
    assert "08:00" in message_text
    assert "–£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏" in message_text
    assert "–ó–∞–ø–∏—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏—è" in message_text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Markdown
    assert call_args[1]["parse_mode"] == "Markdown" 