"""
üß™ –¢–µ—Å—Ç—ã –¥–ª—è SubscriptionService

–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞–º–∏.
"""

import pytest
from datetime import date, timedelta
from unittest.mock import AsyncMock

from src.models.subscription import (
    Subscription, SubscriptionCreateData, SubscriptionType, SubscriptionStatus
)
from src.services.subscription_service import SubscriptionService
from src.utils.exceptions import BusinessLogicError


@pytest.fixture
def mock_subscription_repository():
    """–ú–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤."""
    return AsyncMock()


@pytest.fixture
def subscription_service(mock_subscription_repository):
    """–°–µ—Ä–≤–∏—Å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ —Å –º–æ–∫-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º."""
    return SubscriptionService(mock_subscription_repository)


@pytest.fixture
def sample_subscription():
    """–û–±—Ä–∞–∑–µ—Ü –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
    return Subscription(
        id="test-subscription-id",
        client_id="test-client-id",
        type=SubscriptionType.PACKAGE_4,
        total_classes=4,
        used_classes=0,
        start_date=date.today(),
        end_date=date.today() + timedelta(days=60),
        price=3200,
        status=SubscriptionStatus.ACTIVE,
        payment_confirmed=True
    )


class TestSubscriptionService:
    """–¢–µ—Å—Ç—ã –¥–ª—è SubscriptionService."""
    
    @pytest.mark.asyncio
    async def test_create_subscription_success(self, subscription_service, mock_subscription_repository):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞."""
        # Arrange
        create_data = SubscriptionCreateData(
            client_id="test-client-id",
            type=SubscriptionType.TRIAL,
            start_date=date.today()
        )
        
        expected_subscription = Subscription(
            client_id="test-client-id",
            type=SubscriptionType.TRIAL,
            total_classes=1,
            start_date=date.today(),
            end_date=date.today() + timedelta(days=60),
            price=500,
            status=SubscriptionStatus.PENDING
        )
        
        mock_subscription_repository.get_active_subscriptions_by_client_id.return_value = []
        mock_subscription_repository.save_subscription.return_value = expected_subscription
        
        # Act
        result = await subscription_service.create_subscription(create_data)
        
        # Assert
        assert result == expected_subscription
        mock_subscription_repository.save_subscription.assert_called_once_with(create_data)
    
    @pytest.mark.asyncio
    async def test_create_multiple_active_subscriptions_allowed(
        self, subscription_service, mock_subscription_repository, sample_subscription
    ):
        """–¢–µ–ø–µ—Ä—å –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤."""

        create_data = SubscriptionCreateData(
            client_id="test-client-id",
            type=SubscriptionType.TRIAL
        )

        # –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–æ–æ–±—â–∞–µ—Ç, —á—Ç–æ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π
        mock_subscription_repository.get_active_subscriptions_by_client_id.return_value = [sample_subscription]

        # –û–∂–∏–¥–∞–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –≤—Å—ë —Ä–∞–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç save_subscription
        mock_subscription_repository.save_subscription.return_value = sample_subscription

        result = await subscription_service.create_subscription(create_data)

        assert result == sample_subscription
        mock_subscription_repository.save_subscription.assert_called_once_with(create_data)
    
    @pytest.mark.asyncio
    async def test_get_subscription_success(self, subscription_service, mock_subscription_repository, sample_subscription):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞."""
        # Arrange
        mock_subscription_repository.get_subscription_by_id.return_value = sample_subscription
        
        # Act
        result = await subscription_service.get_subscription("test-subscription-id")
        
        # Assert
        assert result == sample_subscription
        mock_subscription_repository.get_subscription_by_id.assert_called_once_with("test-subscription-id")
    
    @pytest.mark.asyncio
    async def test_get_subscription_not_found(self, subscription_service, mock_subscription_repository):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞."""
        # Arrange
        mock_subscription_repository.get_subscription_by_id.return_value = None
        
        # Act & Assert
        with pytest.raises(BusinessLogicError, match="–ê–±–æ–Ω–µ–º–µ–Ω—Ç —Å ID test-id –Ω–µ –Ω–∞–π–¥–µ–Ω"):
            await subscription_service.get_subscription("test-id")
    
    @pytest.mark.asyncio
    async def test_use_class_success(self, subscription_service, mock_subscription_repository, sample_subscription):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è."""
        # Arrange
        subscription_data = sample_subscription.model_dump()
        subscription_data['used_classes'] = 1
        updated_subscription = Subscription(**subscription_data)
        
        mock_subscription_repository.get_subscription_by_id.return_value = sample_subscription
        mock_subscription_repository.update_subscription.return_value = updated_subscription
        
        # Act
        result = await subscription_service.use_class("test-subscription-id")
        
        # Assert
        assert result.used_classes == 1
        assert result.remaining_classes == 3
    
    @pytest.mark.asyncio
    async def test_use_class_on_inactive_subscription_fails(
        self, subscription_service, mock_subscription_repository
    ):
        """–¢–µ—Å—Ç —Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è —Å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞."""
        # Arrange
        inactive_subscription = Subscription(
            id="test-id",
            client_id="test-client-id",
            type=SubscriptionType.TRIAL,
            total_classes=1,
            used_classes=0,
            start_date=date.today(),
            end_date=date.today() + timedelta(days=60),
            price=500,
            status=SubscriptionStatus.PENDING,  # –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π
            payment_confirmed=False
        )
        
        mock_subscription_repository.get_subscription_by_id.return_value = inactive_subscription
        
        # Act & Assert
        with pytest.raises(BusinessLogicError, match="–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"):
            await subscription_service.use_class("test-id")
    
    def test_get_subscription_price(self, subscription_service):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞."""
        assert subscription_service.get_subscription_price(SubscriptionType.TRIAL) == 500
        assert subscription_service.get_subscription_price(SubscriptionType.SINGLE) == 1100
        assert subscription_service.get_subscription_price(SubscriptionType.PACKAGE_4) == 3200
        assert subscription_service.get_subscription_price(SubscriptionType.UNLIMITED) == 10800
    
    def test_calculate_subscription_end_date(self, subscription_service):
        """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞."""
        start_date = date(2024, 1, 1)
        
        # –ü—Ä–æ–±–Ω—ã–π –∏ —Ä–∞–∑–æ–≤–æ–µ, –ø–∞–∫–µ—Ç–Ω—ã–µ ‚Äì 60 –¥–Ω–µ–π
        assert subscription_service.calculate_subscription_end_date(
            SubscriptionType.TRIAL, start_date
        ) == date(2024, 3, 1)
        
        assert subscription_service.calculate_subscription_end_date(
            SubscriptionType.SINGLE, start_date
        ) == date(2024, 3, 1)
        
        assert subscription_service.calculate_subscription_end_date(
            SubscriptionType.PACKAGE_4, start_date
        ) == date(2024, 3, 1)
    
    def test_get_subscription_info(self, subscription_service):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ."""
        info = subscription_service.get_subscription_info(SubscriptionType.PACKAGE_8)
        
        assert info["type"] == "package_8"
        assert info["price"] == 7000
        assert info["classes"] == 8
        assert info["duration_days"] == 60
        assert "8 –∑–∞–Ω—è—Ç–∏–π" in info["description"] 