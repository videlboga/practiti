"""
üß™ –¢–µ—Å—Ç—ã –¥–ª—è FeedbackService

–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.
"""

import pytest
from datetime import datetime, timedelta
from unittest.mock import AsyncMock

from backend.src.services.feedback_service import FeedbackService
from backend.src.models.feedback import (
    Feedback, FeedbackCreateData, FeedbackUpdateData,
    FeedbackType, FeedbackStatus
)
from backend.src.models.client import Client, ClientStatus
from backend.src.models.booking import Booking, BookingStatus


@pytest.fixture
def mock_notification_service():
    """–ú–æ–∫ —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    service = AsyncMock()
    service.send_immediate_notification.return_value = True
    return service


@pytest.fixture
def feedback_service(mock_notification_service):
    """–≠–∫–∑–µ–º–ø–ª—è—Ä FeedbackService –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
    return FeedbackService(mock_notification_service)


@pytest.fixture
def sample_client():
    """–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç."""
    return Client(
        id="client_123",
        name="–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞",
        telegram_id=987654321,
        phone="+7-900-987-65-43",
        status=ClientStatus.ACTIVE,
        yoga_experience=True,
        intensity_preference="–≤—ã—Å–æ–∫–∞—è",
        time_preference="–≤–µ—á–µ—Ä"
    )


@pytest.fixture
def sample_booking():
    """–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ."""
    # –°–æ–∑–¥–∞–µ–º booking —Å –¥–∞—Ç–æ–π –≤ –±—É–¥—É—â–µ–º, –∑–∞—Ç–µ–º –º–µ–Ω—è–µ–º
    booking = Booking(
        id="booking_456",
        client_id="client_123",
        class_date=datetime.now() + timedelta(hours=1),
        class_type="–≤–∏–Ω—å—è—Å–∞",
        status=BookingStatus.SCHEDULED,
        teacher_name="–ê–Ω–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞"
    )
    # –ú–µ–Ω—è–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è
    booking.class_date = datetime.now() - timedelta(hours=2)
    booking.status = BookingStatus.ATTENDED
    return booking


@pytest.mark.asyncio
async def test_create_feedback_request(feedback_service, sample_client, sample_booking):
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    feedback = await feedback_service.create_feedback_request(
        sample_client, 
        sample_booking,
        FeedbackType.POST_CLASS
    )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    assert feedback.client_id == sample_client.id
    assert feedback.booking_id == sample_booking.id
    assert feedback.type == FeedbackType.POST_CLASS
    assert feedback.status == FeedbackStatus.PENDING
    assert feedback.metadata['class_type'] == sample_booking.class_type
    assert feedback.metadata['teacher_name'] == sample_booking.teacher_name
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ feedback —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    stored_feedback = await feedback_service.get_feedback(feedback.id)
    assert stored_feedback is not None
    assert stored_feedback.id == feedback.id


@pytest.mark.asyncio
async def test_send_feedback_request_post_class(
    feedback_service, 
    sample_client, 
    sample_booking,
    mock_notification_service
):
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ—Å–ª–µ –∑–∞–Ω—è—Ç–∏—è."""
    # –°–æ–∑–¥–∞–µ–º feedback
    feedback = await feedback_service.create_feedback_request(
        sample_client, 
        sample_booking,
        FeedbackType.POST_CLASS
    )
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    result = await feedback_service.send_feedback_request(feedback, sample_client)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    assert result is True
    mock_notification_service.send_immediate_notification.assert_called_once()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–∑–æ–≤–∞
    call_args = mock_notification_service.send_immediate_notification.call_args
    assert call_args[1]['client_id'] == sample_client.id
    template_data = call_args[1]['template_data']
    assert template_data['feedback_type'] == 'post_class'
    assert template_data['feedback_id'] == feedback.id
    assert '–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ' in template_data['message']


@pytest.mark.asyncio
async def test_send_feedback_request_general(
    feedback_service, 
    sample_client, 
    sample_booking,
    mock_notification_service
):
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
    # –°–æ–∑–¥–∞–µ–º feedback
    feedback = await feedback_service.create_feedback_request(
        sample_client, 
        sample_booking,
        FeedbackType.GENERAL
    )
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    result = await feedback_service.send_feedback_request(feedback, sample_client)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    assert result is True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–∑–æ–≤–∞
    call_args = mock_notification_service.send_immediate_notification.call_args
    template_data = call_args[1]['template_data']
    assert template_data['feedback_type'] == 'general'
    assert '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏' in template_data['message']


@pytest.mark.asyncio
async def test_submit_feedback(feedback_service, sample_client, sample_booking):
    """–¢–µ—Å—Ç –ø—Ä–∏–Ω—è—Ç–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞."""
    # –°–æ–∑–¥–∞–µ–º feedback
    feedback = await feedback_service.create_feedback_request(
        sample_client, 
        sample_booking
    )
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    update_data = FeedbackUpdateData(
        rating=5,
        comment="–û—Ç–ª–∏—á–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ! –û—á–µ–Ω—å –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å!",
        class_rating=5,
        teacher_rating=5,
        studio_rating=4,
        would_recommend=True,
        difficulty_level="–Ω–æ—Ä–º–∞–ª—å–Ω–æ",
        favorite_part="–†–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ü–µ",
        improvement_suggestions="–ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ä–∞–∑–º–∏–Ω–∫—É"
    )
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    updated_feedback = await feedback_service.submit_feedback(feedback.id, update_data)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    assert updated_feedback.rating == 5
    assert updated_feedback.comment == "–û—Ç–ª–∏—á–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ! –û—á–µ–Ω—å –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å!"
    assert updated_feedback.class_rating == 5
    assert updated_feedback.teacher_rating == 5
    assert updated_feedback.studio_rating == 4
    assert updated_feedback.would_recommend is True
    assert updated_feedback.difficulty_level == "–Ω–æ—Ä–º–∞–ª—å–Ω–æ"
    assert updated_feedback.favorite_part == "–†–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ü–µ"
    assert updated_feedback.improvement_suggestions == "–ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ä–∞–∑–º–∏–Ω–∫—É"
    assert updated_feedback.status == FeedbackStatus.SUBMITTED
    assert updated_feedback.submitted_at is not None


@pytest.mark.asyncio
async def test_submit_feedback_not_found(feedback_service):
    """–¢–µ—Å—Ç –ø—Ä–∏–Ω—è—Ç–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º ID."""
    update_data = FeedbackUpdateData(rating=5, comment="–¢–µ—Å—Ç")
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    with pytest.raises(ValueError, match="–Ω–µ –Ω–∞–π–¥–µ–Ω–∞"):
        await feedback_service.submit_feedback("nonexistent_id", update_data)


@pytest.mark.asyncio
async def test_get_client_feedback(feedback_service, sample_client, sample_booking):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∫–ª–∏–µ–Ω—Ç–∞."""
    # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ feedback –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    feedback1 = await feedback_service.create_feedback_request(
        sample_client, sample_booking, FeedbackType.POST_CLASS
    )
    feedback2 = await feedback_service.create_feedback_request(
        sample_client, sample_booking, FeedbackType.GENERAL
    )
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    client_feedback = await feedback_service.get_client_feedback(sample_client.id)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    assert len(client_feedback) == 2
    feedback_ids = [f.id for f in client_feedback]
    assert feedback1.id in feedback_ids
    assert feedback2.id in feedback_ids


@pytest.mark.asyncio
async def test_get_booking_feedback(feedback_service, sample_client, sample_booking):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ –∑–∞–Ω—è—Ç–∏—é."""
    # –°–æ–∑–¥–∞–µ–º feedback –¥–ª—è –∑–∞–Ω—è—Ç–∏—è
    feedback = await feedback_service.create_feedback_request(
        sample_client, sample_booking
    )
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    booking_feedback = await feedback_service.get_booking_feedback(sample_booking.id)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    assert booking_feedback is not None
    assert booking_feedback.id == feedback.id
    assert booking_feedback.booking_id == sample_booking.id


@pytest.mark.asyncio
async def test_get_feedback_summary_empty(feedback_service):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    summary = await feedback_service.get_feedback_summary()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    assert summary.total_feedback == 0
    assert summary.average_rating is None
    assert summary.positive_feedback_percentage == 0.0


@pytest.mark.asyncio
async def test_get_feedback_summary_with_data(feedback_service, sample_client, sample_booking):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏."""
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º feedback
    feedback1 = await feedback_service.create_feedback_request(sample_client, sample_booking)
    feedback2 = await feedback_service.create_feedback_request(sample_client, sample_booking)
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏
    await feedback_service.submit_feedback(feedback1.id, FeedbackUpdateData(
        rating=5, comment="–û—Ç–ª–∏—á–Ω–æ!"
    ))
    await feedback_service.submit_feedback(feedback2.id, FeedbackUpdateData(
        rating=3, comment="–ù–æ—Ä–º–∞–ª—å–Ω–æ"
    ))
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    summary = await feedback_service.get_feedback_summary()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    assert summary.total_feedback == 2
    assert summary.average_rating == 4.0  # (5 + 3) / 2
    assert summary.positive_feedback_percentage == 50.0  # 1 –∏–∑ 2 –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö (>=4)
    assert summary.rating_distribution[5] == 1
    assert summary.rating_distribution[3] == 1


def test_feedback_templates(feedback_service, sample_client):
    """–¢–µ—Å—Ç —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
    # –°–æ–∑–¥–∞–µ–º mock feedback
    feedback = Feedback(
        client_id=sample_client.id,
        type=FeedbackType.POST_CLASS,
        metadata={'class_type': '—Ö–∞—Ç—Ö–∞'}
    )
    
    # –¢–µ—Å—Ç post-class —à–∞–±–ª–æ–Ω–∞
    template = feedback_service._get_post_class_feedback_template(feedback, sample_client)
    assert template['client_name'] == sample_client.name
    assert template['feedback_type'] == 'post_class'
    assert template['class_type'] == '—Ö–∞—Ç—Ö–∞'
    assert '–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ' in template['message']
    
    # –¢–µ—Å—Ç general —à–∞–±–ª–æ–Ω–∞
    feedback.type = FeedbackType.GENERAL
    template = feedback_service._get_general_feedback_template(feedback, sample_client)
    assert template['feedback_type'] == 'general'
    assert '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏' in template['message']


@pytest.mark.asyncio
async def test_feedback_properties(feedback_service, sample_client, sample_booking):
    """–¢–µ—Å—Ç —Å–≤–æ–π—Å—Ç–≤ –º–æ–¥–µ–ª–∏ Feedback."""
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º feedback
    feedback = await feedback_service.create_feedback_request(sample_client, sample_booking)
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏
    await feedback_service.submit_feedback(feedback.id, FeedbackUpdateData(
        rating=4,
        class_rating=5,
        teacher_rating=4,
        studio_rating=3,
        comment="–•–æ—Ä–æ—à–µ–µ –∑–∞–Ω—è—Ç–∏–µ"
    ))
    
    updated_feedback = await feedback_service.get_feedback(feedback.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞
    assert updated_feedback.overall_rating == 4.0  # (4 + 5 + 4 + 3) / 4
    assert updated_feedback.is_positive is True  # >= 4.0
    assert updated_feedback.is_complete is True  # –µ—Å—Ç—å rating –∏ comment 