"""
üß™ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã API

–ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã API endpoints –±–µ–∑ –º–æ–∫–æ–≤.
"""

import pytest
from fastapi.testclient import TestClient
from datetime import datetime, date, timedelta

from backend.src.api.main import create_app


@pytest.fixture
def client():
    """–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç FastAPI."""
    app = create_app()
    return TestClient(app)


class TestAPIIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã API."""
    
    def test_health_check(self, client):
        """–¢–µ—Å—Ç health check endpoint."""
        response = client.get("/health")
        
        assert response.status_code == 200
        data = response.json()
        assert data["status"] == "healthy"
        assert data["service"] == "practiti-admin-api"
        assert data["version"] == "1.0.0"
    
    def test_clients_list_empty(self, client):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤."""
        response = client.get("/api/v1/clients/")
        
        assert response.status_code == 200
        data = response.json()
        assert data["total"] == 0
        assert data["page"] == 1
        assert data["limit"] == 20
        assert len(data["items"]) == 0
    
    def test_subscriptions_list_empty(self, client):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤."""
        response = client.get("/api/v1/subscriptions/")
        
        assert response.status_code == 200
        data = response.json()
        assert data["total"] == 0
        assert data["page"] == 1
        assert data["limit"] == 20
        assert len(data["items"]) == 0
    
    def test_notifications_list_empty(self, client):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        response = client.get("/api/v1/notifications/")
        
        assert response.status_code == 200
        data = response.json()
        assert data["total"] == 0
        assert data["page"] == 1
        assert data["limit"] == 20
        assert len(data["items"]) == 0
    
    def test_analytics_overview(self, client):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏."""
        response = client.get("/api/v1/analytics/overview")
        
        assert response.status_code == 200
        data = response.json()
        assert "period" in data
        assert "data" in data
        assert "generated_at" in data
    
    def test_analytics_clients(self, client):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤."""
        response = client.get("/api/v1/analytics/clients")
        
        assert response.status_code == 200
        data = response.json()
        assert data["total_clients"] == 0
        assert data["active_clients"] == 0
        assert data["new_clients_this_month"] == 0
    
    def test_create_client_invalid_data(self, client):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
        invalid_data = {
            "name": "",  # –ü—É—Å—Ç–æ–µ –∏–º—è
            "phone": "invalid",  # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω
            "telegram_id": "not_a_number"  # –ù–µ —á–∏—Å–ª–æ
        }
        
        response = client.post("/api/v1/clients/", json=invalid_data)
        assert response.status_code == 422  # Validation error
    
    def test_get_nonexistent_client(self, client):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞."""
        response = client.get("/api/v1/clients/nonexistent-id")
        assert response.status_code == 404
    
    def test_get_nonexistent_subscription(self, client):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞."""
        response = client.get("/api/v1/subscriptions/nonexistent-id")
        assert response.status_code == 404
    
    def test_get_nonexistent_notification(self, client):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
        response = client.get("/api/v1/notifications/nonexistent-id")
        assert response.status_code == 404 