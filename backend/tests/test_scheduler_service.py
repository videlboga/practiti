"""
üß™ –¢–µ—Å—Ç—ã –¥–ª—è SchedulerService

–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á:
- –ó–∞–ø—É—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
- –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
- –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏
"""

import pytest
import asyncio
from datetime import datetime, timedelta
from unittest.mock import AsyncMock, MagicMock, patch

from backend.src.services.scheduler_service import SchedulerService
from backend.src.models.client import Client, ClientStatus
from backend.src.models.subscription import Subscription, SubscriptionStatus, SubscriptionType
from backend.src.models.notification import Notification, NotificationStatus, NotificationType, NotificationPriority


@pytest.fixture
def mock_client_service():
    """–ú–æ–∫ —Å–µ—Ä–≤–∏—Å–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤."""
    service = AsyncMock()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    sample_client = Client(
        id="test-client-1",
        name="–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞",
        phone="+79161234567",
        telegram_id=123456789,
        yoga_experience=True,
        intensity_preference="—Å—Ä–µ–¥–Ω—è—è",
        time_preference="—É—Ç—Ä–æ",
        status=ClientStatus.ACTIVE
    )
    
    service.get_client.return_value = sample_client
    service.get_active_clients.return_value = [sample_client]
    
    return service


@pytest.fixture
def mock_subscription_service():
    """–ú–æ–∫ —Å–µ—Ä–≤–∏—Å–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤."""
    service = AsyncMock()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    sample_subscription = Subscription(
        id="test-subscription-1",
        client_id="test-client-1",
        type=SubscriptionType.PACKAGE_8,
        total_classes=8,
        used_classes=2,
        price=9600,
        status=SubscriptionStatus.ACTIVE,
        start_date=datetime.now().date(),
        end_date=(datetime.now() + timedelta(days=30)).date(),
        created_at=datetime.now()
    )
    
    service.get_subscription.return_value = sample_subscription
    service.get_client_subscriptions.return_value = [sample_subscription]
    service.get_all_subscriptions.return_value = [sample_subscription]
    
    return service


@pytest.fixture
def mock_notification_service():
    """–ú–æ–∫ —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    service = AsyncMock()
    
    service.create_notification.return_value = "test-notification-1"
    service.send_notification.return_value = True
    service.process_scheduled_notifications.return_value = 5
    service.retry_failed_notifications.return_value = 2
    
    return service


@pytest.fixture
def scheduler_service(mock_client_service, mock_subscription_service, mock_notification_service):
    """–≠–∫–∑–µ–º–ø–ª—è—Ä SchedulerService –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
    return SchedulerService(
        mock_client_service,
        mock_subscription_service,
        mock_notification_service
    )


class TestSchedulerServiceInitialization:
    """–¢–µ—Å—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SchedulerService."""
    
    def test_scheduler_service_initialization(self, scheduler_service):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞."""
        assert scheduler_service._client_service is not None
        assert scheduler_service._subscription_service is not None
        assert scheduler_service._notification_service is not None
        assert scheduler_service._scheduler is not None
        assert scheduler_service._is_running is False
    
    def test_scheduler_configuration(self, scheduler_service):
        """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        scheduler = scheduler_service._scheduler
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        assert scheduler.timezone.zone == 'Europe/Moscow'
        assert 'default' in scheduler._jobstores
        assert 'default' in scheduler._executors


class TestSchedulerLifecycle:
    """–¢–µ—Å—Ç—ã –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
    
    @pytest.mark.asyncio
    async def test_start_scheduler_success(self, scheduler_service):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        with patch.object(scheduler_service._scheduler, 'start') as mock_start:
            await scheduler_service.start()
            
            assert scheduler_service._is_running is True
            mock_start.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_start_scheduler_already_running(self, scheduler_service):
        """–¢–µ—Å—Ç –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–ø—É—Å–∫–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        scheduler_service._is_running = True
        
        with patch.object(scheduler_service._scheduler, 'start') as mock_start:
            await scheduler_service.start()
            
            # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ
            mock_start.assert_not_called()
    
    @pytest.mark.asyncio
    async def test_stop_scheduler_success(self, scheduler_service):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        scheduler_service._is_running = True
        
        with patch.object(scheduler_service._scheduler, 'shutdown') as mock_shutdown:
            await scheduler_service.stop()
            
            assert scheduler_service._is_running is False
            mock_shutdown.assert_called_once_with(wait=True)
    
    @pytest.mark.asyncio
    async def test_stop_scheduler_not_running(self, scheduler_service):
        """–¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        scheduler_service._is_running = False
        
        with patch.object(scheduler_service._scheduler, 'shutdown') as mock_shutdown:
            await scheduler_service.stop()
            
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è
            mock_shutdown.assert_not_called()


class TestJobScheduling:
    """–¢–µ—Å—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π."""
    
    @pytest.mark.asyncio
    async def test_schedule_class_reminder_success(self, scheduler_service):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–Ω—è—Ç–∏–∏."""
        client_id = "test-client-1"
        class_date = datetime.now() + timedelta(hours=4)
        class_type = "–•–∞—Ç—Ö–∞-–π–æ–≥–∞"
        
        with patch.object(scheduler_service._scheduler, 'add_job') as mock_add_job:
            job_id = await scheduler_service.schedule_class_reminder(
                client_id, class_date, class_type
            )
            
            assert job_id != ""
            assert job_id.startswith("class_reminder_")
            mock_add_job.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_schedule_class_reminder_past_time(self, scheduler_service):
        """–¢–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è."""
        client_id = "test-client-1"
        class_date = datetime.now() - timedelta(hours=1)  # –ü—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è
        class_type = "–•–∞—Ç—Ö–∞-–π–æ–≥–∞"
        
        with patch.object(scheduler_service._scheduler, 'add_job') as mock_add_job:
            job_id = await scheduler_service.schedule_class_reminder(
                client_id, class_date, class_type
            )
            
            assert job_id == ""  # –ü—É—Å—Ç–æ–π ID –ø—Ä–∏ –æ—à–∏–±–∫–µ
            mock_add_job.assert_not_called()
    
    @pytest.mark.asyncio
    async def test_schedule_subscription_expiry_reminder_success(self, scheduler_service):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞."""
        subscription_id = "test-subscription-1"
        expiry_date = datetime.now() + timedelta(days=5)
        
        with patch.object(scheduler_service._scheduler, 'add_job') as mock_add_job:
            job_id = await scheduler_service.schedule_subscription_expiry_reminder(
                subscription_id, expiry_date
            )
            
            assert job_id != ""
            assert job_id.startswith("subscription_expiry_")
            mock_add_job.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_cancel_job_success(self, scheduler_service):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞–Ω–∏—è."""
        job_id = "test-job-1"
        
        with patch.object(scheduler_service._scheduler, 'remove_job') as mock_remove_job:
            result = await scheduler_service.cancel_job(job_id)
            
            assert result is True
            mock_remove_job.assert_called_once_with(job_id)
    
    @pytest.mark.asyncio
    async def test_cancel_job_not_found(self, scheduler_service):
        """–¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ã –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è."""
        job_id = "nonexistent-job"
        
        with patch.object(scheduler_service._scheduler, 'remove_job', side_effect=Exception("Job not found")):
            result = await scheduler_service.cancel_job(job_id)
            
            assert result is False
    
    @pytest.mark.asyncio
    async def test_get_scheduled_jobs(self, scheduler_service):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π."""
        # –ú–æ–∫–∞–µ–º –∑–∞–¥–∞–Ω–∏—è
        mock_job = MagicMock()
        mock_job.id = "test-job-1"
        mock_job.name = "Test Job"
        mock_job.next_run_time = datetime.now()
        mock_job.trigger = "interval"
        
        with patch.object(scheduler_service._scheduler, 'get_jobs', return_value=[mock_job]):
            jobs = await scheduler_service.get_scheduled_jobs()
            
            assert len(jobs) == 1
            assert jobs[0]['id'] == "test-job-1"
            assert jobs[0]['name'] == "Test Job"


class TestPeriodicTasks:
    """–¢–µ—Å—Ç—ã –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á."""
    
    @pytest.mark.asyncio
    async def test_process_scheduled_notifications(self, scheduler_service, mock_notification_service):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        await scheduler_service._process_scheduled_notifications()
        
        mock_notification_service.process_scheduled_notifications.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_retry_failed_notifications(self, scheduler_service, mock_notification_service):
        """–¢–µ—Å—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        await scheduler_service._retry_failed_notifications()
        
        mock_notification_service.retry_failed_notifications.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_send_class_reminders(self, scheduler_service, mock_client_service, mock_subscription_service):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∑–∞–Ω—è—Ç–∏—è—Ö."""
        await scheduler_service._send_class_reminders()
        
        mock_client_service.get_active_clients.assert_called_once()
        mock_subscription_service.get_client_subscriptions.assert_called()
    
    @pytest.mark.asyncio
    async def test_check_expiring_subscriptions(self, scheduler_service, mock_subscription_service):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤."""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç, –∏—Å—Ç–µ–∫–∞—é—â–∏–π —Å–∫–æ—Ä–æ
        expiring_subscription = Subscription(
            id="expiring-subscription",
            client_id="test-client-1",
            type=SubscriptionType.PACKAGE_8,
            total_classes=8,
            used_classes=2,
            price=9600,
            status=SubscriptionStatus.ACTIVE,
            start_date=datetime.now().date(),
            end_date=(datetime.now() + timedelta(days=2)).date(),  # –ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 2 –¥–Ω—è
            created_at=datetime.now()
        )
        
        mock_subscription_service.get_all_subscriptions.return_value = [expiring_subscription]
        
        await scheduler_service._check_expiring_subscriptions()
        
        mock_subscription_service.get_all_subscriptions.assert_called_once()


class TestNotificationSending:
    """–¢–µ—Å—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    
    @pytest.mark.asyncio
    async def test_send_single_class_reminder(self, scheduler_service, mock_client_service, mock_notification_service):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∑–∞–Ω—è—Ç–∏–∏."""
        client_id = "test-client-1"
        class_date = datetime.now() + timedelta(hours=2)
        class_type = "–•–∞—Ç—Ö–∞-–π–æ–≥–∞"
        
        await scheduler_service._send_single_class_reminder(client_id, class_date, class_type)
        
        mock_client_service.get_client.assert_called_once_with(client_id)
        mock_notification_service.create_notification.assert_called_once()
        mock_notification_service.send_notification.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_send_subscription_expiry_reminder(self, scheduler_service, mock_subscription_service, mock_client_service, mock_notification_service):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞."""
        subscription_id = "test-subscription-1"
        
        await scheduler_service._send_subscription_expiry_reminder(subscription_id)
        
        mock_subscription_service.get_subscription.assert_called_once_with(subscription_id)
        mock_client_service.get_client.assert_called_once()
        mock_notification_service.create_notification.assert_called_once()
        mock_notification_service.send_notification.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_send_daily_schedule_reminder(self, scheduler_service, mock_client_service, mock_notification_service):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏."""
        client_id = "test-client-1"
        date = datetime.now() + timedelta(days=1)
        
        await scheduler_service._send_daily_schedule_reminder(client_id, date)
        
        mock_client_service.get_client.assert_called_once_with(client_id)
        mock_notification_service.create_notification.assert_called_once()
        mock_notification_service.send_notification.assert_called_once()


class TestScheduleGeneration:
    """–¢–µ—Å—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
    
    def test_get_schedule_for_day_monday(self, scheduler_service):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞."""
        schedule = scheduler_service._get_schedule_for_day(0)  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        
        assert "–•–∞—Ç—Ö–∞-–π–æ–≥–∞" in schedule
        assert "–í–∏–Ω—å—è—Å–∞-—Ñ–ª–æ—É" in schedule
        assert "–ô–æ–≥–∞-–Ω–∏–¥—Ä–∞" in schedule
    
    def test_get_schedule_for_day_weekend(self, scheduler_service):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö."""
        saturday_schedule = scheduler_service._get_schedule_for_day(5)  # –°—É–±–±–æ—Ç–∞
        sunday_schedule = scheduler_service._get_schedule_for_day(6)    # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        
        assert "–°–µ–º–µ–π–Ω–∞—è –π–æ–≥–∞" in saturday_schedule
        assert "–ú–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞" in sunday_schedule
    
    def test_get_schedule_for_invalid_day(self, scheduler_service):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –¥–Ω—è."""
        schedule = scheduler_service._get_schedule_for_day(10)  # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–µ–Ω—å
        
        assert schedule == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è"


class TestErrorHandling:
    """–¢–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫."""
    
    @pytest.mark.asyncio
    async def test_start_scheduler_error(self, scheduler_service):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        with patch.object(scheduler_service._scheduler, 'start', side_effect=Exception("Start error")):
            with pytest.raises(Exception, match="Start error"):
                await scheduler_service.start()
    
    @pytest.mark.asyncio
    async def test_notification_sending_error(self, scheduler_service, mock_client_service, mock_notification_service):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
        mock_client_service.get_client.side_effect = Exception("Client not found")
        
        # –ù–µ –¥–æ–ª–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É
        await scheduler_service._send_single_class_reminder("invalid-client", datetime.now(), "Test")
        
        mock_notification_service.create_notification.assert_not_called()
    
    @pytest.mark.asyncio
    async def test_periodic_task_error_handling(self, scheduler_service, mock_notification_service):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á–∞—Ö."""
        mock_notification_service.process_scheduled_notifications.side_effect = Exception("Processing error")
        
        # –ù–µ –¥–æ–ª–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        await scheduler_service._process_scheduled_notifications()
        
        mock_notification_service.process_scheduled_notifications.assert_called_once() 