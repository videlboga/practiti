"""
üß™ –¢–µ—Å—Ç—ã –¥–ª—è REST API

–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö API endpoints.
–ü—Ä–∏–Ω—Ü–∏–ø CyberKitty: –ø—Ä–æ—Å—Ç–æ—Ç–∞ –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ.
"""

import pytest
from fastapi.testclient import TestClient
from datetime import datetime
from unittest.mock import AsyncMock, patch

from backend.src.api.main import app
from backend.src.models.client import Client, ClientStatus
from backend.src.models.subscription import Subscription, SubscriptionStatus, SubscriptionType
from backend.src.models.notification import Notification, NotificationStatus, NotificationType, NotificationPriority


@pytest.fixture
def client():
    """–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç FastAPI."""
    return TestClient(app)


@pytest.fixture
def sample_client():
    """–û–±—Ä–∞–∑–µ—Ü –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
    return Client(
        id="test-client-1",
        name="–¢–µ—Å—Ç –ö–ª–∏–µ–Ω—Ç",
        phone="+79991234567",
        telegram_id=123456789,
        yoga_experience=True,
        intensity_preference="—Å—Ä–µ–¥–Ω—è—è",
        time_preference="—É—Ç—Ä–æ",
        age=25,
        injuries="–ù–µ—Ç",
        goals="–ó–¥–æ—Ä–æ–≤—å–µ",
        how_found_us="–ò–Ω—Ç–µ—Ä–Ω–µ—Ç",
        status=ClientStatus.ACTIVE,
        created_at=datetime.now()
    )


@pytest.fixture
def sample_subscription():
    """–û–±—Ä–∞–∑–µ—Ü –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
    from datetime import date, timedelta
    return Subscription(
        id="test-subscription-1",
        client_id="test-client-1",
        type=SubscriptionType.PACKAGE_8,
        total_classes=8,
        used_classes=2,
        price=9600,
        status=SubscriptionStatus.ACTIVE,
        start_date=date.today(),
        end_date=date.today() + timedelta(days=30),
        created_at=datetime.now()
    )


@pytest.fixture
def sample_notification():
    """–û–±—Ä–∞–∑–µ—Ü —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
    return Notification(
        id="test-notification-1",
        client_id="test-client-1",
        type=NotificationType.GENERAL_INFO,
        title="–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
        message="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        priority=NotificationPriority.NORMAL,
        status=NotificationStatus.PENDING,
        scheduled_at=None,
        sent_at=None,
        delivered_at=None,
        retry_count=0,
        metadata={},
        created_at=datetime.now()
    )


class TestHealthCheck:
    """–¢–µ—Å—Ç—ã health check endpoint."""
    
    def test_health_check(self, client):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è API."""
        response = client.get("/health")
        
        assert response.status_code == 200
        data = response.json()
        assert data["status"] == "healthy"
        assert data["service"] == "practiti-admin-api"
        assert data["version"] == "1.0.0"


class TestClientsAPI:
    """–¢–µ—Å—Ç—ã API –∫–ª–∏–µ–Ω—Ç–æ–≤."""
    
    @patch('backend.src.api.routers.clients.get_client_service')
    def test_get_clients_list(self, mock_service, client, sample_client):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤."""
        # –ú–æ–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
        mock_client_service = AsyncMock()
        mock_client_service.get_all_clients.return_value = [sample_client]
        mock_service.return_value = mock_client_service
        
        response = client.get("/api/v1/clients/")
        
        assert response.status_code == 200
        data = response.json()
        assert data["total"] == 1
        assert data["page"] == 1
        assert data["limit"] == 20
        assert len(data["items"]) == 1
        assert data["items"][0]["name"] == "–¢–µ—Å—Ç –ö–ª–∏–µ–Ω—Ç"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –±—ã–ª –≤—ã–∑–≤–∞–Ω
        mock_client_service.get_all_clients.assert_called_once()
    
    @patch('backend.src.api.routers.clients.get_client_service')
    def test_get_client_by_id(self, mock_service, client, sample_client):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID."""
        # –ú–æ–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
        mock_client_service = AsyncMock()
        mock_client_service.get_client.return_value = sample_client
        mock_service.return_value = mock_client_service
        
        response = client.get("/api/v1/clients/test-client-1")
        
        assert response.status_code == 200
        data = response.json()
        assert data["id"] == "test-client-1"
        assert data["name"] == "–¢–µ—Å—Ç –ö–ª–∏–µ–Ω—Ç"
        assert data["phone"] == "+79991234567"
    
    @patch('backend.src.api.routers.clients.get_client_service')
    def test_create_client(self, mock_service, client, sample_client):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞."""
        # –ú–æ–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
        mock_client_service = AsyncMock()
        mock_client_service.create_client.return_value = sample_client
        mock_service.return_value = mock_client_service
        
        client_data = {
            "name": "–¢–µ—Å—Ç –ö–ª–∏–µ–Ω—Ç",
            "phone": "+79991234567",
            "telegram_id": 123456789,
            "yoga_experience": True,
            "intensity_preference": "—Å—Ä–µ–¥–Ω—è—è",
            "time_preference": "—É—Ç—Ä–æ",
            "age": 25,
            "injuries": "–ù–µ—Ç",
            "goals": "–ó–¥–æ—Ä–æ–≤—å–µ",
            "how_found_us": "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç"
        }
        
        response = client.post("/api/v1/clients/", json=client_data)
        
        assert response.status_code == 201
        data = response.json()
        assert data["name"] == "–¢–µ—Å—Ç –ö–ª–∏–µ–Ω—Ç"
        assert data["phone"] == "+79991234567"
    
    @patch('backend.src.api.routers.clients.get_client_service')
    def test_client_not_found(self, mock_service, client):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞."""
        # –ú–æ–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
        mock_client_service = AsyncMock()
        mock_client_service.get_client.return_value = None
        mock_service.return_value = mock_client_service
        
        response = client.get("/api/v1/clients/nonexistent")
        
        assert response.status_code == 404


class TestSubscriptionsAPI:
    """–¢–µ—Å—Ç—ã API –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤."""
    
    @patch('backend.src.api.routers.subscriptions.get_subscription_service')
    def test_get_subscriptions_list(self, mock_service, client, sample_subscription):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤."""
        # –ú–æ–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
        mock_subscription_service = AsyncMock()
        mock_subscription_service.get_all_subscriptions.return_value = [sample_subscription]
        mock_service.return_value = mock_subscription_service
        
        response = client.get("/api/v1/subscriptions/")
        
        assert response.status_code == 200
        data = response.json()
        assert data["total"] == 1
        assert len(data["items"]) == 1
        assert data["items"][0]["client_id"] == "test-client-1"
    
    @patch('backend.src.api.routers.subscriptions.get_subscription_service')
    def test_create_subscription(self, mock_service, client, sample_subscription):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞."""
        # –ú–æ–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
        mock_subscription_service = AsyncMock()
        mock_subscription_service.create_subscription.return_value = sample_subscription
        mock_service.return_value = mock_subscription_service
        
        subscription_data = {
            "client_id": "test-client-1",
            "subscription_type": "package_8",
            "classes_total": 8,
            "price_paid": 9600.0,
            "payment_method": "card",
            "notes": "–¢–µ—Å—Ç–æ–≤—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç"
        }
        
        response = client.post("/api/v1/subscriptions/", json=subscription_data)
        
        assert response.status_code == 201
        data = response.json()
        assert data["client_id"] == "test-client-1"
        assert data["classes_total"] == 8
    
    @patch('backend.src.api.routers.subscriptions.get_subscription_service')
    def test_use_class(self, mock_service, client, sample_subscription):
        """–¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è."""
        # –ú–æ–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
        mock_subscription_service = AsyncMock()
        mock_subscription_service.use_class.return_value = sample_subscription
        mock_service.return_value = mock_subscription_service
        
        use_class_data = {
            "subscription_id": "test-subscription-1",
            "class_date": "2024-01-15T10:00:00",
            "class_type": "Hatha Yoga",
            "instructor": "–ê–Ω–Ω–∞",
            "notes": "–û—Ç–ª–∏—á–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ"
        }
        
        response = client.post("/api/v1/subscriptions/test-subscription-1/use-class", json=use_class_data)
        
        assert response.status_code == 200
        data = response.json()
        assert data["id"] == "test-subscription-1"


class TestNotificationsAPI:
    """–¢–µ—Å—Ç—ã API —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    
    @patch('backend.src.api.routers.notifications.get_notification_service')
    def test_get_notifications_list(self, mock_service, client, sample_notification):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        # –ú–æ–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
        mock_notification_service = AsyncMock()
        mock_notification_service.get_all_notifications.return_value = [sample_notification]
        mock_service.return_value = mock_notification_service
        
        response = client.get("/api/v1/notifications/")
        
        assert response.status_code == 200
        data = response.json()
        assert data["total"] == 1
        assert len(data["items"]) == 1
        assert data["items"][0]["client_id"] == "test-client-1"
    
    @patch('backend.src.api.routers.notifications.get_notification_service')
    def test_create_notification(self, mock_service, client, sample_notification):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
        # –ú–æ–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
        mock_notification_service = AsyncMock()
        mock_notification_service.create_notification.return_value = sample_notification
        mock_service.return_value = mock_notification_service
        
        notification_data = {
            "client_id": "test-client-1",
            "notification_type": "general_info",
            "title": "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
            "message": "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            "priority": "normal"
        }
        
        response = client.post("/api/v1/notifications/", json=notification_data)
        
        assert response.status_code == 201
        data = response.json()
        assert data["client_id"] == "test-client-1"
        assert data["title"] == "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
    
    @patch('backend.src.api.routers.notifications.get_notification_service')
    def test_send_notification(self, mock_service, client, sample_notification):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
        # –ú–æ–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
        mock_notification_service = AsyncMock()
        mock_notification_service.send_notification.return_value = sample_notification
        mock_service.return_value = mock_notification_service
        
        response = client.post("/api/v1/notifications/test-notification-1/send")
        
        assert response.status_code == 200
        data = response.json()
        assert data["id"] == "test-notification-1"


class TestAnalyticsAPI:
    """–¢–µ—Å—Ç—ã API –∞–Ω–∞–ª–∏—Ç–∏–∫–∏."""
    
    @patch('backend.src.api.routers.analytics.get_client_service')
    @patch('backend.src.api.routers.analytics.get_subscription_service')
    @patch('backend.src.api.routers.analytics.get_notification_service')
    def test_overview_analytics(self, mock_notif_service, mock_sub_service, mock_client_service, 
                               client, sample_client, sample_subscription, sample_notification):
        """–¢–µ—Å—Ç –æ–±—â–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏."""
        # –ú–æ–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        mock_client_service.return_value.get_all_clients.return_value = [sample_client]
        mock_sub_service.return_value.get_all_subscriptions.return_value = [sample_subscription]
        mock_notif_service.return_value.get_all_notifications.return_value = [sample_notification]
        
        response = client.get("/api/v1/analytics/overview")
        
        assert response.status_code == 200
        data = response.json()
        assert data["period"] == "month"
        assert "data" in data
        assert data["data"]["total_clients"] == 1
        assert data["data"]["total_subscriptions"] == 1
        assert data["data"]["total_notifications"] == 1
    
    @patch('backend.src.api.routers.analytics.get_client_service')
    def test_client_analytics(self, mock_service, client, sample_client):
        """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤."""
        # –ú–æ–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
        mock_client_service = AsyncMock()
        mock_client_service.get_all_clients.return_value = [sample_client]
        mock_service.return_value = mock_client_service
        
        response = client.get("/api/v1/analytics/clients")
        
        assert response.status_code == 200
        data = response.json()
        assert data["total_clients"] == 1
        assert data["active_clients"] == 1
        assert "clients_by_experience" in data
        assert "clients_by_status" in data
    
    @patch('backend.src.api.routers.analytics.get_subscription_service')
    def test_subscription_analytics(self, mock_service, client, sample_subscription):
        """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤."""
        # –ú–æ–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
        mock_subscription_service = AsyncMock()
        mock_subscription_service.get_all_subscriptions.return_value = [sample_subscription]
        mock_service.return_value = mock_subscription_service
        
        response = client.get("/api/v1/analytics/subscriptions")
        
        assert response.status_code == 200
        data = response.json()
        assert data["total_subscriptions"] == 1
        assert data["active_subscriptions"] == 1
        assert "subscriptions_by_type" in data
        assert data["average_subscription_value"] == 9600.0


class TestAPIValidation:
    """–¢–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ API."""
    
    def test_invalid_client_data(self, client):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞."""
        invalid_data = {
            "name": "",  # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è
            "phone": "invalid-phone",  # –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            "telegram_id": "not_a_number"  # –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø
        }
        
        response = client.post("/api/v1/clients/", json=invalid_data)
        
        assert response.status_code == 422  # Validation Error
    
    def test_invalid_subscription_data(self, client):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞."""
        invalid_data = {
            "client_id": "",  # –ü—É—Å—Ç–æ–π ID –∫–ª–∏–µ–Ω—Ç–∞
            "classes_total": -1,  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            "price_paid": -100  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞
        }
        
        response = client.post("/api/v1/subscriptions/", json=invalid_data)
        
        assert response.status_code == 422  # Validation Error
    
    def test_pagination_validation(self, client):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏."""
        # –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        response = client.get("/api/v1/clients/?page=0")
        assert response.status_code == 422
        
        # –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –ª–∏–º–∏—Ç
        response = client.get("/api/v1/clients/?limit=1000")
        assert response.status_code == 422


if __name__ == "__main__":
    pytest.main([__file__, "-v"]) 