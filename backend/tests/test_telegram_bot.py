"""
üß™ –¢–µ—Å—Ç—ã –¥–ª—è Telegram Bot

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±–æ—Ç–∞.
–ü—Ä–∏–Ω—Ü–∏–ø CyberKitty: –ø—Ä–æ—Å—Ç–æ—Ç–∞ –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ.
"""

import pytest
from unittest.mock import AsyncMock, Mock, patch
from telegram import Update, User, Chat, Message
from telegram.ext import ContextTypes

from src.config.settings import TelegramConfig
from src.presentation.telegram.bot import PrakritiTelegramBot
from src.presentation.telegram.handlers.command_handlers import CommandHandlers
from src.services.client_service import ClientService
from src.models.client import Client, ClientStatus


class TestCommandHandlers:
    """–¢–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥."""
    
    @pytest.fixture
    def mock_client_service(self):
        """–ú–æ–∫ ClientService –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
        return AsyncMock(spec=ClientService)
    
    @pytest.fixture
    def command_handlers(self, mock_client_service):
        """–≠–∫–∑–µ–º–ø–ª—è—Ä CommandHandlers –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
        return CommandHandlers(mock_client_service)
    
    @pytest.fixture
    def mock_update(self):
        """–ú–æ–∫ Telegram Update."""
        user = Mock(spec=User)
        user.id = 123456789
        user.username = "test_user"
        user.first_name = "–¢–µ—Å—Ç"
        
        chat = Mock(spec=Chat)
        chat.id = 123456789
        chat.send_message = AsyncMock()
        
        message = Mock(spec=Message)
        message.text = "/start"
        
        update = Mock(spec=Update)
        update.effective_user = user
        update.effective_chat = chat
        update.message = message
        
        return update
    
    @pytest.fixture
    def mock_context(self):
        """–ú–æ–∫ Context."""
        context = Mock(spec=ContextTypes.DEFAULT_TYPE)
        context.user_data = {}
        return context
    
    @pytest.mark.asyncio
    async def test_start_command_new_user(self, command_handlers, mock_client_service, mock_update, mock_context):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        # Arrange
        mock_client_service.get_client_by_telegram_id.return_value = None
        
        # Act
        await command_handlers.start_command(mock_update, mock_context)
        
        # Assert
        mock_client_service.get_client_by_telegram_id.assert_called_once_with(123456789)
        mock_update.effective_chat.send_message.assert_called_once()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        call_args = mock_update.effective_chat.send_message.call_args[0][0]
        assert "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å" in call_args
        assert "Practiti" in call_args
    
    @pytest.mark.asyncio
    async def test_help_command_new_user(self, command_handlers, mock_client_service, mock_update, mock_context):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /help –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        # Arrange
        mock_client_service.get_client_by_telegram_id.return_value = None
        
        # Act
        await command_handlers.help_command(mock_update, mock_context)
        
        # Assert
        mock_update.effective_chat.send_message.assert_called_once()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        call_args = mock_update.effective_chat.send_message.call_args
        message_text = call_args[0][0]
        assert "/register" in message_text
        assert "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" in message_text
    
    @pytest.mark.asyncio
    async def test_info_command(self, command_handlers, mock_client_service, mock_update, mock_context):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /info."""
        # Act
        await command_handlers.info_command(mock_update, mock_context)
        
        # Assert
        mock_update.effective_chat.send_message.assert_called_once()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—É–¥–∏–∏
        call_args = mock_update.effective_chat.send_message.call_args
        message_text = call_args[0][0]
        assert "Practiti" in message_text
        assert "–π–æ–≥–∞" in message_text.lower()


class TestPrakritiTelegramBot:
    """–¢–µ—Å—Ç—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ Telegram Bot."""
    
    @pytest.fixture
    def telegram_config(self):
        """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
        return TelegramConfig(
            bot_token="fake_token",
            admin_chat_id=123456789
        )
    
    @pytest.fixture
    def mock_client_service(self):
        """–ú–æ–∫ ClientService –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
        return AsyncMock(spec=ClientService)
    
    @pytest.fixture
    def mock_subscription_service(self):
        """–ú–æ–∫ SubscriptionService –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
        return AsyncMock()
    
    def test_bot_initialization(self, telegram_config, mock_client_service, mock_subscription_service):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞."""
        # Act
        bot = PrakritiTelegramBot(telegram_config, mock_client_service, mock_subscription_service)
        
        # Assert
        assert bot.config == telegram_config
        assert bot.client_service == mock_client_service
        assert bot.subscription_service == mock_subscription_service
        assert bot.application is None
        assert isinstance(bot.command_handlers, CommandHandlers) 