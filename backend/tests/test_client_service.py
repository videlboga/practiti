"""
üß™ Unit —Ç–µ—Å—Ç—ã –¥–ª—è ClientService

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å—é –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏.
–ü—Ä–∏–Ω—Ü–∏–ø CyberKitty: –º–æ–∫ –æ—Ç–≤–µ—Ç –≤ —Ç–µ—Å—Ç–µ —ç—Ç–æ –ø—Ä–æ–≤–∞–ª —Ç–µ—Å—Ç–∞.
"""

import pytest
from unittest.mock import AsyncMock, Mock
from datetime import datetime

from src.models.client import Client, ClientCreateData, ClientUpdateData, ClientStatus
from src.services.client_service import ClientService
from src.utils.exceptions import ValidationError, BusinessLogicError


class TestClientService:
    """–¢–µ—Å—Ç—ã ClientService."""
    
    @pytest.fixture
    def mock_repository(self):
        """–ú–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
        repository = AsyncMock()
        return repository
    
    @pytest.fixture
    def client_service(self, mock_repository):
        """–≠–∫–∑–µ–º–ø–ª—è—Ä ClientService –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
        return ClientService(mock_repository)
    
    @pytest.fixture
    def sample_client_create_data(self):
        """–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞."""
        return ClientCreateData(
            name="–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞",
            phone="+79161234567",
            telegram_id=123456789,
            yoga_experience=True,
            intensity_preference="—Å—Ä–µ–¥–Ω—è—è",
            time_preference="–≤–µ—á–µ—Ä",
            age=30,
            injuries="–ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–ø–∏–Ω–æ–π",
            goals="–£–ª—É—á—à–µ–Ω–∏–µ –≥–∏–±–∫–æ—Å—Ç–∏",
            how_found_us="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥—Ä—É–∑–µ–π"
        )
    
    @pytest.fixture
    def sample_client(self):
        """–ü—Ä–∏–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞."""
        return Client(
            id="test-client-id",
            name="–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞",
            phone="+79161234567",
            telegram_id=123456789,
            yoga_experience=True,
            intensity_preference="—Å—Ä–µ–¥–Ω—è—è",
            time_preference="–≤–µ—á–µ—Ä",
            age=30,
            injuries="–ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–ø–∏–Ω–æ–π",
            goals="–£–ª—É—á—à–µ–Ω–∏–µ –≥–∏–±–∫–æ—Å—Ç–∏",
            how_found_us="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥—Ä—É–∑–µ–π",
            status=ClientStatus.ACTIVE,
            created_at=datetime.now()
        )


class TestCreateClient(TestClientService):
    """–¢–µ—Å—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞."""
    
    @pytest.mark.asyncio
    async def test_create_client_success(self, client_service, mock_repository, sample_client_create_data, sample_client):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞."""
        # Arrange
        mock_repository.get_client_by_phone.return_value = None
        mock_repository.get_client_by_telegram_id.return_value = None
        mock_repository.save_client.return_value = sample_client
        
        # Act
        result = await client_service.create_client(sample_client_create_data)
        
        # Assert
        assert result == sample_client
        mock_repository.get_client_by_phone.assert_called_once_with("+79161234567")
        mock_repository.get_client_by_telegram_id.assert_called_once_with(123456789)
        mock_repository.save_client.assert_called_once()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ save –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        save_call_args = mock_repository.save_client.call_args[0][0]
        assert save_call_args.name == "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞"
        assert save_call_args.phone == "+79161234567"
    
    @pytest.mark.asyncio
    async def test_create_client_phone_exists(self, client_service, mock_repository, sample_client_create_data, sample_client):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º."""
        # Arrange
        mock_repository.get_client_by_phone.return_value = sample_client
        
        # Act & Assert
        with pytest.raises(BusinessLogicError) as exc_info:
            await client_service.create_client(sample_client_create_data)
        
        assert "—É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω" in str(exc_info.value)
        mock_repository.get_client_by_phone.assert_called_once()
        mock_repository.save_client.assert_not_called()
    
    @pytest.mark.asyncio
    async def test_create_client_telegram_exists(self, client_service, mock_repository, sample_client_create_data, sample_client):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º Telegram ID."""
        # Arrange
        mock_repository.get_client_by_phone.return_value = None
        mock_repository.get_client_by_telegram_id.return_value = sample_client
        
        # Act & Assert
        with pytest.raises(BusinessLogicError) as exc_info:
            await client_service.create_client(sample_client_create_data)
        
        assert "Telegram –∞–∫–∫–∞—É–Ω—Ç–æ–º" in str(exc_info.value)
        mock_repository.get_client_by_telegram_id.assert_called_once()
        mock_repository.save_client.assert_not_called()


class TestGetClient(TestClientService):
    """–¢–µ—Å—Ç—ã –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞."""
    
    @pytest.mark.asyncio
    async def test_get_client_success(self, client_service, mock_repository, sample_client):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞."""
        # Arrange
        mock_repository.get_client_by_id.return_value = sample_client
        
        # Act
        result = await client_service.get_client("test-client-id")
        
        # Assert
        assert result == sample_client
        mock_repository.get_client_by_id.assert_called_once_with("test-client-id")
    
    @pytest.mark.asyncio
    async def test_get_client_not_found(self, client_service, mock_repository):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞."""
        # Arrange
        mock_repository.get_client_by_id.return_value = None
        
        # Act & Assert
        with pytest.raises(BusinessLogicError) as exc_info:
            await client_service.get_client("nonexistent-id")
        
        assert "–Ω–µ –Ω–∞–π–¥–µ–Ω" in str(exc_info.value)
        mock_repository.get_client_by_id.assert_called_once_with("nonexistent-id")
    
    @pytest.mark.asyncio
    async def test_get_client_empty_id(self, client_service, mock_repository):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—É—Å—Ç—ã–º ID."""
        # Act & Assert
        with pytest.raises(ValidationError) as exc_info:
            await client_service.get_client("")
        
        assert "–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º" in str(exc_info.value)
        mock_repository.get_client_by_id.assert_not_called()


class TestGetClientByTelegramId(TestClientService):
    """–¢–µ—Å—Ç—ã –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ Telegram ID."""
    
    @pytest.mark.asyncio
    async def test_get_client_by_telegram_id_success(self, client_service, mock_repository, sample_client):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ Telegram ID."""
        # Arrange
        mock_repository.get_client_by_telegram_id.return_value = sample_client
        
        # Act
        result = await client_service.get_client_by_telegram_id(123456789)
        
        # Assert
        assert result == sample_client
        mock_repository.get_client_by_telegram_id.assert_called_once_with(123456789)
    
    @pytest.mark.asyncio
    async def test_get_client_by_telegram_id_not_found(self, client_service, mock_repository):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ Telegram ID."""
        # Arrange
        mock_repository.get_client_by_telegram_id.return_value = None
        
        # Act
        result = await client_service.get_client_by_telegram_id(999999999)
        
        # Assert
        assert result is None
        mock_repository.get_client_by_telegram_id.assert_called_once_with(999999999)
    
    @pytest.mark.asyncio
    async def test_get_client_by_telegram_id_invalid(self, client_service, mock_repository):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º Telegram ID."""
        # Act & Assert
        with pytest.raises(ValidationError):
            await client_service.get_client_by_telegram_id(0)
        
        mock_repository.get_client_by_telegram_id.assert_not_called()


class TestGetClientByPhone(TestClientService):
    """–¢–µ—Å—Ç—ã –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É."""
    
    @pytest.mark.asyncio
    async def test_get_client_by_phone_success(self, client_service, mock_repository, sample_client):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É."""
        # Arrange
        mock_repository.get_client_by_phone.return_value = sample_client
        
        # Act
        result = await client_service.get_client_by_phone("+79161234567")
        
        # Assert
        assert result == sample_client
        mock_repository.get_client_by_phone.assert_called_once_with("+79161234567")
    
    @pytest.mark.asyncio
    async def test_get_client_by_phone_normalize(self, client_service, mock_repository, sample_client):
        """–¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ."""
        # Arrange
        mock_repository.get_client_by_phone.return_value = sample_client
        
        # Act
        result = await client_service.get_client_by_phone("8-916-123-45-67")
        
        # Assert
        assert result == sample_client
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–ª–µ—Ñ–æ–Ω –±—ã–ª –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω
        mock_repository.get_client_by_phone.assert_called_once_with("+79161234567")
    
    @pytest.mark.asyncio
    async def test_get_client_by_phone_invalid_format(self, client_service, mock_repository):
        """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
        # Act & Assert
        with pytest.raises(ValidationError) as exc_info:
            await client_service.get_client_by_phone("invalid-phone")
        
        assert "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞" in str(exc_info.value)
        mock_repository.get_client_by_phone.assert_not_called()


class TestSearchAndUpdate(TestClientService):
    """–¢–µ—Å—Ç—ã –ø–æ–∏—Å–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
    
    @pytest.mark.asyncio
    async def test_search_clients_success(self, client_service, mock_repository, sample_client):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤."""
        # Arrange
        mock_repository.search_clients.return_value = [sample_client]
        
        # Act
        result = await client_service.search_clients("–ê–Ω–Ω–∞")
        
        # Assert
        assert result == [sample_client]
        mock_repository.search_clients.assert_called_once_with("–ê–Ω–Ω–∞")
    
    @pytest.mark.asyncio
    async def test_update_client_success(self, client_service, mock_repository, sample_client):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞."""
        # Arrange
        mock_repository.get_client_by_id.return_value = sample_client
        mock_repository.update_client.return_value = sample_client
        
        update_data = ClientUpdateData(name="–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞")
        
        # Act
        result = await client_service.update_client("test-client-id", update_data)
        
        # Assert
        assert result == sample_client
        mock_repository.get_client_by_id.assert_called_once_with("test-client-id")
        mock_repository.update_client.assert_called_once()


class TestClientStatusManagement(TestClientService):
    """–¢–µ—Å—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∫–ª–∏–µ–Ω—Ç–∞."""
    
    @pytest.mark.asyncio
    async def test_delete_client(self, client_service, mock_repository, sample_client):
        """–¢–µ—Å—Ç –º—è–≥–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞."""
        # Arrange
        mock_repository.get_client_by_id.return_value = sample_client
        mock_repository.update_client.return_value = sample_client
        
        # Act
        result = await client_service.delete_client("test-client-id")
        
        # Assert
        assert result is True
        # delete_client –≤—ã–∑—ã–≤–∞–µ—Ç get_client –∏ update_client, –∫–æ—Ç–æ—Ä—ã–π —Ç–æ–∂–µ –≤—ã–∑—ã–≤–∞–µ—Ç get_client
        assert mock_repository.get_client_by_id.call_count == 2
        mock_repository.update_client.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_activate_client(self, client_service, mock_repository, sample_client):
        """–¢–µ—Å—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞."""
        # Arrange
        mock_repository.get_client_by_id.return_value = sample_client
        mock_repository.update_client.return_value = sample_client
        
        # Act
        result = await client_service.activate_client("test-client-id")
        
        # Assert
        assert result == sample_client
        mock_repository.get_client_by_id.assert_called_once()
        mock_repository.update_client.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_deactivate_client(self, client_service, mock_repository, sample_client):
        """–¢–µ—Å—Ç –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞."""
        # Arrange
        mock_repository.get_client_by_id.return_value = sample_client
        mock_repository.update_client.return_value = sample_client
        
        # Act
        result = await client_service.deactivate_client("test-client-id")
        
        # Assert
        assert result == sample_client
        mock_repository.get_client_by_id.assert_called_once()
        mock_repository.update_client.assert_called_once()


class TestClientListMethods(TestClientService):
    """–¢–µ—Å—Ç—ã –º–µ—Ç–æ–¥–æ–≤ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤."""
    
    @pytest.mark.asyncio
    async def test_get_all_clients(self, client_service, mock_repository, sample_client):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤."""
        # Arrange
        mock_repository.list_clients.return_value = [sample_client]
        
        # Act
        result = await client_service.get_all_clients()
        
        # Assert
        assert result == [sample_client]
        mock_repository.list_clients.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_get_active_clients(self, client_service, mock_repository):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤."""
        # Arrange
        active_client = Client(
            id="active-client",
            name="–ê–∫—Ç–∏–≤–Ω—ã–π –ö–ª–∏–µ–Ω—Ç",
            phone="+79161111111",
            telegram_id=111111111,
            yoga_experience=True,
            intensity_preference="—Å—Ä–µ–¥–Ω—è—è",
            time_preference="—É—Ç—Ä–æ",
            status=ClientStatus.ACTIVE
        )
        
        inactive_client = Client(
            id="inactive-client",
            name="–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π –ö–ª–∏–µ–Ω—Ç",
            phone="+79162222222",
            telegram_id=222222222,
            yoga_experience=False,
            intensity_preference="–Ω–∏–∑–∫–∞—è",
            time_preference="–≤–µ—á–µ—Ä",
            status=ClientStatus.INACTIVE
        )
        
        mock_repository.list_clients.return_value = [active_client, inactive_client]
        
        # Act
        result = await client_service.get_active_clients()
        
        # Assert
        assert len(result) == 1
        assert result[0].status == ClientStatus.ACTIVE
        assert result[0].id == "active-client"
    
    @pytest.mark.asyncio
    async def test_get_clients_by_status(self, client_service, mock_repository):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É."""
        # Arrange
        trial_client = Client(
            id="trial-client",
            name="–ü—Ä–æ–±–Ω—ã–π –ö–ª–∏–µ–Ω—Ç",
            phone="+79163333333",
            telegram_id=333333333,
            yoga_experience=True,
            intensity_preference="–≤—ã—Å–æ–∫–∞—è",
            time_preference="–¥–µ–Ω—å",
            status=ClientStatus.TRIAL
        )
        
        active_client = Client(
            id="active-client-2",
            name="–ê–∫—Ç–∏–≤–Ω—ã–π –ö–ª–∏–µ–Ω—Ç 2",
            phone="+79164444444",
            telegram_id=444444444,
            yoga_experience=False,
            intensity_preference="—Å—Ä–µ–¥–Ω—è—è",
            time_preference="–ª—é–±–æ–µ",
            status=ClientStatus.ACTIVE
        )
        
        mock_repository.list_clients.return_value = [trial_client, active_client]
        
        # Act
        result = await client_service.get_clients_by_status(ClientStatus.TRIAL)
        
        # Assert
        assert len(result) == 1
        assert result[0].status == ClientStatus.TRIAL
        assert result[0].id == "trial-client" 