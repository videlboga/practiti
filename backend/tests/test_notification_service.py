"""
üì¢ –¢–µ—Å—Ç—ã –¥–ª—è NotificationService

–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å—é –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É —Ä–∞–±–æ—Ç—ã —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏.
"""

import pytest
from datetime import datetime, timedelta
from unittest.mock import AsyncMock

from backend.src.models.notification import (
    NotificationCreateData, NotificationType, NotificationStatus, NotificationPriority
)
from backend.src.models.client import Client, ClientCreateData
from backend.src.services.notification_service import NotificationService
from backend.src.repositories.in_memory_notification_repository import InMemoryNotificationRepository
from backend.src.utils.exceptions import BusinessLogicError


@pytest.fixture
def notification_repository():
    """–§–∏–∫—Å—Ç—É—Ä–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    return InMemoryNotificationRepository()


@pytest.fixture
def mock_client_service():
    """–ú–æ–∫ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞."""
    service = AsyncMock()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞
    test_client = Client(
        id="test_client_123",
        telegram_id=123456789,
        name="–¢–µ—Å—Ç–æ–≤—ã–π –ö–ª–∏–µ–Ω—Ç",
        phone="+79001234567",
        yoga_experience=True,
        intensity_preference="—Å—Ä–µ–¥–Ω—è—è",
        time_preference="–≤–µ—á–µ—Ä"
    )
    service.get_client.return_value = test_client
    
    return service


@pytest.fixture
def mock_subscription_service():
    """–ú–æ–∫ —Å–µ—Ä–≤–∏—Å–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤."""
    return AsyncMock()


@pytest.fixture
def mock_telegram_sender():
    """–ú–æ–∫ Telegram sender service."""
    sender = AsyncMock()
    # –ú–æ–∫–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
    sender.send_notification_to_client.return_value = (True, 12345, None)
    return sender


@pytest.fixture
def notification_service(notification_repository, mock_client_service, mock_subscription_service, mock_telegram_sender):
    """–§–∏–∫—Å—Ç—É—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    return NotificationService(
        notification_repository=notification_repository,
        client_service=mock_client_service,
        subscription_service=mock_subscription_service,
        telegram_sender=mock_telegram_sender
    )


@pytest.mark.asyncio
async def test_create_notification_success(notification_service):
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    # Arrange
    notification_data = NotificationCreateData(
        client_id="test_client_123",
        type=NotificationType.WELCOME_MESSAGE,
        title="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
        message="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Practiti!",
        priority=NotificationPriority.NORMAL
    )
    
    # Act
    notification = await notification_service.create_notification(notification_data)
    
    # Assert
    assert notification.client_id == "test_client_123"
    assert notification.type == NotificationType.WELCOME_MESSAGE
    assert notification.title == "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"
    assert notification.status == NotificationStatus.PENDING
    assert notification.priority == NotificationPriority.NORMAL


@pytest.mark.asyncio
async def test_create_notification_client_not_found(notification_service, mock_client_service):
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞."""
    # Arrange
    mock_client_service.get_client.side_effect = BusinessLogicError("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    notification_data = NotificationCreateData(
        client_id="nonexistent_client",
        type=NotificationType.WELCOME_MESSAGE,
        title="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
        message="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Practiti!"
    )
    
    # Act & Assert
    with pytest.raises(BusinessLogicError, match="–ö–ª–∏–µ–Ω—Ç —Å ID nonexistent_client –Ω–µ –Ω–∞–π–¥–µ–Ω"):
        await notification_service.create_notification(notification_data)


@pytest.mark.asyncio
async def test_create_notification_from_template_success(notification_service):
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ —à–∞–±–ª–æ–Ω–∞."""
    # Arrange
    template_data = {
        'client_name': '–¢–µ—Å—Ç–æ–≤—ã–π –ö–ª–∏–µ–Ω—Ç'
    }
    
    # Act
    notification = await notification_service.create_notification_from_template(
        client_id="test_client_123",
        notification_type=NotificationType.WELCOME_MESSAGE,
        template_data=template_data
    )
    
    # Assert
    assert notification.client_id == "test_client_123"
    assert notification.type == NotificationType.WELCOME_MESSAGE
    assert "–¢–µ—Å—Ç–æ–≤—ã–π –ö–ª–∏–µ–Ω—Ç" in notification.message
    assert notification.status == NotificationStatus.PENDING


@pytest.mark.asyncio
async def test_create_notification_from_template_missing_data(notification_service):
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ —à–∞–±–ª–æ–Ω–∞ —Å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
    # Arrange
    template_data = {}  # –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
    
    # Act & Assert
    with pytest.raises(BusinessLogicError, match="–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"):
        await notification_service.create_notification_from_template(
            client_id="test_client_123",
            notification_type=NotificationType.WELCOME_MESSAGE,
            template_data=template_data
        )


@pytest.mark.asyncio
async def test_get_notification_success(notification_service):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ ID."""
    # Arrange
    notification_data = NotificationCreateData(
        client_id="test_client_123",
        type=NotificationType.WELCOME_MESSAGE,
        title="–¢–µ—Å—Ç",
        message="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    created_notification = await notification_service.create_notification(notification_data)
    
    # Act
    notification = await notification_service.get_notification(created_notification.id)
    
    # Assert
    assert notification.id == created_notification.id
    assert notification.title == "–¢–µ—Å—Ç"


@pytest.mark.asyncio
async def test_get_notification_not_found(notification_service):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    # Act & Assert
    with pytest.raises(BusinessLogicError, match="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å ID nonexistent –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"):
        await notification_service.get_notification("nonexistent")


@pytest.mark.asyncio
async def test_send_notification_success(notification_service):
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    # Arrange
    notification_data = NotificationCreateData(
        client_id="test_client_123",
        type=NotificationType.WELCOME_MESSAGE,
        title="–¢–µ—Å—Ç",
        message="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    notification = await notification_service.create_notification(notification_data)
    
    # Act
    result = await notification_service.send_notification(notification.id)
    
    # Assert
    assert result is True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
    updated_notification = await notification_service.get_notification(notification.id)
    assert updated_notification.status == NotificationStatus.SENT
    assert updated_notification.sent_at is not None


@pytest.mark.asyncio
async def test_send_immediate_notification_success(notification_service):
    """–¢–µ—Å—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    # Arrange
    template_data = {'client_name': '–¢–µ—Å—Ç–æ–≤—ã–π –ö–ª–∏–µ–Ω—Ç'}
    
    # Act
    result = await notification_service.send_immediate_notification(
        client_id="test_client_123",
        notification_type=NotificationType.WELCOME_MESSAGE,
        template_data=template_data
    )
    
    # Assert
    assert result is True


@pytest.mark.asyncio
async def test_mark_as_delivered(notification_service):
    """–¢–µ—Å—Ç –ø–æ–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ."""
    # Arrange
    notification_data = NotificationCreateData(
        client_id="test_client_123",
        type=NotificationType.WELCOME_MESSAGE,
        title="–¢–µ—Å—Ç",
        message="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    notification = await notification_service.create_notification(notification_data)
    await notification_service.send_notification(notification.id)
    
    # Act
    updated_notification = await notification_service.mark_as_delivered(notification.id)
    
    # Assert
    assert updated_notification.status == NotificationStatus.DELIVERED
    assert updated_notification.delivered_at is not None


@pytest.mark.asyncio
async def test_mark_as_failed(notification_service):
    """–¢–µ—Å—Ç –ø–æ–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ."""
    # Arrange
    notification_data = NotificationCreateData(
        client_id="test_client_123",
        type=NotificationType.WELCOME_MESSAGE,
        title="–¢–µ—Å—Ç",
        message="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    notification = await notification_service.create_notification(notification_data)
    
    # Act
    updated_notification = await notification_service.mark_as_failed(
        notification.id, 
        "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏"
    )
    
    # Assert
    assert updated_notification.status == NotificationStatus.FAILED
    assert updated_notification.retry_count == 1


@pytest.mark.asyncio
async def test_cancel_notification(notification_service):
    """–¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    # Arrange
    notification_data = NotificationCreateData(
        client_id="test_client_123",
        type=NotificationType.WELCOME_MESSAGE,
        title="–¢–µ—Å—Ç",
        message="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    notification = await notification_service.create_notification(notification_data)
    
    # Act
    updated_notification = await notification_service.cancel_notification(notification.id)
    
    # Assert
    assert updated_notification.status == NotificationStatus.CANCELLED


@pytest.mark.asyncio
async def test_get_client_notifications(notification_service):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞."""
    # Arrange
    client_id = "test_client_123"
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    for i in range(3):
        notification_data = NotificationCreateData(
            client_id=client_id,
            type=NotificationType.WELCOME_MESSAGE,
            title=f"–¢–µ—Å—Ç {i}",
            message=f"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {i}"
        )
        await notification_service.create_notification(notification_data)
    
    # Act
    notifications = await notification_service.get_client_notifications(client_id)
    
    # Assert
    assert len(notifications) == 3
    assert all(n.client_id == client_id for n in notifications)


@pytest.mark.asyncio
async def test_get_notification_statistics_client(notification_service):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–ª–∏–µ–Ω—Ç—É."""
    # Arrange
    client_id = "test_client_123"
    
    # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏ —Å—Ç–∞—Ç—É—Å–æ–≤
    notification_data = NotificationCreateData(
        client_id=client_id,
        type=NotificationType.WELCOME_MESSAGE,
        title="–¢–µ—Å—Ç 1",
        message="–°–æ–æ–±—â–µ–Ω–∏–µ 1"
    )
    notification1 = await notification_service.create_notification(notification_data)
    await notification_service.send_notification(notification1.id)
    
    notification_data2 = NotificationCreateData(
        client_id=client_id,
        type=NotificationType.GENERAL_INFO,
        title="–¢–µ—Å—Ç 2",
        message="–°–æ–æ–±—â–µ–Ω–∏–µ 2"
    )
    await notification_service.create_notification(notification_data2)
    
    # Act
    stats = await notification_service.get_notification_statistics(client_id)
    
    # Assert
    assert stats['client_id'] == client_id
    assert stats['total_notifications'] == 2
    assert 'sent' in stats['by_status']
    assert 'pending' in stats['by_status']
    assert len(stats['recent_notifications']) == 2


@pytest.mark.asyncio
async def test_get_notification_statistics_general(notification_service):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    # Arrange
    notification_data = NotificationCreateData(
        client_id="test_client_123",
        type=NotificationType.WELCOME_MESSAGE,
        title="–¢–µ—Å—Ç",
        message="–°–æ–æ–±—â–µ–Ω–∏–µ"
    )
    await notification_service.create_notification(notification_data)
    
    # Act
    stats = await notification_service.get_notification_statistics()
    
    # Assert
    assert 'total_notifications' in stats
    assert 'by_status' in stats
    assert 'by_type' in stats
    assert 'system_health' in stats
    assert stats['total_notifications'] > 0


@pytest.mark.asyncio
async def test_send_welcome_notification(notification_service):
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    # Act
    result = await notification_service.send_welcome_notification(
        client_id="test_client_123",
        client_name="–¢–µ—Å—Ç–æ–≤—ã–π –ö–ª–∏–µ–Ω—Ç"
    )
    
    # Assert
    assert result is True


@pytest.mark.asyncio
async def test_send_registration_complete_notification(notification_service):
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    # Act
    result = await notification_service.send_registration_complete_notification(
        client_id="test_client_123",
        client_name="–¢–µ—Å—Ç–æ–≤—ã–π –ö–ª–∏–µ–Ω—Ç"
    )
    
    # Assert
    assert result is True


@pytest.mark.asyncio
async def test_send_subscription_purchased_notification(notification_service):
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞."""
    # Act
    result = await notification_service.send_subscription_purchased_notification(
        client_id="test_client_123",
        client_name="–¢–µ—Å—Ç–æ–≤—ã–π –ö–ª–∏–µ–Ω—Ç",
        subscription_type="PACKAGE_8",
        total_classes=8,
        end_date="31.12.2024",
        price=7000
    )
    
    # Assert
    assert result is True 