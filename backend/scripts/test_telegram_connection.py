#!/usr/bin/env python3
"""
üß™ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API.
–ü—Ä–∏–Ω—Ü–∏–ø CyberKitty: –ø—Ä–æ—Å—Ç–æ—Ç–∞ –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ.
"""

import asyncio
import logging
import sys
import os
import pytest

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

from telegram import Bot
from config.settings import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)


@pytest.mark.asyncio
async def test_telegram_connection():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API.
    """
    logger.info("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        telegram_config = settings.get_telegram_config()
        
        if telegram_config.bot_token == "fake_token_for_tests":
            logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            logger.info("üí° –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –∏ —É–∫–∞–∂–∏—Ç–µ TELEGRAM_BOT_TOKEN")
            return False
        
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
        bot = Bot(token=telegram_config.bot_token)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        logger.info("üì° –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ...")
        bot_info = await bot.get_me()
        
        logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        logger.info(f"ü§ñ –ò–º—è –±–æ—Ç–∞: {bot_info.first_name}")
        logger.info(f"üìù Username: @{bot_info.username}")
        logger.info(f"üÜî ID: {bot_info.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook
        webhook_info = await bot.get_webhook_info()
        if webhook_info.url:
            logger.info(f"üîó Webhook URL: {webhook_info.url}")
        else:
            logger.info("üì° Webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è polling)")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API: {e}")
        return False


@pytest.mark.asyncio
async def test_send_message():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    """
    logger.info("üì§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    
    try:
        telegram_config = settings.get_telegram_config()
        
        if not telegram_config.admin_chat_id:
            logger.warning("‚ö†Ô∏è Admin chat ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏")
            return True
        
        bot = Bot(token=telegram_config.bot_token)
        
        test_message = (
            "üß™ **–¢–µ—Å—Ç CyberKitty Practiti Backend**\n\n"
            "‚úÖ Telegram Bot —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!\n"
            "üöÄ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å –π–æ–≥–∞-—Å—Ç—É–¥–∏–µ–π.\n\n"
            "–ü—Ä–∏–Ω—Ü–∏–ø CyberKitty: –ø—Ä–æ—Å—Ç–æ—Ç–∞ –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ! üåü"
        )
        
        await bot.send_message(
            chat_id=telegram_config.admin_chat_id,
            text=test_message,
            parse_mode='Markdown'
        )
        
        logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False


async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    logger.info("üîç –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Telegram API...")
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    connection_ok = await test_telegram_connection()
    
    if not connection_ok:
        logger.error("üí• –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω!")
        return False
    
    # –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_ok = await test_send_message()
    
    if connection_ok and message_ok:
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        logger.info("ü§ñ Telegram Bot –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        return True
    else:
        logger.error("üí• –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã!")
        return False


if __name__ == "__main__":
    try:
        success = asyncio.run(main())
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        logger.info("üëã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        logger.critical(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 