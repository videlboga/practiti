"""
üõ†Ô∏è –°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google-—Ç–∞–±–ª–∏—Ü—ã CyberKitty Practiti

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:
1. –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Google-—Ç–∞–±–ª–∏—Ü–µ, —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.
2. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ª–∏—Å—Ç–æ–≤: "Clients", "Subscriptions", "Notifications".
3. –ï—Å–ª–∏ –ª–∏—Å—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, —Å–æ–∑–¥–∞–µ—Ç –∏—Ö.
4. –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∂–¥–æ–≥–æ –ª–∏—Å—Ç–∞.
"""

import asyncio
import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
project_root = Path(__file__).resolve().parents[2]
sys.path.insert(0, str(project_root))

# –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞
from backend.src.integrations.google_sheets import GoogleSheetsClient
from backend.src.repositories.google_sheets_client_repository import GoogleSheetsClientRepository
from backend.src.repositories.google_sheets_subscription_repository import GoogleSheetsSubscriptionRepository
from backend.src.repositories.google_sheets_notification_repository import GoogleSheetsNotificationRepository

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def setup_google_sheets():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏—Å—Ç–æ–≤ –≤ Google-—Ç–∞–±–ª–∏—Ü–µ.
    """
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google-—Ç–∞–±–ª–∏—Ü—ã...")
    
    try:
        client = GoogleSheetsClient()
        service = client.service  # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
        spreadsheet_id = client.spreadsheet_id
        
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ —Ç–∞–±–ª–∏—Ü–µ ID: {spreadsheet_id}")
        
        # 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ª–∏—Å—Ç–∞—Ö
        spreadsheet_metadata = service.spreadsheets().get(spreadsheetId=spreadsheet_id).execute()
        sheets = spreadsheet_metadata.get('sheets', [])
        existing_sheet_titles = {s.get('properties', {}).get('title') for s in sheets}
        logger.info(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ª–∏—Å—Ç—ã: {list(existing_sheet_titles)}")

        # 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –ª–∏—Å—Ç—ã –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞–º –Ω—É–∂–Ω—ã
        required_sheets = {
            "Clients": GoogleSheetsClientRepository.HEADER_ROW,
            "Subscriptions": GoogleSheetsSubscriptionRepository.HEADER_ROW,
            "Notifications": GoogleSheetsNotificationRepository.HEADER_ROW,
        }
        
        # 3. –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ª–∏—Å—Ç–æ–≤
        batch_update_requests = []
        for title in required_sheets:
            if title not in existing_sheet_titles:
                logger.warning(f"–õ–∏—Å—Ç '{title}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω.")
                batch_update_requests.append({'addSheet': {'properties': {'title': title}}})
        
        # 4. –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ª–∏—Å—Ç—ã –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        if batch_update_requests:
            logger.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–∞–∫–µ—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–æ–≤...")
            body = {'requests': batch_update_requests}
            service.spreadsheets().batchUpdate(spreadsheetId=spreadsheet_id, body=body).execute()
            logger.info("‚úÖ –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ª–∏—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã.")
        else:
            logger.info("–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ª–∏—Å—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.")

        # 5. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –∫–∞–∂–¥—ã–π –ª–∏—Å—Ç
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–ø–∏—Å—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤...")
        for title, headers in required_sheets.items():
            range_name = f"{title}!A1"
            try:
                await client.write_range(range_name="A1", values=[headers], sheet_name=title)
                logger.info(f" -> –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ª–∏—Å—Ç–∞ '{title}' —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã.")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è '{title}': {e}")
        
        logger.info("‚úÖüèÅ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google-—Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    except Exception as e:
        logger.critical(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤–æ –≤—Ä–µ–º—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}", exc_info=True)
        sys.exit(1)


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    asyncio.run(setup_google_sheets()) 